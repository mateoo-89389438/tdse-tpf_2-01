
tdse-tpf_2-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  08008ab4  08008ab4  00009ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a0  080093a0  0000b0c0  2**0
                  CONTENTS
  4 .ARM          00000008  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a8  080093a8  0000b0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a8  080093a8  0000a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093ac  080093ac  0000a3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  080093b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  200000c0  08009470  0000b0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08009470  0000b6f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4d2  00000000  00000000  0000b0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003499  00000000  00000000  0001a5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001da58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b05  00000000  00000000  0001e868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4c9  00000000  00000000  0001f36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016963  00000000  00000000  00039836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089512  00000000  00000000  00050199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d96ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043bc  00000000  00000000  000d96f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ddaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008a9c 	.word	0x08008a9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08008a9c 	.word	0x08008a9c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000176:	f107 0310 	add.w	r3, r7, #16
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000184:	4b62      	ldr	r3, [pc, #392]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a61      	ldr	r2, [pc, #388]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 800018a:	f043 0310 	orr.w	r3, r3, #16
 800018e:	6193      	str	r3, [r2, #24]
 8000190:	4b5f      	ldr	r3, [pc, #380]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	f003 0310 	and.w	r3, r3, #16
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b5c      	ldr	r3, [pc, #368]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a5b      	ldr	r2, [pc, #364]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b59      	ldr	r3, [pc, #356]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b56      	ldr	r3, [pc, #344]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a55      	ldr	r2, [pc, #340]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b53      	ldr	r3, [pc, #332]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b50      	ldr	r3, [pc, #320]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a4f      	ldr	r2, [pc, #316]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b4d      	ldr	r3, [pc, #308]	@ (8000310 <MX_GPIO_Init+0x1a0>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D13_Pin|D12_Pin|D11_Pin, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	21e0      	movs	r1, #224	@ 0xe0
 80001e8:	484a      	ldr	r0, [pc, #296]	@ (8000314 <MX_GPIO_Init+0x1a4>)
 80001ea:	f000 fed8 	bl	8000f9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80001f4:	4848      	ldr	r0, [pc, #288]	@ (8000318 <MX_GPIO_Init+0x1a8>)
 80001f6:	f000 fed2 	bl	8000f9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2180      	movs	r1, #128	@ 0x80
 80001fe:	4847      	ldr	r0, [pc, #284]	@ (800031c <MX_GPIO_Init+0x1ac>)
 8000200:	f000 fecd 	bl	8000f9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800020a:	4842      	ldr	r0, [pc, #264]	@ (8000314 <MX_GPIO_Init+0x1a4>)
 800020c:	f000 fec7 	bl	8000f9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	@ 0x40
 8000214:	4840      	ldr	r0, [pc, #256]	@ (8000318 <MX_GPIO_Init+0x1a8>)
 8000216:	f000 fec2 	bl	8000f9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800021a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800021e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000220:	4b3f      	ldr	r3, [pc, #252]	@ (8000320 <MX_GPIO_Init+0x1b0>)
 8000222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000224:	2300      	movs	r3, #0
 8000226:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000228:	f107 0310 	add.w	r3, r7, #16
 800022c:	4619      	mov	r1, r3
 800022e:	483b      	ldr	r0, [pc, #236]	@ (800031c <MX_GPIO_Init+0x1ac>)
 8000230:	f000 fd1a 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A4_Pin D2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A4_Pin|D2_Pin;
 8000234:	f240 4313 	movw	r3, #1043	@ 0x413
 8000238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800023e:	2301      	movs	r3, #1
 8000240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000242:	f107 0310 	add.w	r3, r7, #16
 8000246:	4619      	mov	r1, r3
 8000248:	4832      	ldr	r0, [pc, #200]	@ (8000314 <MX_GPIO_Init+0x1a4>)
 800024a:	f000 fd0d 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D12_Pin D11_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D12_Pin|D11_Pin;
 800024e:	23e0      	movs	r3, #224	@ 0xe0
 8000250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000252:	2301      	movs	r3, #1
 8000254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000256:	2300      	movs	r3, #0
 8000258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800025a:	2302      	movs	r3, #2
 800025c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800025e:	f107 0310 	add.w	r3, r7, #16
 8000262:	4619      	mov	r1, r3
 8000264:	482b      	ldr	r0, [pc, #172]	@ (8000314 <MX_GPIO_Init+0x1a4>)
 8000266:	f000 fcff 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 800026a:	2301      	movs	r3, #1
 800026c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000272:	2301      	movs	r3, #1
 8000274:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000276:	f107 0310 	add.w	r3, r7, #16
 800027a:	4619      	mov	r1, r3
 800027c:	4826      	ldr	r0, [pc, #152]	@ (8000318 <MX_GPIO_Init+0x1a8>)
 800027e:	f000 fcf3 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000282:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000288:	2301      	movs	r3, #1
 800028a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800028c:	2301      	movs	r3, #1
 800028e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000290:	2302      	movs	r3, #2
 8000292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000294:	f107 0310 	add.w	r3, r7, #16
 8000298:	4619      	mov	r1, r3
 800029a:	481f      	ldr	r0, [pc, #124]	@ (8000318 <MX_GPIO_Init+0x1a8>)
 800029c:	f000 fce4 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 80002a0:	2380      	movs	r3, #128	@ 0x80
 80002a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a8:	2301      	movs	r3, #1
 80002aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ac:	2302      	movs	r3, #2
 80002ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 80002b0:	f107 0310 	add.w	r3, r7, #16
 80002b4:	4619      	mov	r1, r3
 80002b6:	4819      	ldr	r0, [pc, #100]	@ (800031c <MX_GPIO_Init+0x1ac>)
 80002b8:	f000 fcd6 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D8_Pin;
 80002bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80002c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ca:	2302      	movs	r3, #2
 80002cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	4619      	mov	r1, r3
 80002d4:	480f      	ldr	r0, [pc, #60]	@ (8000314 <MX_GPIO_Init+0x1a4>)
 80002d6:	f000 fcc7 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 80002da:	2340      	movs	r3, #64	@ 0x40
 80002dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	4619      	mov	r1, r3
 80002f0:	4809      	ldr	r0, [pc, #36]	@ (8000318 <MX_GPIO_Init+0x1a8>)
 80002f2:	f000 fcb9 	bl	8000c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	2028      	movs	r0, #40	@ 0x28
 80002fc:	f000 fc77 	bl	8000bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000300:	2028      	movs	r0, #40	@ 0x28
 8000302:	f000 fc90 	bl	8000c26 <HAL_NVIC_EnableIRQ>

}
 8000306:	bf00      	nop
 8000308:	3720      	adds	r7, #32
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000
 8000314:	40010800 	.word	0x40010800
 8000318:	40010c00 	.word	0x40010c00
 800031c:	40011000 	.word	0x40011000
 8000320:	10110000 	.word	0x10110000

08000324 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000328:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <MX_I2C1_Init+0x50>)
 800032a:	4a13      	ldr	r2, [pc, #76]	@ (8000378 <MX_I2C1_Init+0x54>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000330:	4a12      	ldr	r2, [pc, #72]	@ (800037c <MX_I2C1_Init+0x58>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_I2C1_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000342:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000348:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <MX_I2C1_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000354:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035a:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000360:	4804      	ldr	r0, [pc, #16]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000362:	f000 fe57 	bl	8001014 <HAL_I2C_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800036c:	f000 f8ca 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	200000dc 	.word	0x200000dc
 8000378:	40005400 	.word	0x40005400
 800037c:	000186a0 	.word	0x000186a0

08000380 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	@ 0x28
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a1d      	ldr	r2, [pc, #116]	@ (8000410 <HAL_I2C_MspInit+0x90>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d132      	bne.n	8000406 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000414 <HAL_I2C_MspInit+0x94>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000414 <HAL_I2C_MspInit+0x94>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b19      	ldr	r3, [pc, #100]	@ (8000414 <HAL_I2C_MspInit+0x94>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	613b      	str	r3, [r7, #16]
 80003b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80003bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003be:	2312      	movs	r3, #18
 80003c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c2:	2303      	movs	r3, #3
 80003c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	4619      	mov	r1, r3
 80003cc:	4812      	ldr	r0, [pc, #72]	@ (8000418 <HAL_I2C_MspInit+0x98>)
 80003ce:	f000 fc4b 	bl	8000c68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80003d2:	4b12      	ldr	r3, [pc, #72]	@ (800041c <HAL_I2C_MspInit+0x9c>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80003d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003da:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80003de:	627b      	str	r3, [r7, #36]	@ 0x24
 80003e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003e2:	f043 0302 	orr.w	r3, r3, #2
 80003e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80003e8:	4a0c      	ldr	r2, [pc, #48]	@ (800041c <HAL_I2C_MspInit+0x9c>)
 80003ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003ec:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ee:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <HAL_I2C_MspInit+0x94>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a08      	ldr	r2, [pc, #32]	@ (8000414 <HAL_I2C_MspInit+0x94>)
 80003f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <HAL_I2C_MspInit+0x94>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000406:	bf00      	nop
 8000408:	3728      	adds	r7, #40	@ 0x28
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40005400 	.word	0x40005400
 8000414:	40021000 	.word	0x40021000
 8000418:	40010c00 	.word	0x40010c00
 800041c:	40010000 	.word	0x40010000

08000420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000424:	f007 f8e2 	bl	80075ec <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000428:	f000 fa84 	bl	8000934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042c:	f000 f80d 	bl	800044a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000430:	f7ff fe9e 	bl	8000170 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000434:	f000 f9f0 	bl	8000818 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000438:	f7ff ff74 	bl	8000324 <MX_I2C1_Init>
  MX_RTC_Init();
 800043c:	f000 f868 	bl	8000510 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000440:	f003 fbc0 	bl	8003bc4 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000444:	f003 fc84 	bl	8003d50 <app_update>
 8000448:	e7fc      	b.n	8000444 <main+0x24>

0800044a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b094      	sub	sp, #80	@ 0x50
 800044e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000450:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000454:	2228      	movs	r2, #40	@ 0x28
 8000456:	2100      	movs	r1, #0
 8000458:	4618      	mov	r0, r3
 800045a:	f007 fbd4 	bl	8007c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	f107 0314 	add.w	r3, r7, #20
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800047a:	2309      	movs	r3, #9
 800047c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800047e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	2301      	movs	r3, #1
 800048a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800048c:	2301      	movs	r3, #1
 800048e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2302      	movs	r3, #2
 8000492:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000494:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000498:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800049a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800049e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 ff55 	bl	8002354 <HAL_RCC_OscConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004b0:	f000 f828 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2302      	movs	r3, #2
 80004ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2102      	movs	r1, #2
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 f9c1 	bl	8002858 <HAL_RCC_ClockConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004dc:	f000 f812 	bl	8000504 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004e0:	2301      	movs	r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004e8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 fb41 	bl	8002b74 <HAL_RCCEx_PeriphCLKConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004f8:	f000 f804 	bl	8000504 <Error_Handler>
  }
}
 80004fc:	bf00      	nop
 80004fe:	3750      	adds	r7, #80	@ 0x50
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <MX_RTC_Init>:
static void RTC_EnableClock_LSE_Pref(void);
static void RTC_WriteDefaultIfNotMarked(void);

/* ====== API ====== */
void MX_RTC_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* 1) Habilitar dominio backup y acceso */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <MX_RTC_Init+0x70>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a19      	ldr	r2, [pc, #100]	@ (8000580 <MX_RTC_Init+0x70>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <MX_RTC_Init+0x70>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_BKP_CLK_ENABLE();
 800052e:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <MX_RTC_Init+0x70>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a13      	ldr	r2, [pc, #76]	@ (8000580 <MX_RTC_Init+0x70>)
 8000534:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <MX_RTC_Init+0x70>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
  HAL_PWR_EnableBkUpAccess();
 8000546:	f001 fef9 	bl	800233c <HAL_PWR_EnableBkUpAccess>

  /* 2) Elegir fuente del RTC: LSE preferido, fallback a LSI */
  RTC_EnableClock_LSE_Pref();
 800054a:	f000 f829 	bl	80005a0 <RTC_EnableClock_LSE_Pref>

  /* 3) Inicializar el handle del RTC */
  hrtc.Instance = RTC;
 800054e:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <MX_RTC_Init+0x74>)
 8000550:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <MX_RTC_Init+0x78>)
 8000552:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;   /* F1: HAL calcula 1s automático */
 8000554:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <MX_RTC_Init+0x74>)
 8000556:	f04f 32ff 	mov.w	r2, #4294967295
 800055a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800055c:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <MX_RTC_Init+0x74>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]

  if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000562:	4808      	ldr	r0, [pc, #32]	@ (8000584 <MX_RTC_Init+0x74>)
 8000564:	f002 fc72 	bl	8002e4c <HAL_RTC_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_RTC_Init+0x62>
    Error_Handler();
 800056e:	f7ff ffc9 	bl	8000504 <Error_Handler>
  }

  /* 4) Solo escribir hora/fecha por defecto si NO está marcado el backup */
  RTC_WriteDefaultIfNotMarked();
 8000572:	f000 f865 	bl	8000640 <RTC_WriteDefaultIfNotMarked>

  /* 5) (Opcional) Podés deshabilitar acceso a backup si no vas a usarlo más ahora */
  // HAL_PWR_DisableBkUpAccess();
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000
 8000584:	20000130 	.word	0x20000130
 8000588:	40002800 	.word	0x40002800

0800058c <HAL_RTC_MspInit>:

/* ====== MSP ====== */
void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (rtcHandle->Instance == RTC) {
    /* Ya se habilitaron PWR/BKP y se configuró LSE/LSI en MX_RTC_Init() */
    /* Solo habilitamos el reloj del periférico RTC si no lo hizo el helper */
    /* (El helper ya llama __HAL_RCC_RTC_ENABLE(); si preferís, dejalo acá.) */
  }
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
	...

080005a0 <RTC_EnableClock_LSE_Pref>:

/* ====== Helpers ====== */

/* Intenta LSE; si falla, usa LSI. Deja el RTC habilitado. */
static void RTC_EnableClock_LSE_Pref(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* Asegurar acceso al backup domain */
  HAL_PWR_EnableBkUpAccess();
 80005a6:	f001 fec9 	bl	800233c <HAL_PWR_EnableBkUpAccess>

  /* 1) Intentar LSE */
  __HAL_RCC_LSE_CONFIG(RCC_LSE_ON);
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <RTC_EnableClock_LSE_Pref+0x94>)
 80005ac:	6a1b      	ldr	r3, [r3, #32]
 80005ae:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <RTC_EnableClock_LSE_Pref+0x94>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6213      	str	r3, [r2, #32]

  /* Espera sencilla por LSE listo (timeout básico) */
  uint32_t timeout = 0xFFFF;
 80005b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ba:	607b      	str	r3, [r7, #4]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET && timeout--) {
 80005bc:	bf00      	nop
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <RTC_EnableClock_LSE_Pref+0x94>)
 80005c0:	6a1b      	ldr	r3, [r3, #32]
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d104      	bne.n	80005d4 <RTC_EnableClock_LSE_Pref+0x34>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f4      	bne.n	80005be <RTC_EnableClock_LSE_Pref+0x1e>
    /* spin */
  }

  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80005d4:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <RTC_EnableClock_LSE_Pref+0x94>)
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	f003 0302 	and.w	r3, r3, #2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d008      	beq.n	80005f2 <RTC_EnableClock_LSE_Pref+0x52>
    /* LSE ok -> fuente de RTC = LSE */
    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <RTC_EnableClock_LSE_Pref+0x94>)
 80005e2:	6a1b      	ldr	r3, [r3, #32]
 80005e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80005e8:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <RTC_EnableClock_LSE_Pref+0x94>)
 80005ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ee:	6213      	str	r3, [r2, #32]
 80005f0:	e019      	b.n	8000626 <RTC_EnableClock_LSE_Pref+0x86>
  } else {
    /* LSE falló -> activar LSI y usarlo como fuente del RTC */
    __HAL_RCC_LSI_ENABLE();
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <RTC_EnableClock_LSE_Pref+0x98>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
    timeout = 0xFFFF;
 80005f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005fc:	607b      	str	r3, [r7, #4]
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET && timeout--) {
 80005fe:	bf00      	nop
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <RTC_EnableClock_LSE_Pref+0x94>)
 8000602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b00      	cmp	r3, #0
 800060a:	d104      	bne.n	8000616 <RTC_EnableClock_LSE_Pref+0x76>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1f4      	bne.n	8000600 <RTC_EnableClock_LSE_Pref+0x60>
      /* spin */
    }
    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI);
 8000616:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <RTC_EnableClock_LSE_Pref+0x94>)
 8000618:	6a1b      	ldr	r3, [r3, #32]
 800061a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800061e:	4a05      	ldr	r2, [pc, #20]	@ (8000634 <RTC_EnableClock_LSE_Pref+0x94>)
 8000620:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000624:	6213      	str	r3, [r2, #32]
  }

  /* 2) Habilitar reloj del RTC */
  __HAL_RCC_RTC_ENABLE();
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <RTC_EnableClock_LSE_Pref+0x9c>)
 8000628:	2201      	movs	r2, #1
 800062a:	601a      	str	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	42420480 	.word	0x42420480
 800063c:	4242043c 	.word	0x4242043c

08000640 <RTC_WriteDefaultIfNotMarked>:

/* Si no está el marcador en BKP_DR1, setea hora/fecha por defecto y marca */
static void RTC_WriteDefaultIfNotMarked(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
  uint32_t mark = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MARK_REG);
 8000646:	2101      	movs	r1, #1
 8000648:	4820      	ldr	r0, [pc, #128]	@ (80006cc <RTC_WriteDefaultIfNotMarked+0x8c>)
 800064a:	f003 f9c1 	bl	80039d0 <HAL_RTCEx_BKUPRead>
 800064e:	60f8      	str	r0, [r7, #12]
  if (mark != RTC_BKP_MARK_VALUE) {
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000656:	4293      	cmp	r3, r2
 8000658:	d033      	beq.n	80006c2 <RTC_WriteDefaultIfNotMarked+0x82>
    /* Primera vez: cargar una hora/fecha de fábrica */
    RTC_TimeTypeDef t = {0};
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	2100      	movs	r1, #0
 8000660:	460a      	mov	r2, r1
 8000662:	801a      	strh	r2, [r3, #0]
 8000664:	460a      	mov	r2, r1
 8000666:	709a      	strb	r2, [r3, #2]
    RTC_DateTypeDef d = {0};
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]

    t.Hours   = 12;    /* 12:00:00 */
 800066c:	230c      	movs	r3, #12
 800066e:	723b      	strb	r3, [r7, #8]
    t.Minutes = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	727b      	strb	r3, [r7, #9]
    t.Seconds = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	72bb      	strb	r3, [r7, #10]

    d.WeekDay = RTC_WEEKDAY_MONDAY; /* opcional */
 8000678:	2301      	movs	r3, #1
 800067a:	713b      	strb	r3, [r7, #4]
    d.Month   = 1;      /* enero */
 800067c:	2301      	movs	r3, #1
 800067e:	717b      	strb	r3, [r7, #5]
    d.Date    = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	71bb      	strb	r3, [r7, #6]
    d.Year    = 25;     /* 20 25 */
 8000684:	2319      	movs	r3, #25
 8000686:	71fb      	strb	r3, [r7, #7]

    if (HAL_RTC_SetTime(&hrtc, &t, RTC_FORMAT_BIN) != HAL_OK) {
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	480e      	ldr	r0, [pc, #56]	@ (80006cc <RTC_WriteDefaultIfNotMarked+0x8c>)
 8000692:	f002 fc67 	bl	8002f64 <HAL_RTC_SetTime>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <RTC_WriteDefaultIfNotMarked+0x60>
      Error_Handler();
 800069c:	f7ff ff32 	bl	8000504 <Error_Handler>
    }
    if (HAL_RTC_SetDate(&hrtc, &d, RTC_FORMAT_BIN) != HAL_OK) {
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	4809      	ldr	r0, [pc, #36]	@ (80006cc <RTC_WriteDefaultIfNotMarked+0x8c>)
 80006a8:	f002 fdcc 	bl	8003244 <HAL_RTC_SetDate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <RTC_WriteDefaultIfNotMarked+0x76>
      Error_Handler();
 80006b2:	f7ff ff27 	bl	8000504 <Error_Handler>
    }

    /* Dejar marcado: “ya inicializado” */
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MARK_REG, RTC_BKP_MARK_VALUE);
 80006b6:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80006ba:	2101      	movs	r1, #1
 80006bc:	4803      	ldr	r0, [pc, #12]	@ (80006cc <RTC_WriteDefaultIfNotMarked+0x8c>)
 80006be:	f003 f96d 	bl	800399c <HAL_RTCEx_BKUPWrite>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000130 	.word	0x20000130

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <HAL_MspInit+0x5c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a14      	ldr	r2, [pc, #80]	@ (800072c <HAL_MspInit+0x5c>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b12      	ldr	r3, [pc, #72]	@ (800072c <HAL_MspInit+0x5c>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <HAL_MspInit+0x5c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	@ (800072c <HAL_MspInit+0x5c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <HAL_MspInit+0x5c>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000706:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <HAL_MspInit+0x60>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	4a04      	ldr	r2, [pc, #16]	@ (8000730 <HAL_MspInit+0x60>)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40021000 	.word	0x40021000
 8000730:	40010000 	.word	0x40010000

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <NMI_Handler+0x4>

0800073c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <MemManage_Handler+0x4>

0800074c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <UsageFault_Handler+0x4>

0800075c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 f91c 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 8000788:	f000 fa67 	bl	8000c5a <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000794:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000798:	f000 fc1a 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	@ (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f007 fa7a 	bl	8007cc8 <__errno>
 80007d4:	4603      	mov	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <_sbrk+0x64>)
 80007f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20005000 	.word	0x20005000
 8000800:	00000400 	.word	0x00000400
 8000804:	20000144 	.word	0x20000144
 8000808:	200006f8 	.word	0x200006f8

0800080c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <MX_USART2_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 8000850:	f003 f8da 	bl	8003a08 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f7ff fe53 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000148 	.word	0x20000148
 8000868:	40004400 	.word	0x40004400

0800086c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a15      	ldr	r2, [pc, #84]	@ (80008dc <HAL_UART_MspInit+0x70>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d123      	bne.n	80008d4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <HAL_UART_MspInit+0x74>)
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	4a13      	ldr	r2, [pc, #76]	@ (80008e0 <HAL_UART_MspInit+0x74>)
 8000892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000896:	61d3      	str	r3, [r2, #28]
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <HAL_UART_MspInit+0x74>)
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <HAL_UART_MspInit+0x74>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <HAL_UART_MspInit+0x74>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <HAL_UART_MspInit+0x74>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008bc:	230c      	movs	r3, #12
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <HAL_UART_MspInit+0x78>)
 80008d0:	f000 f9ca 	bl	8000c68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010800 	.word	0x40010800

080008e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e8:	f7ff ff90 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ee:	490c      	ldr	r1, [pc, #48]	@ (8000920 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000924 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a09      	ldr	r2, [pc, #36]	@ (8000928 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000904:	4c09      	ldr	r4, [pc, #36]	@ (800092c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000912:	f007 f9df 	bl	8007cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff fd83 	bl	8000420 <main>
  bx lr
 800091a:	4770      	bx	lr
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000924:	080093b0 	.word	0x080093b0
  ldr r2, =_sbss
 8000928:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800092c:	200006f8 	.word	0x200006f8

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>
	...

08000934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	@ (800095c <HAL_Init+0x28>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	@ (800095c <HAL_Init+0x28>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f947 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 f808 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff febe 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f95f 	bl	8000c42 <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f927 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	@ (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <HAL_IncTick+0x1c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <HAL_IncTick+0x20>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a03      	ldr	r2, [pc, #12]	@ (80009e0 <HAL_IncTick+0x20>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000190 	.word	0x20000190

080009e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	@ (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000190 	.word	0x20000190

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff fff0 	bl	80009e4 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffe0 	bl	80009e4 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4906      	ldr	r1, [pc, #24]	@ (8000ad8 <__NVIC_EnableIRQ+0x34>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	@ (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	@ (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	@ 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	@ 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff90 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff2d 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff42 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff90 	bl	8000b30 <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5f 	bl	8000adc <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff35 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffa2 	bl	8000b94 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c5e:	f003 f8dd 	bl	8003e1c <HAL_SYSTICK_Callback>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b08b      	sub	sp, #44	@ 0x2c
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7a:	e169      	b.n	8000f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8158 	bne.w	8000f4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4a9a      	ldr	r2, [pc, #616]	@ (8000f08 <HAL_GPIO_Init+0x2a0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d05e      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000ca4:	4a98      	ldr	r2, [pc, #608]	@ (8000f08 <HAL_GPIO_Init+0x2a0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d875      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000caa:	4a98      	ldr	r2, [pc, #608]	@ (8000f0c <HAL_GPIO_Init+0x2a4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d058      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cb0:	4a96      	ldr	r2, [pc, #600]	@ (8000f0c <HAL_GPIO_Init+0x2a4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d86f      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cb6:	4a96      	ldr	r2, [pc, #600]	@ (8000f10 <HAL_GPIO_Init+0x2a8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d052      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cbc:	4a94      	ldr	r2, [pc, #592]	@ (8000f10 <HAL_GPIO_Init+0x2a8>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d869      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cc2:	4a94      	ldr	r2, [pc, #592]	@ (8000f14 <HAL_GPIO_Init+0x2ac>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d04c      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cc8:	4a92      	ldr	r2, [pc, #584]	@ (8000f14 <HAL_GPIO_Init+0x2ac>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d863      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cce:	4a92      	ldr	r2, [pc, #584]	@ (8000f18 <HAL_GPIO_Init+0x2b0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d046      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cd4:	4a90      	ldr	r2, [pc, #576]	@ (8000f18 <HAL_GPIO_Init+0x2b0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d85d      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	d82a      	bhi.n	8000d34 <HAL_GPIO_Init+0xcc>
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d859      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce8 <HAL_GPIO_Init+0x80>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d3d 	.word	0x08000d3d
 8000cf0:	08000d4f 	.word	0x08000d4f
 8000cf4:	08000d91 	.word	0x08000d91
 8000cf8:	08000d97 	.word	0x08000d97
 8000cfc:	08000d97 	.word	0x08000d97
 8000d00:	08000d97 	.word	0x08000d97
 8000d04:	08000d97 	.word	0x08000d97
 8000d08:	08000d97 	.word	0x08000d97
 8000d0c:	08000d97 	.word	0x08000d97
 8000d10:	08000d97 	.word	0x08000d97
 8000d14:	08000d97 	.word	0x08000d97
 8000d18:	08000d97 	.word	0x08000d97
 8000d1c:	08000d97 	.word	0x08000d97
 8000d20:	08000d97 	.word	0x08000d97
 8000d24:	08000d97 	.word	0x08000d97
 8000d28:	08000d97 	.word	0x08000d97
 8000d2c:	08000d45 	.word	0x08000d45
 8000d30:	08000d59 	.word	0x08000d59
 8000d34:	4a79      	ldr	r2, [pc, #484]	@ (8000f1c <HAL_GPIO_Init+0x2b4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d3a:	e02c      	b.n	8000d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	623b      	str	r3, [r7, #32]
          break;
 8000d42:	e029      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e024      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	3308      	adds	r3, #8
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e01f      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	330c      	adds	r3, #12
 8000d5e:	623b      	str	r3, [r7, #32]
          break;
 8000d60:	e01a      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e013      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d105      	bne.n	8000d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	611a      	str	r2, [r3, #16]
          break;
 8000d82:	e009      	b.n	8000d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d84:	2308      	movs	r3, #8
 8000d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	615a      	str	r2, [r3, #20]
          break;
 8000d8e:	e003      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
          break;
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          break;
 8000d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2bff      	cmp	r3, #255	@ 0xff
 8000d9c:	d801      	bhi.n	8000da2 <HAL_GPIO_Init+0x13a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	e001      	b.n	8000da6 <HAL_GPIO_Init+0x13e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3304      	adds	r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	2bff      	cmp	r3, #255	@ 0xff
 8000dac:	d802      	bhi.n	8000db4 <HAL_GPIO_Init+0x14c>
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x152>
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	3b08      	subs	r3, #8
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	6a39      	ldr	r1, [r7, #32]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000de8:	4b4d      	ldr	r3, [pc, #308]	@ (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a4c      	ldr	r2, [pc, #304]	@ (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b4a      	ldr	r3, [pc, #296]	@ (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e00:	4a48      	ldr	r2, [pc, #288]	@ (8000f24 <HAL_GPIO_Init+0x2bc>)
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a40      	ldr	r2, [pc, #256]	@ (8000f28 <HAL_GPIO_Init+0x2c0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d013      	beq.n	8000e54 <HAL_GPIO_Init+0x1ec>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f2c <HAL_GPIO_Init+0x2c4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d00d      	beq.n	8000e50 <HAL_GPIO_Init+0x1e8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a3e      	ldr	r2, [pc, #248]	@ (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d007      	beq.n	8000e4c <HAL_GPIO_Init+0x1e4>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d101      	bne.n	8000e48 <HAL_GPIO_Init+0x1e0>
 8000e44:	2303      	movs	r3, #3
 8000e46:	e006      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e48:	2304      	movs	r3, #4
 8000e4a:	e004      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e002      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e54:	2300      	movs	r3, #0
 8000e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e58:	f002 0203 	and.w	r2, r2, #3
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	4093      	lsls	r3, r2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e66:	492f      	ldr	r1, [pc, #188]	@ (8000f24 <HAL_GPIO_Init+0x2bc>)
 8000e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e80:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	492c      	ldr	r1, [pc, #176]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	608b      	str	r3, [r1, #8]
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4928      	ldr	r1, [pc, #160]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea8:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	4922      	ldr	r1, [pc, #136]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60cb      	str	r3, [r1, #12]
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eb6:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	491e      	ldr	r1, [pc, #120]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	4918      	ldr	r1, [pc, #96]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	604b      	str	r3, [r1, #4]
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4914      	ldr	r1, [pc, #80]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d021      	beq.n	8000f3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	490e      	ldr	r1, [pc, #56]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
 8000f04:	e021      	b.n	8000f4a <HAL_GPIO_Init+0x2e2>
 8000f06:	bf00      	nop
 8000f08:	10320000 	.word	0x10320000
 8000f0c:	10310000 	.word	0x10310000
 8000f10:	10220000 	.word	0x10220000
 8000f14:	10210000 	.word	0x10210000
 8000f18:	10120000 	.word	0x10120000
 8000f1c:	10110000 	.word	0x10110000
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	40010c00 	.word	0x40010c00
 8000f30:	40011000 	.word	0x40011000
 8000f34:	40011400 	.word	0x40011400
 8000f38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4909      	ldr	r1, [pc, #36]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f56:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f ae8e 	bne.w	8000c7c <HAL_GPIO_Init+0x14>
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	372c      	adds	r7, #44	@ 0x2c
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e001      	b.n	8000f92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	807b      	strh	r3, [r7, #2]
 8000faa:	4613      	mov	r3, r2
 8000fac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fae:	787b      	ldrb	r3, [r7, #1]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fba:	e003      	b.n	8000fc4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	041a      	lsls	r2, r3, #16
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	611a      	str	r2, [r3, #16]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f806 	bl	8001000 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e12b      	b.n	800127e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d106      	bne.n	8001040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff f9a0 	bl	8000380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2224      	movs	r2, #36	@ 0x24
 8001044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001078:	f001 fd36 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 800107c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a81      	ldr	r2, [pc, #516]	@ (8001288 <HAL_I2C_Init+0x274>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d807      	bhi.n	8001098 <HAL_I2C_Init+0x84>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4a80      	ldr	r2, [pc, #512]	@ (800128c <HAL_I2C_Init+0x278>)
 800108c:	4293      	cmp	r3, r2
 800108e:	bf94      	ite	ls
 8001090:	2301      	movls	r3, #1
 8001092:	2300      	movhi	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	e006      	b.n	80010a6 <HAL_I2C_Init+0x92>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4a7d      	ldr	r2, [pc, #500]	@ (8001290 <HAL_I2C_Init+0x27c>)
 800109c:	4293      	cmp	r3, r2
 800109e:	bf94      	ite	ls
 80010a0:	2301      	movls	r3, #1
 80010a2:	2300      	movhi	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0e7      	b.n	800127e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4a78      	ldr	r2, [pc, #480]	@ (8001294 <HAL_I2C_Init+0x280>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	0c9b      	lsrs	r3, r3, #18
 80010b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001288 <HAL_I2C_Init+0x274>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d802      	bhi.n	80010e8 <HAL_I2C_Init+0xd4>
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3301      	adds	r3, #1
 80010e6:	e009      	b.n	80010fc <HAL_I2C_Init+0xe8>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	4a69      	ldr	r2, [pc, #420]	@ (8001298 <HAL_I2C_Init+0x284>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	099b      	lsrs	r3, r3, #6
 80010fa:	3301      	adds	r3, #1
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	430b      	orrs	r3, r1
 8001102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800110e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	495c      	ldr	r1, [pc, #368]	@ (8001288 <HAL_I2C_Init+0x274>)
 8001118:	428b      	cmp	r3, r1
 800111a:	d819      	bhi.n	8001150 <HAL_I2C_Init+0x13c>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1e59      	subs	r1, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fbb1 f3f3 	udiv	r3, r1, r3
 800112a:	1c59      	adds	r1, r3, #1
 800112c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001130:	400b      	ands	r3, r1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00a      	beq.n	800114c <HAL_I2C_Init+0x138>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1e59      	subs	r1, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fbb1 f3f3 	udiv	r3, r1, r3
 8001144:	3301      	adds	r3, #1
 8001146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114a:	e051      	b.n	80011f0 <HAL_I2C_Init+0x1dc>
 800114c:	2304      	movs	r3, #4
 800114e:	e04f      	b.n	80011f0 <HAL_I2C_Init+0x1dc>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d111      	bne.n	800117c <HAL_I2C_Init+0x168>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	1e58      	subs	r0, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6859      	ldr	r1, [r3, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	440b      	add	r3, r1
 8001166:	fbb0 f3f3 	udiv	r3, r0, r3
 800116a:	3301      	adds	r3, #1
 800116c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001170:	2b00      	cmp	r3, #0
 8001172:	bf0c      	ite	eq
 8001174:	2301      	moveq	r3, #1
 8001176:	2300      	movne	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	e012      	b.n	80011a2 <HAL_I2C_Init+0x18e>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1e58      	subs	r0, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6859      	ldr	r1, [r3, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	0099      	lsls	r1, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001192:	3301      	adds	r3, #1
 8001194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2C_Init+0x196>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e022      	b.n	80011f0 <HAL_I2C_Init+0x1dc>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10e      	bne.n	80011d0 <HAL_I2C_Init+0x1bc>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1e58      	subs	r0, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6859      	ldr	r1, [r3, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	440b      	add	r3, r1
 80011c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c4:	3301      	adds	r3, #1
 80011c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ce:	e00f      	b.n	80011f0 <HAL_I2C_Init+0x1dc>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1e58      	subs	r0, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	0099      	lsls	r1, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e6:	3301      	adds	r3, #1
 80011e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	6809      	ldr	r1, [r1, #0]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69da      	ldr	r2, [r3, #28]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800121e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6911      	ldr	r1, [r2, #16]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68d2      	ldr	r2, [r2, #12]
 800122a:	4311      	orrs	r1, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	430b      	orrs	r3, r1
 8001232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0201 	orr.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2220      	movs	r2, #32
 800126a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	000186a0 	.word	0x000186a0
 800128c:	001e847f 	.word	0x001e847f
 8001290:	003d08ff 	.word	0x003d08ff
 8001294:	431bde83 	.word	0x431bde83
 8001298:	10624dd3 	.word	0x10624dd3

0800129c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	817b      	strh	r3, [r7, #10]
 80012ae:	460b      	mov	r3, r1
 80012b0:	813b      	strh	r3, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012b6:	f7ff fb95 	bl	80009e4 <HAL_GetTick>
 80012ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b20      	cmp	r3, #32
 80012c6:	f040 80d9 	bne.w	800147c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2319      	movs	r3, #25
 80012d0:	2201      	movs	r2, #1
 80012d2:	496d      	ldr	r1, [pc, #436]	@ (8001488 <HAL_I2C_Mem_Write+0x1ec>)
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 fdfb 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80012e0:	2302      	movs	r3, #2
 80012e2:	e0cc      	b.n	800147e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_I2C_Mem_Write+0x56>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e0c5      	b.n	800147e <HAL_I2C_Mem_Write+0x1e2>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d007      	beq.n	8001318 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2221      	movs	r2, #33	@ 0x21
 800132c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2240      	movs	r2, #64	@ 0x40
 8001334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a3a      	ldr	r2, [r7, #32]
 8001342:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001348:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800134e:	b29a      	uxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a4d      	ldr	r2, [pc, #308]	@ (800148c <HAL_I2C_Mem_Write+0x1f0>)
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800135a:	88f8      	ldrh	r0, [r7, #6]
 800135c:	893a      	ldrh	r2, [r7, #8]
 800135e:	8979      	ldrh	r1, [r7, #10]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4603      	mov	r3, r0
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 fc32 	bl	8001bd4 <I2C_RequestMemoryWrite>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d052      	beq.n	800141c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e081      	b.n	800147e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 fec0 	bl	8002104 <I2C_WaitOnTXEFlagUntilTimeout>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00d      	beq.n	80013a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	2b04      	cmp	r3, #4
 8001390:	d107      	bne.n	80013a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e06b      	b.n	800147e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	3b01      	subs	r3, #1
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d11b      	bne.n	800141c <HAL_I2C_Mem_Write+0x180>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d017      	beq.n	800141c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001406:	3b01      	subs	r3, #1
 8001408:	b29a      	uxth	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001412:	b29b      	uxth	r3, r3
 8001414:	3b01      	subs	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1aa      	bne.n	800137a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 feb3 	bl	8002194 <I2C_WaitOnBTFFlagUntilTimeout>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00d      	beq.n	8001450 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	2b04      	cmp	r3, #4
 800143a:	d107      	bne.n	800144c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800144a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e016      	b.n	800147e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800145e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2220      	movs	r2, #32
 8001464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e000      	b.n	800147e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800147c:	2302      	movs	r3, #2
  }
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	00100002 	.word	0x00100002
 800148c:	ffff0000 	.word	0xffff0000

08001490 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	@ 0x30
 8001494:	af02      	add	r7, sp, #8
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	4608      	mov	r0, r1
 800149a:	4611      	mov	r1, r2
 800149c:	461a      	mov	r2, r3
 800149e:	4603      	mov	r3, r0
 80014a0:	817b      	strh	r3, [r7, #10]
 80014a2:	460b      	mov	r3, r1
 80014a4:	813b      	strh	r3, [r7, #8]
 80014a6:	4613      	mov	r3, r2
 80014a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014ae:	f7ff fa99 	bl	80009e4 <HAL_GetTick>
 80014b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b20      	cmp	r3, #32
 80014be:	f040 8250 	bne.w	8001962 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2319      	movs	r3, #25
 80014c8:	2201      	movs	r2, #1
 80014ca:	4982      	ldr	r1, [pc, #520]	@ (80016d4 <HAL_I2C_Mem_Read+0x244>)
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 fcff 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80014d8:	2302      	movs	r3, #2
 80014da:	e243      	b.n	8001964 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_I2C_Mem_Read+0x5a>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e23c      	b.n	8001964 <HAL_I2C_Mem_Read+0x4d4>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d007      	beq.n	8001510 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800151e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2222      	movs	r2, #34	@ 0x22
 8001524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2240      	movs	r2, #64	@ 0x40
 800152c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800153a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001540:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001546:	b29a      	uxth	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4a62      	ldr	r2, [pc, #392]	@ (80016d8 <HAL_I2C_Mem_Read+0x248>)
 8001550:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001552:	88f8      	ldrh	r0, [r7, #6]
 8001554:	893a      	ldrh	r2, [r7, #8]
 8001556:	8979      	ldrh	r1, [r7, #10]
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	4603      	mov	r3, r0
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 fbcc 	bl	8001d00 <I2C_RequestMemoryRead>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1f8      	b.n	8001964 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	d113      	bne.n	80015a2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e1cc      	b.n	800193c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d11e      	bne.n	80015e8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015ba:	b672      	cpsid	i
}
 80015bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015e4:	b662      	cpsie	i
}
 80015e6:	e035      	b.n	8001654 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d11e      	bne.n	800162e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001628:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800162a:	b662      	cpsie	i
}
 800162c:	e012      	b.n	8001654 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800163c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001654:	e172      	b.n	800193c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800165a:	2b03      	cmp	r3, #3
 800165c:	f200 811f 	bhi.w	800189e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001664:	2b01      	cmp	r3, #1
 8001666:	d123      	bne.n	80016b0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fdd9 	bl	8002224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e173      	b.n	8001964 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001698:	3b01      	subs	r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3b01      	subs	r3, #1
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80016ae:	e145      	b.n	800193c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d152      	bne.n	800175e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016be:	2200      	movs	r2, #0
 80016c0:	4906      	ldr	r1, [pc, #24]	@ (80016dc <HAL_I2C_Mem_Read+0x24c>)
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 fc04 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e148      	b.n	8001964 <HAL_I2C_Mem_Read+0x4d4>
 80016d2:	bf00      	nop
 80016d4:	00100002 	.word	0x00100002
 80016d8:	ffff0000 	.word	0xffff0000
 80016dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001710:	3b01      	subs	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	3b01      	subs	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001726:	b662      	cpsie	i
}
 8001728:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800175c:	e0ee      	b.n	800193c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001764:	2200      	movs	r2, #0
 8001766:	4981      	ldr	r1, [pc, #516]	@ (800196c <HAL_I2C_Mem_Read+0x4dc>)
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 fbb1 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0f5      	b.n	8001964 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001786:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017be:	4b6c      	ldr	r3, [pc, #432]	@ (8001970 <HAL_I2C_Mem_Read+0x4e0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001974 <HAL_I2C_Mem_Read+0x4e4>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	0a1a      	lsrs	r2, r3, #8
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00da      	lsls	r2, r3, #3
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	3b01      	subs	r3, #1
 80017dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d118      	bne.n	8001816 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2220      	movs	r2, #32
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f043 0220 	orr.w	r2, r3, #32
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001806:	b662      	cpsie	i
}
 8001808:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0a6      	b.n	8001964 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b04      	cmp	r3, #4
 8001822:	d1d9      	bne.n	80017d8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001866:	b662      	cpsie	i
}
 8001868:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001892:	b29b      	uxth	r3, r3
 8001894:	3b01      	subs	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800189c:	e04e      	b.n	800193c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fcbe 	bl	8002224 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e058      	b.n	8001964 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d124      	bne.n	800193c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d107      	bne.n	800190a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001908:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001926:	3b01      	subs	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	f47f ae88 	bne.w	8001656 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001962:	2302      	movs	r3, #2
  }
}
 8001964:	4618      	mov	r0, r3
 8001966:	3728      	adds	r7, #40	@ 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	00010004 	.word	0x00010004
 8001970:	20000000 	.word	0x20000000
 8001974:	14f8b589 	.word	0x14f8b589

08001978 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	460b      	mov	r3, r1
 8001986:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff f82c 	bl	80009e4 <HAL_GetTick>
 800198c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b20      	cmp	r3, #32
 800199c:	f040 8111 	bne.w	8001bc2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2319      	movs	r3, #25
 80019a6:	2201      	movs	r2, #1
 80019a8:	4988      	ldr	r1, [pc, #544]	@ (8001bcc <HAL_I2C_IsDeviceReady+0x254>)
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 fa90 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80019b6:	2302      	movs	r3, #2
 80019b8:	e104      	b.n	8001bc4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_I2C_IsDeviceReady+0x50>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e0fd      	b.n	8001bc4 <HAL_I2C_IsDeviceReady+0x24c>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d007      	beq.n	80019ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2224      	movs	r2, #36	@ 0x24
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4a70      	ldr	r2, [pc, #448]	@ (8001bd0 <HAL_I2C_IsDeviceReady+0x258>)
 8001a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fa4e 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00d      	beq.n	8001a56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a48:	d103      	bne.n	8001a52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0b6      	b.n	8001bc4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a56:	897b      	ldrh	r3, [r7, #10]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a66:	f7fe ffbd 	bl	80009e4 <HAL_GetTick>
 8001a6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	bf0c      	ite	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a90:	bf0c      	ite	eq
 8001a92:	2301      	moveq	r3, #1
 8001a94:	2300      	movne	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a9a:	e025      	b.n	8001ae8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a9c:	f7fe ffa2 	bl	80009e4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d302      	bcc.n	8001ab2 <HAL_I2C_IsDeviceReady+0x13a>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d103      	bne.n	8001aba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	22a0      	movs	r2, #160	@ 0xa0
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001af2:	d005      	beq.n	8001b00 <HAL_I2C_IsDeviceReady+0x188>
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_I2C_IsDeviceReady+0x188>
 8001afa:	7dbb      	ldrb	r3, [r7, #22]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0cd      	beq.n	8001a9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d129      	bne.n	8001b6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2319      	movs	r3, #25
 8001b42:	2201      	movs	r2, #1
 8001b44:	4921      	ldr	r1, [pc, #132]	@ (8001bcc <HAL_I2C_IsDeviceReady+0x254>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f9c2 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e036      	b.n	8001bc4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e02c      	b.n	8001bc4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2319      	movs	r3, #25
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	490f      	ldr	r1, [pc, #60]	@ (8001bcc <HAL_I2C_IsDeviceReady+0x254>)
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f99e 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e012      	b.n	8001bc4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f4ff af32 	bcc.w	8001a12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001bc2:	2302      	movs	r3, #2
  }
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	00100002 	.word	0x00100002
 8001bd0:	ffff0000 	.word	0xffff0000

08001bd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	817b      	strh	r3, [r7, #10]
 8001be6:	460b      	mov	r3, r1
 8001be8:	813b      	strh	r3, [r7, #8]
 8001bea:	4613      	mov	r3, r2
 8001bec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f960 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00d      	beq.n	8001c32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c24:	d103      	bne.n	8001c2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e05f      	b.n	8001cf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c32:	897b      	ldrh	r3, [r7, #10]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	6a3a      	ldr	r2, [r7, #32]
 8001c46:	492d      	ldr	r1, [pc, #180]	@ (8001cfc <I2C_RequestMemoryWrite+0x128>)
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f9bb 	bl	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e04c      	b.n	8001cf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c70:	6a39      	ldr	r1, [r7, #32]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fa46 	bl	8002104 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00d      	beq.n	8001c9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d107      	bne.n	8001c96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e02b      	b.n	8001cf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d105      	bne.n	8001cac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca0:	893b      	ldrh	r3, [r7, #8]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	611a      	str	r2, [r3, #16]
 8001caa:	e021      	b.n	8001cf0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001cac:	893b      	ldrh	r3, [r7, #8]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cbc:	6a39      	ldr	r1, [r7, #32]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fa20 	bl	8002104 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00d      	beq.n	8001ce6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d107      	bne.n	8001ce2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e005      	b.n	8001cf2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ce6:	893b      	ldrh	r3, [r7, #8]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	00010002 	.word	0x00010002

08001d00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	4608      	mov	r0, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	817b      	strh	r3, [r7, #10]
 8001d12:	460b      	mov	r3, r1
 8001d14:	813b      	strh	r3, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f8c2 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d60:	d103      	bne.n	8001d6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e0aa      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d6e:	897b      	ldrh	r3, [r7, #10]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	6a3a      	ldr	r2, [r7, #32]
 8001d82:	4952      	ldr	r1, [pc, #328]	@ (8001ecc <I2C_RequestMemoryRead+0x1cc>)
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f91d 	bl	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e097      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dac:	6a39      	ldr	r1, [r7, #32]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f9a8 	bl	8002104 <I2C_WaitOnTXEFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d107      	bne.n	8001dd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e076      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ddc:	893b      	ldrh	r3, [r7, #8]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	e021      	b.n	8001e2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001de8:	893b      	ldrh	r3, [r7, #8]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df8:	6a39      	ldr	r1, [r7, #32]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f982 	bl	8002104 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00d      	beq.n	8001e22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d107      	bne.n	8001e1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e050      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e22:	893b      	ldrh	r3, [r7, #8]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e2e:	6a39      	ldr	r1, [r7, #32]
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f967 	bl	8002104 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00d      	beq.n	8001e58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d107      	bne.n	8001e54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e035      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f82b 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e8e:	d103      	bne.n	8001e98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e013      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e9c:	897b      	ldrh	r3, [r7, #10]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	6a3a      	ldr	r2, [r7, #32]
 8001eb0:	4906      	ldr	r1, [pc, #24]	@ (8001ecc <I2C_RequestMemoryRead+0x1cc>)
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f886 	bl	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	00010002 	.word	0x00010002

08001ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee0:	e048      	b.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d044      	beq.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eea:	f7fe fd7b 	bl	80009e4 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d302      	bcc.n	8001f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d139      	bne.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	0c1b      	lsrs	r3, r3, #16
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10d      	bne.n	8001f26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	43da      	mvns	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4013      	ands	r3, r2
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	e00c      	b.n	8001f40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	4013      	ands	r3, r2
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d116      	bne.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e023      	b.n	8001fbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	0c1b      	lsrs	r3, r3, #16
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d10d      	bne.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	43da      	mvns	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	e00c      	b.n	8001fb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d093      	beq.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fd2:	e071      	b.n	80020b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe2:	d123      	bne.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f043 0204 	orr.w	r2, r3, #4
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e067      	b.n	80020fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002032:	d041      	beq.n	80020b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002034:	f7fe fcd6 	bl	80009e4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	d302      	bcc.n	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d136      	bne.n	80020b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	0c1b      	lsrs	r3, r3, #16
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d10c      	bne.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4013      	ands	r3, r2
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	bf14      	ite	ne
 8002066:	2301      	movne	r3, #1
 8002068:	2300      	moveq	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	e00b      	b.n	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	43da      	mvns	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4013      	ands	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d016      	beq.n	80020b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e021      	b.n	80020fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	0c1b      	lsrs	r3, r3, #16
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10c      	bne.n	80020dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	43da      	mvns	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4013      	ands	r3, r2
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e00b      	b.n	80020f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4013      	ands	r3, r2
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f47f af6d 	bne.w	8001fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002110:	e034      	b.n	800217c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f8e3 	bl	80022de <I2C_IsAcknowledgeFailed>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e034      	b.n	800218c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d028      	beq.n	800217c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7fe fc5b 	bl	80009e4 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d11d      	bne.n	800217c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800214a:	2b80      	cmp	r3, #128	@ 0x80
 800214c:	d016      	beq.n	800217c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e007      	b.n	800218c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002186:	2b80      	cmp	r3, #128	@ 0x80
 8002188:	d1c3      	bne.n	8002112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021a0:	e034      	b.n	800220c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f89b 	bl	80022de <I2C_IsAcknowledgeFailed>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e034      	b.n	800221c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d028      	beq.n	800220c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ba:	f7fe fc13 	bl	80009e4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d302      	bcc.n	80021d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d11d      	bne.n	800220c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d016      	beq.n	800220c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	f043 0220 	orr.w	r2, r3, #32
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e007      	b.n	800221c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b04      	cmp	r3, #4
 8002218:	d1c3      	bne.n	80021a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002230:	e049      	b.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b10      	cmp	r3, #16
 800223e:	d119      	bne.n	8002274 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0210 	mvn.w	r2, #16
 8002248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e030      	b.n	80022d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002274:	f7fe fbb6 	bl	80009e4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	429a      	cmp	r2, r3
 8002282:	d302      	bcc.n	800228a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11d      	bne.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002294:	2b40      	cmp	r3, #64	@ 0x40
 8002296:	d016      	beq.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f043 0220 	orr.w	r2, r3, #32
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e007      	b.n	80022d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d0:	2b40      	cmp	r3, #64	@ 0x40
 80022d2:	d1ae      	bne.n	8002232 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f4:	d11b      	bne.n	800232e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f043 0204 	orr.w	r2, r3, #4
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
	...

0800233c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002340:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	420e0020 	.word	0x420e0020

08002354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e272      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8087 	beq.w	8002482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002374:	4b92      	ldr	r3, [pc, #584]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b04      	cmp	r3, #4
 800237e:	d00c      	beq.n	800239a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002380:	4b8f      	ldr	r3, [pc, #572]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d112      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
 800238c:	4b8c      	ldr	r3, [pc, #560]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002398:	d10b      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	4b89      	ldr	r3, [pc, #548]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d06c      	beq.n	8002480 <HAL_RCC_OscConfig+0x12c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d168      	bne.n	8002480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e24c      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x76>
 80023bc:	4b80      	ldr	r3, [pc, #512]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a7f      	ldr	r2, [pc, #508]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e02e      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x98>
 80023d2:	4b7b      	ldr	r3, [pc, #492]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7a      	ldr	r2, [pc, #488]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b78      	ldr	r3, [pc, #480]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a77      	ldr	r2, [pc, #476]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0xbc>
 80023f6:	4b72      	ldr	r3, [pc, #456]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a71      	ldr	r2, [pc, #452]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b6f      	ldr	r3, [pc, #444]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6e      	ldr	r2, [pc, #440]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 8002410:	4b6b      	ldr	r3, [pc, #428]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a6a      	ldr	r2, [pc, #424]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b68      	ldr	r3, [pc, #416]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a67      	ldr	r2, [pc, #412]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe fad8 	bl	80009e4 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe fad4 	bl	80009e4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	@ 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e200      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b5d      	ldr	r3, [pc, #372]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xe4>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fac4 	bl	80009e4 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe fac0 	bl	80009e4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	@ 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1ec      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b53      	ldr	r3, [pc, #332]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x10c>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d063      	beq.n	8002556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248e:	4b4c      	ldr	r3, [pc, #304]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800249a:	4b49      	ldr	r3, [pc, #292]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x18c>
 80024a6:	4b46      	ldr	r3, [pc, #280]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	4b43      	ldr	r3, [pc, #268]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_RCC_OscConfig+0x176>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e1c0      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b3d      	ldr	r3, [pc, #244]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4939      	ldr	r1, [pc, #228]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	e03a      	b.n	8002556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <HAL_RCC_OscConfig+0x270>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fa79 	bl	80009e4 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe fa75 	bl	80009e4 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1a1      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b2a      	ldr	r3, [pc, #168]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4927      	ldr	r1, [pc, #156]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <HAL_RCC_OscConfig+0x270>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fa58 	bl	80009e4 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe fa54 	bl	80009e4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e180      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03a      	beq.n	80025d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d019      	beq.n	800259e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <HAL_RCC_OscConfig+0x274>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002570:	f7fe fa38 	bl	80009e4 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe fa34 	bl	80009e4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e160      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002596:	2001      	movs	r0, #1
 8002598:	f000 face 	bl	8002b38 <RCC_Delay>
 800259c:	e01c      	b.n	80025d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259e:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <HAL_RCC_OscConfig+0x274>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a4:	f7fe fa1e 	bl	80009e4 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025aa:	e00f      	b.n	80025cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ac:	f7fe fa1a 	bl	80009e4 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d908      	bls.n	80025cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e146      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	42420000 	.word	0x42420000
 80025c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b92      	ldr	r3, [pc, #584]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e9      	bne.n	80025ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a6 	beq.w	8002732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10d      	bne.n	8002612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b88      	ldr	r3, [pc, #544]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4a87      	ldr	r2, [pc, #540]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002600:	61d3      	str	r3, [r2, #28]
 8002602:	4b85      	ldr	r3, [pc, #532]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260e:	2301      	movs	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	4b82      	ldr	r3, [pc, #520]	@ (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261e:	4b7f      	ldr	r3, [pc, #508]	@ (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7e      	ldr	r2, [pc, #504]	@ (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7fe f9db 	bl	80009e4 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7fe f9d7 	bl	80009e4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	@ 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e103      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b75      	ldr	r3, [pc, #468]	@ (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x312>
 8002658:	4b6f      	ldr	r3, [pc, #444]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a6e      	ldr	r2, [pc, #440]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e02d      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x334>
 800266e:	4b6a      	ldr	r3, [pc, #424]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4a69      	ldr	r2, [pc, #420]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	4b67      	ldr	r3, [pc, #412]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4a66      	ldr	r2, [pc, #408]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6213      	str	r3, [r2, #32]
 8002686:	e01c      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x356>
 8002690:	4b61      	ldr	r3, [pc, #388]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a60      	ldr	r2, [pc, #384]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	4b5e      	ldr	r3, [pc, #376]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6213      	str	r3, [r2, #32]
 80026a8:	e00b      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 80026aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	4b58      	ldr	r3, [pc, #352]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a57      	ldr	r2, [pc, #348]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d015      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7fe f98b 	bl	80009e4 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe f987 	bl	80009e4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e0b1      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ee      	beq.n	80026d2 <HAL_RCC_OscConfig+0x37e>
 80026f4:	e014      	b.n	8002720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7fe f975 	bl	80009e4 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe f971 	bl	80009e4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e09b      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	4b40      	ldr	r3, [pc, #256]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ee      	bne.n	80026fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002726:	4b3c      	ldr	r3, [pc, #240]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a3b      	ldr	r2, [pc, #236]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8087 	beq.w	800284a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273c:	4b36      	ldr	r3, [pc, #216]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d061      	beq.n	800280c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d146      	bne.n	80027de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b33      	ldr	r3, [pc, #204]	@ (8002820 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe f945 	bl	80009e4 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe f941 	bl	80009e4 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e06d      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002770:	4b29      	ldr	r3, [pc, #164]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002784:	d108      	bne.n	8002798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002786:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4921      	ldr	r1, [pc, #132]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002798:	4b1f      	ldr	r3, [pc, #124]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a19      	ldr	r1, [r3, #32]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	430b      	orrs	r3, r1
 80027aa:	491b      	ldr	r1, [pc, #108]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002820 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7fe f915 	bl	80009e4 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe f911 	bl	80009e4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e03d      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d0:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x46a>
 80027dc:	e035      	b.n	800284a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe f8fe 	bl	80009e4 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe f8fa 	bl	80009e4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e026      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fe:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x498>
 800280a:	e01e      	b.n	800284a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d107      	bne.n	8002824 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e019      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
 8002820:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <HAL_RCC_OscConfig+0x500>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000

08002858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0d0      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d910      	bls.n	800289c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b67      	ldr	r3, [pc, #412]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4965      	ldr	r1, [pc, #404]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b63      	ldr	r3, [pc, #396]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b8      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b4:	4b59      	ldr	r3, [pc, #356]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a58      	ldr	r2, [pc, #352]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028cc:	4b53      	ldr	r3, [pc, #332]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a52      	ldr	r2, [pc, #328]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b50      	ldr	r3, [pc, #320]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	494d      	ldr	r1, [pc, #308]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d040      	beq.n	8002978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b47      	ldr	r3, [pc, #284]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d115      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e07f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	4b41      	ldr	r3, [pc, #260]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e073      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	4b3d      	ldr	r3, [pc, #244]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06b      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b39      	ldr	r3, [pc, #228]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4936      	ldr	r1, [pc, #216]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7fe f84c 	bl	80009e4 <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7fe f848 	bl	80009e4 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e053      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b2d      	ldr	r3, [pc, #180]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b27      	ldr	r3, [pc, #156]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d210      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 0207 	bic.w	r2, r3, #7
 800298e:	4922      	ldr	r1, [pc, #136]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b20      	ldr	r3, [pc, #128]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e032      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4916      	ldr	r1, [pc, #88]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029d2:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	490e      	ldr	r1, [pc, #56]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029e6:	f000 f821 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029ea:	4602      	mov	r2, r0
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	490a      	ldr	r1, [pc, #40]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	5ccb      	ldrb	r3, [r1, r3]
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <HAL_RCC_ClockConfig+0x1cc>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a02:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <HAL_RCC_ClockConfig+0x1d0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd ffaa 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	080091a8 	.word	0x080091a8
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d002      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x30>
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d003      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0x36>
 8002a5a:	e027      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a5e:	613b      	str	r3, [r7, #16]
      break;
 8002a60:	e027      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0c9b      	lsrs	r3, r3, #18
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	4a17      	ldr	r2, [pc, #92]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d010      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0c5b      	lsrs	r3, r3, #17
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	4a11      	ldr	r2, [pc, #68]	@ (8002acc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8e:	fb03 f202 	mul.w	r2, r3, r2
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e004      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	613b      	str	r3, [r7, #16]
      break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aae:	613b      	str	r3, [r7, #16]
      break;
 8002ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab2:	693b      	ldr	r3, [r7, #16]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	007a1200 	.word	0x007a1200
 8002ac8:	080091c0 	.word	0x080091c0
 8002acc:	080091d0 	.word	0x080091d0
 8002ad0:	003d0900 	.word	0x003d0900

08002ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad8:	4b02      	ldr	r3, [pc, #8]	@ (8002ae4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	20000000 	.word	0x20000000

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aec:	f7ff fff2 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	@ (8002b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	080091b8 	.word	0x080091b8

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b14:	f7ff ffde 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	0adb      	lsrs	r3, r3, #11
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4903      	ldr	r1, [pc, #12]	@ (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	080091b8 	.word	0x080091b8

08002b38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b40:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <RCC_Delay+0x34>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0a      	ldr	r2, [pc, #40]	@ (8002b70 <RCC_Delay+0x38>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0a5b      	lsrs	r3, r3, #9
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b54:	bf00      	nop
  }
  while (Delay --);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	60fa      	str	r2, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f9      	bne.n	8002b54 <RCC_Delay+0x1c>
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	10624dd3 	.word	0x10624dd3

08002b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d07d      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b94:	4b4f      	ldr	r3, [pc, #316]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	61d3      	str	r3, [r2, #28]
 8002bac:	4b49      	ldr	r3, [pc, #292]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b46      	ldr	r3, [pc, #280]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d118      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc8:	4b43      	ldr	r3, [pc, #268]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a42      	ldr	r2, [pc, #264]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd4:	f7fd ff06 	bl	80009e4 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	e008      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bdc:	f7fd ff02 	bl	80009e4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	@ 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e06d      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bee:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bfa:	4b36      	ldr	r3, [pc, #216]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d02e      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d027      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c18:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c22:	4b2e      	ldr	r3, [pc, #184]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c28:	4b2c      	ldr	r3, [pc, #176]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c2e:	4a29      	ldr	r2, [pc, #164]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d014      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fd fed1 	bl	80009e4 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fd fecd 	bl	80009e4 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e036      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ee      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c68:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4917      	ldr	r1, [pc, #92]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d105      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c80:	4b14      	ldr	r3, [pc, #80]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c98:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	490b      	ldr	r1, [pc, #44]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cb6:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	4904      	ldr	r1, [pc, #16]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	42420440 	.word	0x42420440

08002ce0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	f200 808a 	bhi.w	8002e1e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d045      	beq.n	8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d075      	beq.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d16:	e082      	b.n	8002e1e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002d18:	4b46      	ldr	r3, [pc, #280]	@ (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d1e:	4b45      	ldr	r3, [pc, #276]	@ (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d07b      	beq.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	0c9b      	lsrs	r3, r3, #18
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	4a41      	ldr	r2, [pc, #260]	@ (8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002d34:	5cd3      	ldrb	r3, [r2, r3]
 8002d36:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d42:	4b3c      	ldr	r3, [pc, #240]	@ (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	0c5b      	lsrs	r3, r3, #17
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002d4e:	5cd3      	ldrb	r3, [r2, r3]
 8002d50:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d5c:	4a38      	ldr	r2, [pc, #224]	@ (8002e40 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	e004      	b.n	8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4a34      	ldr	r2, [pc, #208]	@ (8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d78:	4b2e      	ldr	r3, [pc, #184]	@ (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d84:	d102      	bne.n	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	61bb      	str	r3, [r7, #24]
      break;
 8002d8a:	e04a      	b.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4a2d      	ldr	r2, [pc, #180]	@ (8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
      break;
 8002d9a:	e042      	b.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002d9c:	4b25      	ldr	r3, [pc, #148]	@ (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dac:	d108      	bne.n	8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002db8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	e01f      	b.n	8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dca:	d109      	bne.n	8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002dd8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	e00f      	b.n	8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002de6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dea:	d11c      	bne.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d016      	beq.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002df8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002dfc:	61bb      	str	r3, [r7, #24]
      break;
 8002dfe:	e012      	b.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e00:	e011      	b.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e02:	f7ff fe85 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	0b9b      	lsrs	r3, r3, #14
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	3301      	adds	r3, #1
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	61bb      	str	r3, [r7, #24]
      break;
 8002e1c:	e004      	b.n	8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e26:	bf00      	nop
    }
  }
  return (frequency);
 8002e28:	69bb      	ldr	r3, [r7, #24]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	080091d4 	.word	0x080091d4
 8002e3c:	080091e4 	.word	0x080091e4
 8002e40:	007a1200 	.word	0x007a1200
 8002e44:	003d0900 	.word	0x003d0900
 8002e48:	aaaaaaab 	.word	0xaaaaaaab

08002e4c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e07a      	b.n	8002f58 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7c5b      	ldrb	r3, [r3, #17]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd fb8a 	bl	800058c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 faea 	bl	8003458 <HAL_RTC_WaitForSynchro>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e061      	b.n	8002f58 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fba3 	bl	80035e0 <RTC_EnterInitMode>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e056      	b.n	8002f58 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0207 	bic.w	r2, r2, #7
 8002eb8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002ec2:	4b27      	ldr	r3, [pc, #156]	@ (8002f60 <HAL_RTC_Init+0x114>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	4a26      	ldr	r2, [pc, #152]	@ (8002f60 <HAL_RTC_Init+0x114>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002ece:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <HAL_RTC_Init+0x114>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	4921      	ldr	r1, [pc, #132]	@ (8002f60 <HAL_RTC_Init+0x114>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e00e      	b.n	8002f10 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f7ff fef4 	bl	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ef8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2204      	movs	r2, #4
 8002f04:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e026      	b.n	8002f58 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	0c1a      	lsrs	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f002 020f 	and.w	r2, r2, #15
 8002f1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	b292      	uxth	r2, r2
 8002f26:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fb81 	bl	8003630 <RTC_ExitInitMode>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2204      	movs	r2, #4
 8002f38:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00c      	b.n	8002f58 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002f56:	2300      	movs	r3, #0
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40006c00 	.word	0x40006c00

08002f64 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_RTC_SetTime+0x20>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e080      	b.n	800308a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	7c1b      	ldrb	r3, [r3, #16]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_RTC_SetTime+0x30>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e07a      	b.n	800308a <HAL_RTC_SetTime+0x126>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d113      	bne.n	8002fce <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002fb0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	460b      	mov	r3, r1
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a5b      	subs	r3, r3, r1
 8002fc0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002fc2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002fc8:	4413      	add	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	e01e      	b.n	800300c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fb71 	bl	80036ba <RTC_Bcd2ToByte>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002fe0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fb66 	bl	80036ba <RTC_Bcd2ToByte>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002ffa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	789b      	ldrb	r3, [r3, #2]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fb5a 	bl	80036ba <RTC_Bcd2ToByte>
 8003006:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003008:	4423      	add	r3, r4
 800300a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800300c:	6979      	ldr	r1, [r7, #20]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fa7f 	bl	8003512 <RTC_WriteTimeCounter>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2204      	movs	r2, #4
 800301e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e02f      	b.n	800308a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0205 	bic.w	r2, r2, #5
 8003038:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fa90 	bl	8003560 <RTC_ReadAlarmCounter>
 8003040:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d018      	beq.n	800307c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	429a      	cmp	r2, r3
 8003050:	d214      	bcs.n	800307c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003058:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800305c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800305e:	6939      	ldr	r1, [r7, #16]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fa96 	bl	8003592 <RTC_WriteAlarmCounter>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2204      	movs	r2, #4
 8003070:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e006      	b.n	800308a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd90      	pop	{r4, r7, pc}
	...

08003094 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	2300      	movs	r3, #0
 80030ae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_RTC_GetTime+0x28>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b5      	b.n	800322c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e0ac      	b.n	800322c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f9ed 	bl	80034b2 <RTC_ReadTimeCounter>
 80030d8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4a55      	ldr	r2, [pc, #340]	@ (8003234 <HAL_RTC_GetTime+0x1a0>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	0adb      	lsrs	r3, r3, #11
 80030e4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4b52      	ldr	r3, [pc, #328]	@ (8003234 <HAL_RTC_GetTime+0x1a0>)
 80030ea:	fba3 1302 	umull	r1, r3, r3, r2
 80030ee:	0adb      	lsrs	r3, r3, #11
 80030f0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	4a4f      	ldr	r2, [pc, #316]	@ (8003238 <HAL_RTC_GetTime+0x1a4>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	b2da      	uxtb	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4a4a      	ldr	r2, [pc, #296]	@ (8003234 <HAL_RTC_GetTime+0x1a0>)
 800310c:	fba2 1203 	umull	r1, r2, r2, r3
 8003110:	0ad2      	lsrs	r2, r2, #11
 8003112:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003116:	fb01 f202 	mul.w	r2, r1, r2
 800311a:	1a9a      	subs	r2, r3, r2
 800311c:	4b46      	ldr	r3, [pc, #280]	@ (8003238 <HAL_RTC_GetTime+0x1a4>)
 800311e:	fba3 1302 	umull	r1, r3, r3, r2
 8003122:	0959      	lsrs	r1, r3, #5
 8003124:	460b      	mov	r3, r1
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a5b      	subs	r3, r3, r1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	1ad1      	subs	r1, r2, r3
 800312e:	b2ca      	uxtb	r2, r1
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b17      	cmp	r3, #23
 8003138:	d955      	bls.n	80031e6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4a3f      	ldr	r2, [pc, #252]	@ (800323c <HAL_RTC_GetTime+0x1a8>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003146:	6939      	ldr	r1, [r7, #16]
 8003148:	4b3c      	ldr	r3, [pc, #240]	@ (800323c <HAL_RTC_GetTime+0x1a8>)
 800314a:	fba3 2301 	umull	r2, r3, r3, r1
 800314e:	091a      	lsrs	r2, r3, #4
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	1aca      	subs	r2, r1, r3
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f9fd 	bl	8003560 <RTC_ReadAlarmCounter>
 8003166:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d008      	beq.n	8003182 <HAL_RTC_GetTime+0xee>
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	429a      	cmp	r2, r3
 8003176:	d904      	bls.n	8003182 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	e002      	b.n	8003188 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	4a2d      	ldr	r2, [pc, #180]	@ (8003240 <HAL_RTC_GetTime+0x1ac>)
 800318c:	fb02 f303 	mul.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f9ba 	bl	8003512 <RTC_WriteTimeCounter>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e041      	b.n	800322c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d00c      	beq.n	80031ca <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4413      	add	r3, r2
 80031b6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80031b8:	69f9      	ldr	r1, [r7, #28]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f9e9 	bl	8003592 <RTC_WriteAlarmCounter>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e030      	b.n	800322c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80031ca:	69f9      	ldr	r1, [r7, #28]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f9e0 	bl	8003592 <RTC_WriteAlarmCounter>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e027      	b.n	800322c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80031dc:	6979      	ldr	r1, [r7, #20]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fa88 	bl	80036f4 <RTC_DateUpdate>
 80031e4:	e003      	b.n	80031ee <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01a      	beq.n	800322a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fa41 	bl	8003680 <RTC_ByteToBcd2>
 80031fe:	4603      	mov	r3, r0
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	785b      	ldrb	r3, [r3, #1]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fa38 	bl	8003680 <RTC_ByteToBcd2>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	789b      	ldrb	r3, [r3, #2]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fa2f 	bl	8003680 <RTC_ByteToBcd2>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	91a2b3c5 	.word	0x91a2b3c5
 8003238:	88888889 	.word	0x88888889
 800323c:	aaaaaaab 	.word	0xaaaaaaab
 8003240:	00015180 	.word	0x00015180

08003244 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_RTC_SetDate+0x24>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e097      	b.n	800339c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	7c1b      	ldrb	r3, [r3, #16]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_RTC_SetDate+0x34>
 8003274:	2302      	movs	r3, #2
 8003276:	e091      	b.n	800339c <HAL_RTC_SetDate+0x158>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2202      	movs	r2, #2
 8003282:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10c      	bne.n	80032a4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	78da      	ldrb	r2, [r3, #3]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	785a      	ldrb	r2, [r3, #1]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	789a      	ldrb	r2, [r3, #2]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	739a      	strb	r2, [r3, #14]
 80032a2:	e01a      	b.n	80032da <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	78db      	ldrb	r3, [r3, #3]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fa06 	bl	80036ba <RTC_Bcd2ToByte>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461a      	mov	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f9fd 	bl	80036ba <RTC_Bcd2ToByte>
 80032c0:	4603      	mov	r3, r0
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	789b      	ldrb	r3, [r3, #2]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f9f4 	bl	80036ba <RTC_Bcd2ToByte>
 80032d2:	4603      	mov	r3, r0
 80032d4:	461a      	mov	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	7bdb      	ldrb	r3, [r3, #15]
 80032de:	4618      	mov	r0, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	7b59      	ldrb	r1, [r3, #13]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	7b9b      	ldrb	r3, [r3, #14]
 80032e8:	461a      	mov	r2, r3
 80032ea:	f000 fadf 	bl	80038ac <RTC_WeekDayNum>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	7b1a      	ldrb	r2, [r3, #12]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f8d7 	bl	80034b2 <RTC_ReadTimeCounter>
 8003304:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4a26      	ldr	r2, [pc, #152]	@ (80033a4 <HAL_RTC_SetDate+0x160>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0adb      	lsrs	r3, r3, #11
 8003310:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b18      	cmp	r3, #24
 8003316:	d93a      	bls.n	800338e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	4a23      	ldr	r2, [pc, #140]	@ (80033a8 <HAL_RTC_SetDate+0x164>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	4a22      	ldr	r2, [pc, #136]	@ (80033ac <HAL_RTC_SetDate+0x168>)
 8003324:	fb02 f303 	mul.w	r3, r2, r3
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800332e:	69f9      	ldr	r1, [r7, #28]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f8ee 	bl	8003512 <RTC_WriteTimeCounter>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2204      	movs	r2, #4
 8003340:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e027      	b.n	800339c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f907 	bl	8003560 <RTC_ReadAlarmCounter>
 8003352:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d018      	beq.n	800338e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	429a      	cmp	r2, r3
 8003362:	d214      	bcs.n	800338e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800336a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800336e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003370:	69b9      	ldr	r1, [r7, #24]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f90d 	bl	8003592 <RTC_WriteAlarmCounter>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2204      	movs	r2, #4
 8003382:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e006      	b.n	800339c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	91a2b3c5 	.word	0x91a2b3c5
 80033a8:	aaaaaaab 	.word	0xaaaaaaab
 80033ac:	00015180 	.word	0x00015180

080033b0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	2100      	movs	r1, #0
 80033c2:	460a      	mov	r2, r1
 80033c4:	801a      	strh	r2, [r3, #0]
 80033c6:	460a      	mov	r2, r1
 80033c8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_RTC_GetDate+0x26>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e03a      	b.n	8003450 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	2200      	movs	r2, #0
 80033e0:	4619      	mov	r1, r3
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f7ff fe56 	bl	8003094 <HAL_RTC_GetTime>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e02e      	b.n	8003450 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	7b1a      	ldrb	r2, [r3, #12]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	7bda      	ldrb	r2, [r3, #15]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	7b5a      	ldrb	r2, [r3, #13]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	7b9a      	ldrb	r2, [r3, #14]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01a      	beq.n	800344e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	78db      	ldrb	r3, [r3, #3]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f92f 	bl	8003680 <RTC_ByteToBcd2>
 8003422:	4603      	mov	r3, r0
 8003424:	461a      	mov	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f926 	bl	8003680 <RTC_ByteToBcd2>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	789b      	ldrb	r3, [r3, #2]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f91d 	bl	8003680 <RTC_ByteToBcd2>
 8003446:	4603      	mov	r3, r0
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e01d      	b.n	80034aa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800347e:	f7fd fab1 	bl	80009e4 <HAL_GetTick>
 8003482:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003484:	e009      	b.n	800349a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003486:	f7fd faad 	bl	80009e4 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003494:	d901      	bls.n	800349a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e007      	b.n	80034aa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ee      	beq.n	8003486 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b087      	sub	sp, #28
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	827b      	strh	r3, [r7, #18]
 80034be:	2300      	movs	r3, #0
 80034c0:	823b      	strh	r3, [r7, #16]
 80034c2:	2300      	movs	r3, #0
 80034c4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80034e2:	8a7a      	ldrh	r2, [r7, #18]
 80034e4:	8a3b      	ldrh	r3, [r7, #16]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d008      	beq.n	80034fc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80034ea:	8a3b      	ldrh	r3, [r7, #16]
 80034ec:	041a      	lsls	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e004      	b.n	8003506 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80034fc:	8a7b      	ldrh	r3, [r7, #18]
 80034fe:	041a      	lsls	r2, r3, #16
 8003500:	89fb      	ldrh	r3, [r7, #14]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003506:	697b      	ldr	r3, [r7, #20]
}
 8003508:	4618      	mov	r0, r3
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f85d 	bl	80035e0 <RTC_EnterInitMode>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e011      	b.n	8003556 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	0c12      	lsrs	r2, r2, #16
 800353a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	b292      	uxth	r2, r2
 8003544:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f872 	bl	8003630 <RTC_ExitInitMode>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	81fb      	strh	r3, [r7, #14]
 800356c:	2300      	movs	r3, #0
 800356e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003580:	89fb      	ldrh	r3, [r7, #14]
 8003582:	041a      	lsls	r2, r3, #16
 8003584:	89bb      	ldrh	r3, [r7, #12]
 8003586:	4313      	orrs	r3, r2
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f81d 	bl	80035e0 <RTC_EnterInitMode>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e011      	b.n	80035d6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	0c12      	lsrs	r2, r2, #16
 80035ba:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	b292      	uxth	r2, r2
 80035c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f832 	bl	8003630 <RTC_ExitInitMode>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80035ec:	f7fd f9fa 	bl	80009e4 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80035f2:	e009      	b.n	8003608 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80035f4:	f7fd f9f6 	bl	80009e4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003602:	d901      	bls.n	8003608 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e00f      	b.n	8003628 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ee      	beq.n	80035f4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0210 	orr.w	r2, r2, #16
 8003624:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0210 	bic.w	r2, r2, #16
 800364a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800364c:	f7fd f9ca 	bl	80009e4 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003652:	e009      	b.n	8003668 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003654:	f7fd f9c6 	bl	80009e4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003662:	d901      	bls.n	8003668 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e007      	b.n	8003678 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ee      	beq.n	8003654 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800368e:	e005      	b.n	800369c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3301      	adds	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	3b0a      	subs	r3, #10
 800369a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b09      	cmp	r3, #9
 80036a0:	d8f6      	bhi.n	8003690 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	b2db      	uxtb	r3, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	b2db      	uxtb	r3, r3
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7bdb      	ldrb	r3, [r3, #15]
 8003712:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7b5b      	ldrb	r3, [r3, #13]
 8003718:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7b9b      	ldrb	r3, [r3, #14]
 800371e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003720:	2300      	movs	r3, #0
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	e06f      	b.n	8003806 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d011      	beq.n	8003750 <RTC_DateUpdate+0x5c>
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d00e      	beq.n	8003750 <RTC_DateUpdate+0x5c>
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d00b      	beq.n	8003750 <RTC_DateUpdate+0x5c>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b07      	cmp	r3, #7
 800373c:	d008      	beq.n	8003750 <RTC_DateUpdate+0x5c>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d005      	beq.n	8003750 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b0a      	cmp	r3, #10
 8003748:	d002      	beq.n	8003750 <RTC_DateUpdate+0x5c>
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b0c      	cmp	r3, #12
 800374e:	d117      	bne.n	8003780 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b1e      	cmp	r3, #30
 8003754:	d803      	bhi.n	800375e <RTC_DateUpdate+0x6a>
      {
        day++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3301      	adds	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800375c:	e050      	b.n	8003800 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d005      	beq.n	8003770 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	3301      	adds	r3, #1
 8003768:	613b      	str	r3, [r7, #16]
          day = 1U;
 800376a:	2301      	movs	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800376e:	e047      	b.n	8003800 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003770:	2301      	movs	r3, #1
 8003772:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003774:	2301      	movs	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
          year++;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3301      	adds	r3, #1
 800377c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800377e:	e03f      	b.n	8003800 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b04      	cmp	r3, #4
 8003784:	d008      	beq.n	8003798 <RTC_DateUpdate+0xa4>
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b06      	cmp	r3, #6
 800378a:	d005      	beq.n	8003798 <RTC_DateUpdate+0xa4>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b09      	cmp	r3, #9
 8003790:	d002      	beq.n	8003798 <RTC_DateUpdate+0xa4>
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b0b      	cmp	r3, #11
 8003796:	d10c      	bne.n	80037b2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b1d      	cmp	r3, #29
 800379c:	d803      	bhi.n	80037a6 <RTC_DateUpdate+0xb2>
      {
        day++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3301      	adds	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80037a4:	e02c      	b.n	8003800 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3301      	adds	r3, #1
 80037aa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80037ac:	2301      	movs	r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80037b0:	e026      	b.n	8003800 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d123      	bne.n	8003800 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b1b      	cmp	r3, #27
 80037bc:	d803      	bhi.n	80037c6 <RTC_DateUpdate+0xd2>
      {
        day++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3301      	adds	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e01c      	b.n	8003800 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b1c      	cmp	r3, #28
 80037ca:	d111      	bne.n	80037f0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f839 	bl	8003848 <RTC_IsLeapYear>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <RTC_DateUpdate+0xf0>
        {
          day++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3301      	adds	r3, #1
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	e00d      	b.n	8003800 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	3301      	adds	r3, #1
 80037e8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80037ea:	2301      	movs	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	e007      	b.n	8003800 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b1d      	cmp	r3, #29
 80037f4:	d104      	bne.n	8003800 <RTC_DateUpdate+0x10c>
      {
        month++;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	3301      	adds	r3, #1
 80037fa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80037fc:	2301      	movs	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	3301      	adds	r3, #1
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d38b      	bcc.n	8003726 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	4619      	mov	r1, r3
 8003830:	6978      	ldr	r0, [r7, #20]
 8003832:	f000 f83b 	bl	80038ac <RTC_WeekDayNum>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	731a      	strb	r2, [r3, #12]
}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	e01d      	b.n	800389e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	4a10      	ldr	r2, [pc, #64]	@ (80038a8 <RTC_IsLeapYear+0x60>)
 8003866:	fba2 1203 	umull	r1, r2, r2, r3
 800386a:	0952      	lsrs	r2, r2, #5
 800386c:	2164      	movs	r1, #100	@ 0x64
 800386e:	fb01 f202 	mul.w	r2, r1, r2
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800387a:	2301      	movs	r3, #1
 800387c:	e00f      	b.n	800389e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	4a09      	ldr	r2, [pc, #36]	@ (80038a8 <RTC_IsLeapYear+0x60>)
 8003882:	fba2 1203 	umull	r1, r2, r2, r3
 8003886:	09d2      	lsrs	r2, r2, #7
 8003888:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800388c:	fb01 f202 	mul.w	r2, r1, r2
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800389c:	2300      	movs	r3, #0
  }
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	51eb851f 	.word	0x51eb851f

080038ac <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
 80038b8:	4613      	mov	r3, r2
 80038ba:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80038ca:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d82d      	bhi.n	800392e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	4a2c      	ldr	r2, [pc, #176]	@ (8003990 <RTC_WeekDayNum+0xe4>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	085a      	lsrs	r2, r3, #1
 80038e6:	78bb      	ldrb	r3, [r7, #2]
 80038e8:	441a      	add	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	441a      	add	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	089b      	lsrs	r3, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	4926      	ldr	r1, [pc, #152]	@ (8003994 <RTC_WeekDayNum+0xe8>)
 80038fc:	fba1 1303 	umull	r1, r3, r1, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	1ad2      	subs	r2, r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	3b01      	subs	r3, #1
 8003908:	4922      	ldr	r1, [pc, #136]	@ (8003994 <RTC_WeekDayNum+0xe8>)
 800390a:	fba1 1303 	umull	r1, r3, r1, r3
 800390e:	09db      	lsrs	r3, r3, #7
 8003910:	4413      	add	r3, r2
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <RTC_WeekDayNum+0xec>)
 8003916:	fba3 1302 	umull	r1, r3, r3, r2
 800391a:	1ad1      	subs	r1, r2, r3
 800391c:	0849      	lsrs	r1, r1, #1
 800391e:	440b      	add	r3, r1
 8003920:	0899      	lsrs	r1, r3, #2
 8003922:	460b      	mov	r3, r1
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	1a5b      	subs	r3, r3, r1
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e029      	b.n	8003982 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <RTC_WeekDayNum+0xe4>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	085a      	lsrs	r2, r3, #1
 8003942:	78bb      	ldrb	r3, [r7, #2]
 8003944:	441a      	add	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	441a      	add	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4910      	ldr	r1, [pc, #64]	@ (8003994 <RTC_WeekDayNum+0xe8>)
 8003954:	fba1 1303 	umull	r1, r3, r1, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	490d      	ldr	r1, [pc, #52]	@ (8003994 <RTC_WeekDayNum+0xe8>)
 8003960:	fba1 1303 	umull	r1, r3, r1, r3
 8003964:	09db      	lsrs	r3, r3, #7
 8003966:	4413      	add	r3, r2
 8003968:	1c9a      	adds	r2, r3, #2
 800396a:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <RTC_WeekDayNum+0xec>)
 800396c:	fba3 1302 	umull	r1, r3, r3, r2
 8003970:	1ad1      	subs	r1, r2, r3
 8003972:	0849      	lsrs	r1, r1, #1
 8003974:	440b      	add	r3, r1
 8003976:	0899      	lsrs	r1, r3, #2
 8003978:	460b      	mov	r3, r1
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	1a5b      	subs	r3, r3, r1
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	b2db      	uxtb	r3, r3
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	38e38e39 	.word	0x38e38e39
 8003994:	51eb851f 	.word	0x51eb851f
 8003998:	24924925 	.word	0x24924925

0800399c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 80039ac:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <HAL_RTCEx_BKUPWrite+0x30>)
 80039ae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4413      	add	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	b292      	uxth	r2, r2
 80039c0:	601a      	str	r2, [r3, #0]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	40006c00 	.word	0x40006c00

080039d0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80039e2:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <HAL_RTCEx_BKUPRead+0x34>)
 80039e4:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80039f8:	68bb      	ldr	r3, [r7, #8]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	40006c00 	.word	0x40006c00

08003a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e042      	b.n	8003aa0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fc ff1c 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	@ 0x24
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f82b 	bl	8003aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003ae2:	f023 030c 	bic.w	r3, r3, #12
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	430b      	orrs	r3, r1
 8003aee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bbc <UART_SetConfig+0x114>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d103      	bne.n	8003b18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b10:	f7fe fffe 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	e002      	b.n	8003b1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b18:	f7fe ffe6 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8003b1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	009a      	lsls	r2, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	4a22      	ldr	r2, [pc, #136]	@ (8003bc0 <UART_SetConfig+0x118>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	0119      	lsls	r1, r3, #4
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009a      	lsls	r2, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b54:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc0 <UART_SetConfig+0x118>)
 8003b56:	fba3 0302 	umull	r0, r3, r3, r2
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2064      	movs	r0, #100	@ 0x64
 8003b5e:	fb00 f303 	mul.w	r3, r0, r3
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	3332      	adds	r3, #50	@ 0x32
 8003b68:	4a15      	ldr	r2, [pc, #84]	@ (8003bc0 <UART_SetConfig+0x118>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b74:	4419      	add	r1, r3
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009a      	lsls	r2, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <UART_SetConfig+0x118>)
 8003b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2064      	movs	r0, #100	@ 0x64
 8003b96:	fb00 f303 	mul.w	r3, r0, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	3332      	adds	r3, #50	@ 0x32
 8003ba0:	4a07      	ldr	r2, [pc, #28]	@ (8003bc0 <UART_SetConfig+0x118>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	f003 020f 	and.w	r2, r3, #15
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	51eb851f 	.word	0x51eb851f

08003bc4 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8003bca:	b672      	cpsid	i
 8003bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8003d0c <app_init+0x148>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a4f      	ldr	r2, [pc, #316]	@ (8003d10 <app_init+0x14c>)
 8003bd2:	213f      	movs	r1, #63	@ 0x3f
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f003 ff9f 	bl	8007b18 <sniprintf>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4a4d      	ldr	r2, [pc, #308]	@ (8003d14 <app_init+0x150>)
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b4a      	ldr	r3, [pc, #296]	@ (8003d0c <app_init+0x148>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fcf5 	bl	80045d4 <logger_log_print_>
 8003bea:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 8003bec:	b672      	cpsid	i
 8003bee:	4b47      	ldr	r3, [pc, #284]	@ (8003d0c <app_init+0x148>)
 8003bf0:	681c      	ldr	r4, [r3, #0]
 8003bf2:	f7fc fef7 	bl	80009e4 <HAL_GetTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	4b47      	ldr	r3, [pc, #284]	@ (8003d18 <app_init+0x154>)
 8003bfc:	4a47      	ldr	r2, [pc, #284]	@ (8003d1c <app_init+0x158>)
 8003bfe:	213f      	movs	r1, #63	@ 0x3f
 8003c00:	4620      	mov	r0, r4
 8003c02:	f003 ff89 	bl	8007b18 <sniprintf>
 8003c06:	4603      	mov	r3, r0
 8003c08:	4a42      	ldr	r2, [pc, #264]	@ (8003d14 <app_init+0x150>)
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d0c <app_init+0x148>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fcdf 	bl	80045d4 <logger_log_print_>
 8003c16:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8003c18:	b672      	cpsid	i
 8003c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d0c <app_init+0x148>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a40      	ldr	r2, [pc, #256]	@ (8003d20 <app_init+0x15c>)
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	213f      	movs	r1, #63	@ 0x3f
 8003c24:	4618      	mov	r0, r3
 8003c26:	f003 ff77 	bl	8007b18 <sniprintf>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4a39      	ldr	r2, [pc, #228]	@ (8003d14 <app_init+0x150>)
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <app_init+0x148>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fccd 	bl	80045d4 <logger_log_print_>
 8003c3a:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8003c3c:	b672      	cpsid	i
 8003c3e:	4b33      	ldr	r3, [pc, #204]	@ (8003d0c <app_init+0x148>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a38      	ldr	r2, [pc, #224]	@ (8003d24 <app_init+0x160>)
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	213f      	movs	r1, #63	@ 0x3f
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f003 ff65 	bl	8007b18 <sniprintf>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4a30      	ldr	r2, [pc, #192]	@ (8003d14 <app_init+0x150>)
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b2d      	ldr	r3, [pc, #180]	@ (8003d0c <app_init+0x148>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fcbb 	bl	80045d4 <logger_log_print_>
 8003c5e:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8003c60:	4b31      	ldr	r3, [pc, #196]	@ (8003d28 <app_init+0x164>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 8003c66:	b672      	cpsid	i
 8003c68:	4b28      	ldr	r3, [pc, #160]	@ (8003d0c <app_init+0x148>)
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d28 <app_init+0x164>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	4b2e      	ldr	r3, [pc, #184]	@ (8003d2c <app_init+0x168>)
 8003c74:	4a2e      	ldr	r2, [pc, #184]	@ (8003d30 <app_init+0x16c>)
 8003c76:	213f      	movs	r1, #63	@ 0x3f
 8003c78:	f003 ff4e 	bl	8007b18 <sniprintf>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4a25      	ldr	r2, [pc, #148]	@ (8003d14 <app_init+0x150>)
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	4b22      	ldr	r3, [pc, #136]	@ (8003d0c <app_init+0x148>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fca4 	bl	80045d4 <logger_log_print_>
 8003c8c:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	e01a      	b.n	8003cca <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8003c94:	4927      	ldr	r1, [pc, #156]	@ (8003d34 <app_init+0x170>)
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	4823      	ldr	r0, [pc, #140]	@ (8003d34 <app_init+0x170>)
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4403      	add	r3, r0
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 8003cba:	4a1f      	ldr	r2, [pc, #124]	@ (8003d38 <app_init+0x174>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d9e1      	bls.n	8003c94 <app_init+0xd0>
	}

	cycle_counter_init();
 8003cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d3c <app_init+0x178>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a19      	ldr	r2, [pc, #100]	@ (8003d3c <app_init+0x178>)
 8003cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cda:	60d3      	str	r3, [r2, #12]
 8003cdc:	4b18      	ldr	r3, [pc, #96]	@ (8003d40 <app_init+0x17c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	4b17      	ldr	r3, [pc, #92]	@ (8003d40 <app_init+0x17c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a16      	ldr	r2, [pc, #88]	@ (8003d40 <app_init+0x17c>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6013      	str	r3, [r2, #0]

	__asm("CPSID i");	/* disable interrupts*/
 8003cee:	b672      	cpsid	i
	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 8003cf0:	4b14      	ldr	r3, [pc, #80]	@ (8003d44 <app_init+0x180>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
	g_task_sensor_tick_cnt = G_APP_TICK_CNT_INI;
 8003cf6:	4b14      	ldr	r3, [pc, #80]	@ (8003d48 <app_init+0x184>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
	g_task_menu_tick_cnt = G_APP_TICK_CNT_INI;
 8003cfc:	4b13      	ldr	r3, [pc, #76]	@ (8003d4c <app_init+0x188>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
    __asm("CPSIE i");	/* enable interrupts*/
 8003d02:	b662      	cpsie	i
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd90      	pop	{r4, r7, pc}
 8003d0c:	08009200 	.word	0x08009200
 8003d10:	08008b00 	.word	0x08008b00
 8003d14:	20000204 	.word	0x20000204
 8003d18:	08008b04 	.word	0x08008b04
 8003d1c:	08008b10 	.word	0x08008b10
 8003d20:	2000000c 	.word	0x2000000c
 8003d24:	20000010 	.word	0x20000010
 8003d28:	20000194 	.word	0x20000194
 8003d2c:	08008b34 	.word	0x08008b34
 8003d30:	08008b40 	.word	0x08008b40
 8003d34:	080091e8 	.word	0x080091e8
 8003d38:	200001a0 	.word	0x200001a0
 8003d3c:	e000edf0 	.word	0xe000edf0
 8003d40:	e0001000 	.word	0xe0001000
 8003d44:	2000019c 	.word	0x2000019c
 8003d48:	200004f8 	.word	0x200004f8
 8003d4c:	20000220 	.word	0x20000220

08003d50 <app_update>:

void app_update(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8003d56:	4b29      	ldr	r3, [pc, #164]	@ (8003dfc <app_update+0xac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d049      	beq.n	8003df2 <app_update+0xa2>
    {
    	g_app_tick_cnt--;
 8003d5e:	4b27      	ldr	r3, [pc, #156]	@ (8003dfc <app_update+0xac>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a25      	ldr	r2, [pc, #148]	@ (8003dfc <app_update+0xac>)
 8003d66:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8003d68:	4b25      	ldr	r3, [pc, #148]	@ (8003e00 <app_update+0xb0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	4a24      	ldr	r2, [pc, #144]	@ (8003e00 <app_update+0xb0>)
 8003d70:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8003d72:	4b24      	ldr	r3, [pc, #144]	@ (8003e04 <app_update+0xb4>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	e036      	b.n	8003dec <app_update+0x9c>
    	{
			cycle_counter_reset();
 8003d7e:	4b22      	ldr	r3, [pc, #136]	@ (8003e08 <app_update+0xb8>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8003d84:	4921      	ldr	r1, [pc, #132]	@ (8003e0c <app_update+0xbc>)
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	3304      	adds	r3, #4
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	481d      	ldr	r0, [pc, #116]	@ (8003e0c <app_update+0xbc>)
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4403      	add	r3, r0
 8003da4:	3308      	adds	r3, #8
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	4788      	blx	r1

			cycle_counter_time_us = cycle_counter_time_us();
 8003dac:	4b16      	ldr	r3, [pc, #88]	@ (8003e08 <app_update+0xb8>)
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	4b17      	ldr	r3, [pc, #92]	@ (8003e10 <app_update+0xc0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4917      	ldr	r1, [pc, #92]	@ (8003e14 <app_update+0xc4>)
 8003db6:	fba1 1303 	umull	r1, r3, r1, r3
 8003dba:	0c9b      	lsrs	r3, r3, #18
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	603b      	str	r3, [r7, #0]

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8003dc2:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <app_update+0xb4>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	4413      	add	r3, r2
 8003dca:	4a0e      	ldr	r2, [pc, #56]	@ (8003e04 <app_update+0xb4>)
 8003dcc:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8003dce:	4a12      	ldr	r2, [pc, #72]	@ (8003e18 <app_update+0xc8>)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d904      	bls.n	8003de6 <app_update+0x96>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8003ddc:	490e      	ldr	r1, [pc, #56]	@ (8003e18 <app_update+0xc8>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3301      	adds	r3, #1
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d9c5      	bls.n	8003d7e <app_update+0x2e>
			}
	    }
    }
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	2000019c 	.word	0x2000019c
 8003e00:	20000194 	.word	0x20000194
 8003e04:	20000198 	.word	0x20000198
 8003e08:	e0001000 	.word	0xe0001000
 8003e0c:	080091e8 	.word	0x080091e8
 8003e10:	20000000 	.word	0x20000000
 8003e14:	431bde83 	.word	0x431bde83
 8003e18:	200001a0 	.word	0x200001a0

08003e1c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8003e20:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <HAL_SYSTICK_Callback+0x2c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3301      	adds	r3, #1
 8003e26:	4a08      	ldr	r2, [pc, #32]	@ (8003e48 <HAL_SYSTICK_Callback+0x2c>)
 8003e28:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 8003e2a:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <HAL_SYSTICK_Callback+0x30>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	4a06      	ldr	r2, [pc, #24]	@ (8003e4c <HAL_SYSTICK_Callback+0x30>)
 8003e32:	6013      	str	r3, [r2, #0]
	g_task_menu_tick_cnt++;
 8003e34:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_SYSTICK_Callback+0x34>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	4a05      	ldr	r2, [pc, #20]	@ (8003e50 <HAL_SYSTICK_Callback+0x34>)
 8003e3c:	6013      	str	r3, [r2, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	2000019c 	.word	0x2000019c
 8003e4c:	200004f8 	.word	0x200004f8
 8003e50:	20000220 	.word	0x20000220

08003e54 <displayInit>:

void display_delay_us(uint32_t delay_us);

//=====[Implementations of public functions]===================================
void displayInit( displayConnection_t connection )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 8003e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f1c <displayInit+0xc8>)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	7013      	strb	r3, [r2, #0]

    initial8BitCommunicationIsCompleted = false;
 8003e64:	4b2e      	ldr	r3, [pc, #184]	@ (8003f20 <displayInit+0xcc>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 8003e6a:	2032      	movs	r0, #50	@ 0x32
 8003e6c:	f7fc fdc4 	bl	80009f8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003e70:	2130      	movs	r1, #48	@ 0x30
 8003e72:	2000      	movs	r0, #0
 8003e74:	f000 f956 	bl	8004124 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(5);
 8003e78:	2005      	movs	r0, #5
 8003e7a:	f7fc fdbd 	bl	80009f8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003e7e:	2130      	movs	r1, #48	@ 0x30
 8003e80:	2000      	movs	r0, #0
 8003e82:	f000 f94f 	bl	8004124 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8003e86:	2001      	movs	r0, #1
 8003e88:	f7fc fdb6 	bl	80009f8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003e8c:	2130      	movs	r1, #48	@ 0x30
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f000 f948 	bl	8004124 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8003e94:	2001      	movs	r0, #1
 8003e96:	f7fc fdaf 	bl	80009f8 <HAL_Delay>

    switch( display.connection ) {
 8003e9a:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <displayInit+0xc8>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <displayInit+0x62>
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d119      	bne.n	8003eda <displayInit+0x86>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003ea6:	2138      	movs	r1, #56	@ 0x38
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f000 f93b 	bl	8004124 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8003eae:	2001      	movs	r0, #1
 8003eb0:	f7fc fda2 	bl	80009f8 <HAL_Delay>
        break;
 8003eb4:	e011      	b.n	8003eda <displayInit+0x86>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003eb6:	2120      	movs	r1, #32
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f000 f933 	bl	8004124 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay(1);
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f7fc fd9a 	bl	80009f8 <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 8003ec4:	4b16      	ldr	r3, [pc, #88]	@ (8003f20 <displayInit+0xcc>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003eca:	2128      	movs	r1, #40	@ 0x28
 8003ecc:	2000      	movs	r0, #0
 8003ece:	f000 f929 	bl	8004124 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f7fc fd90 	bl	80009f8 <HAL_Delay>
        break;
 8003ed8:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003eda:	2108      	movs	r1, #8
 8003edc:	2000      	movs	r0, #0
 8003ede:	f000 f921 	bl	8004124 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	f7fc fd88 	bl	80009f8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003ee8:	2101      	movs	r1, #1
 8003eea:	2000      	movs	r0, #0
 8003eec:	f000 f91a 	bl	8004124 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay(1);
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	f7fc fd81 	bl	80009f8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003ef6:	2106      	movs	r1, #6
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f000 f913 	bl	8004124 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay(1);
 8003efe:	2001      	movs	r0, #1
 8003f00:	f7fc fd7a 	bl	80009f8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003f04:	210c      	movs	r1, #12
 8003f06:	2000      	movs	r0, #0
 8003f08:	f000 f90c 	bl	8004124 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f7fc fd73 	bl	80009f8 <HAL_Delay>
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200001a8 	.word	0x200001a8
 8003f20:	200001a9 	.word	0x200001a9

08003f24 <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	460a      	mov	r2, r1
 8003f2e:	71fb      	strb	r3, [r7, #7]
 8003f30:	4613      	mov	r3, r2
 8003f32:	71bb      	strb	r3, [r7, #6]
    uint32_t start_cycles = cycle_counter_get();
 8003f34:	4b2f      	ldr	r3, [pc, #188]	@ (8003ff4 <displayCharPositionWrite+0xd0>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	617b      	str	r3, [r7, #20]

    switch( charPositionY ) {
 8003f3a:	79bb      	ldrb	r3, [r7, #6]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d83b      	bhi.n	8003fb8 <displayCharPositionWrite+0x94>
 8003f40:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <displayCharPositionWrite+0x24>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f6b 	.word	0x08003f6b
 8003f50:	08003f85 	.word	0x08003f85
 8003f54:	08003f9f 	.word	0x08003f9f
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	4619      	mov	r1, r3
 8003f62:	2000      	movs	r0, #0
 8003f64:	f000 f8de 	bl	8004124 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8003f68:	e026      	b.n	8003fb8 <displayCharPositionWrite+0x94>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	3340      	adds	r3, #64	@ 0x40
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8003f72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f76:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	f000 f8d1 	bl	8004124 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8003f82:	e019      	b.n	8003fb8 <displayCharPositionWrite+0x94>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	3314      	adds	r3, #20
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8003f8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f90:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	4619      	mov	r1, r3
 8003f96:	2000      	movs	r0, #0
 8003f98:	f000 f8c4 	bl	8004124 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8003f9c:	e00c      	b.n	8003fb8 <displayCharPositionWrite+0x94>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	3354      	adds	r3, #84	@ 0x54
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8003fa6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003faa:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	4619      	mov	r1, r3
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f000 f8b7 	bl	8004124 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8003fb6:	bf00      	nop
    }

    uint32_t elapsed_cycles = cycle_counter_get() - start_cycles;
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <displayCharPositionWrite+0xd0>)
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	613b      	str	r3, [r7, #16]
    uint32_t elapsed_us = elapsed_cycles / cycles_per_us;
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <displayCharPositionWrite+0xd4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8003ffc <displayCharPositionWrite+0xd8>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	0c9b      	lsrs	r3, r3, #18
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	60fb      	str	r3, [r7, #12]

    if (elapsed_us > wcet_display_us) {
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004000 <displayCharPositionWrite+0xdc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d905      	bls.n	8003fec <displayCharPositionWrite+0xc8>
        wcet_display_us = elapsed_us;
 8003fe0:	4a07      	ldr	r2, [pc, #28]	@ (8004000 <displayCharPositionWrite+0xdc>)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6013      	str	r3, [r2, #0]
        wcet_display_cycles = elapsed_cycles;
 8003fe6:	4a07      	ldr	r2, [pc, #28]	@ (8004004 <displayCharPositionWrite+0xe0>)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	6013      	str	r3, [r2, #0]
    }
}
 8003fec:	bf00      	nop
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	e0001000 	.word	0xe0001000
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	431bde83 	.word	0x431bde83
 8004000:	200001b0 	.word	0x200001b0
 8004004:	200001ac 	.word	0x200001ac

08004008 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
    uint32_t start_cycles = cycle_counter_get();
 8004010:	4b16      	ldr	r3, [pc, #88]	@ (800406c <displayStringWrite+0x64>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]

    while (*str) {
 8004016:	e007      	b.n	8004028 <displayStringWrite+0x20>
    	displayCodeWrite(DISPLAY_RS_DATA, *str++);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	4619      	mov	r1, r3
 8004022:	2001      	movs	r0, #1
 8004024:	f000 f87e 	bl	8004124 <displayCodeWrite>
    while (*str) {
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f3      	bne.n	8004018 <displayStringWrite+0x10>
    }

    uint32_t elapsed_cycles = cycle_counter_get() - start_cycles;
 8004030:	4b0e      	ldr	r3, [pc, #56]	@ (800406c <displayStringWrite+0x64>)
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	613b      	str	r3, [r7, #16]
    uint32_t elapsed_us = elapsed_cycles / cycles_per_us;
 800403a:	4b0d      	ldr	r3, [pc, #52]	@ (8004070 <displayStringWrite+0x68>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a0d      	ldr	r2, [pc, #52]	@ (8004074 <displayStringWrite+0x6c>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	0c9b      	lsrs	r3, r3, #18
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	60fb      	str	r3, [r7, #12]

    if (elapsed_us > wcet_display_us) {
 800404e:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <displayStringWrite+0x70>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	429a      	cmp	r2, r3
 8004056:	d905      	bls.n	8004064 <displayStringWrite+0x5c>
        wcet_display_us = elapsed_us;
 8004058:	4a07      	ldr	r2, [pc, #28]	@ (8004078 <displayStringWrite+0x70>)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6013      	str	r3, [r2, #0]
        wcet_display_cycles = elapsed_cycles;
 800405e:	4a07      	ldr	r2, [pc, #28]	@ (800407c <displayStringWrite+0x74>)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6013      	str	r3, [r2, #0]
    }
}
 8004064:	bf00      	nop
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	e0001000 	.word	0xe0001000
 8004070:	20000000 	.word	0x20000000
 8004074:	431bde83 	.word	0x431bde83
 8004078:	200001b0 	.word	0x200001b0
 800407c:	200001ac 	.word	0x200001ac

08004080 <displayRowClear>:

void displayRowClear( char x ) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
    displayCharPositionWrite(0, x);
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	4619      	mov	r1, r3
 800408e:	2000      	movs	r0, #0
 8004090:	f7ff ff48 	bl	8003f24 <displayCharPositionWrite>
    displayStringWrite("                ");
 8004094:	4803      	ldr	r0, [pc, #12]	@ (80040a4 <displayRowClear+0x24>)
 8004096:	f7ff ffb7 	bl	8004008 <displayStringWrite>
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	08008b4c 	.word	0x08008b4c

080040a8 <displayClearFull>:

void displayClearFull( void ) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0

    uint32_t start_cycles = cycle_counter_get();
 80040ae:	4b17      	ldr	r3, [pc, #92]	@ (800410c <displayClearFull+0x64>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

    displayCharPositionWrite(0, 0);
 80040b4:	2100      	movs	r1, #0
 80040b6:	2000      	movs	r0, #0
 80040b8:	f7ff ff34 	bl	8003f24 <displayCharPositionWrite>
    displayStringWrite("                ");
 80040bc:	4814      	ldr	r0, [pc, #80]	@ (8004110 <displayClearFull+0x68>)
 80040be:	f7ff ffa3 	bl	8004008 <displayStringWrite>
    displayCharPositionWrite(0, 1);
 80040c2:	2101      	movs	r1, #1
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7ff ff2d 	bl	8003f24 <displayCharPositionWrite>
    displayStringWrite("                ");
 80040ca:	4811      	ldr	r0, [pc, #68]	@ (8004110 <displayClearFull+0x68>)
 80040cc:	f7ff ff9c 	bl	8004008 <displayStringWrite>

    uint32_t elapsed_cycles = cycle_counter_get() - start_cycles;
 80040d0:	4b0e      	ldr	r3, [pc, #56]	@ (800410c <displayClearFull+0x64>)
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	60bb      	str	r3, [r7, #8]
    uint32_t elapsed_us = elapsed_cycles / cycles_per_us;
 80040da:	4b0e      	ldr	r3, [pc, #56]	@ (8004114 <displayClearFull+0x6c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a0e      	ldr	r2, [pc, #56]	@ (8004118 <displayClearFull+0x70>)
 80040e0:	fba2 2303 	umull	r2, r3, r2, r3
 80040e4:	0c9b      	lsrs	r3, r3, #18
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	607b      	str	r3, [r7, #4]

    if (elapsed_us > wcet_display_us) {
 80040ee:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <displayClearFull+0x74>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d905      	bls.n	8004104 <displayClearFull+0x5c>
        wcet_display_us = elapsed_us;
 80040f8:	4a08      	ldr	r2, [pc, #32]	@ (800411c <displayClearFull+0x74>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6013      	str	r3, [r2, #0]
        wcet_display_cycles = elapsed_cycles;
 80040fe:	4a08      	ldr	r2, [pc, #32]	@ (8004120 <displayClearFull+0x78>)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6013      	str	r3, [r2, #0]
    }
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	e0001000 	.word	0xe0001000
 8004110:	08008b4c 	.word	0x08008b4c
 8004114:	20000000 	.word	0x20000000
 8004118:	431bde83 	.word	0x431bde83
 800411c:	200001b0 	.word	0x200001b0
 8004120:	200001ac 	.word	0x200001ac

08004124 <displayCodeWrite>:

//=====[Implementations of private functions]==================================
static void displayCodeWrite( bool type, uint8_t dataBus )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	460a      	mov	r2, r1
 800412e:	71fb      	strb	r3, [r7, #7]
 8004130:	4613      	mov	r3, r2
 8004132:	71bb      	strb	r3, [r7, #6]
	if ( type == DISPLAY_RS_INSTRUCTION )
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	f083 0301 	eor.w	r3, r3, #1
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <displayCodeWrite+0x26>
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION );
 8004140:	2100      	movs	r1, #0
 8004142:	2004      	movs	r0, #4
 8004144:	f000 f812 	bl	800416c <displayPinWrite>
 8004148:	e003      	b.n	8004152 <displayCodeWrite+0x2e>
	else
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA );
 800414a:	2101      	movs	r1, #1
 800414c:	2004      	movs	r0, #4
 800414e:	f000 f80d 	bl	800416c <displayPinWrite>
	displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE );
 8004152:	2100      	movs	r1, #0
 8004154:	2005      	movs	r0, #5
 8004156:	f000 f809 	bl	800416c <displayPinWrite>
	displayDataBusWrite( dataBus );
 800415a:	79bb      	ldrb	r3, [r7, #6]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f873 	bl	8004248 <displayDataBusWrite>
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	6039      	str	r1, [r7, #0]
 8004176:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8004178:	4b2f      	ldr	r3, [pc, #188]	@ (8004238 <displayPinWrite+0xcc>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <displayPinWrite+0x1c>
 8004180:	2b01      	cmp	r3, #1
 8004182:	d154      	bne.n	800422e <displayPinWrite+0xc2>
                case DISPLAY_PIN_D7: displayD7 = value;   break;
                case DISPLAY_PIN_RS: displayRs = value;   break;
                case DISPLAY_PIN_EN: displayEn = value;   break;
                case DISPLAY_PIN_RW: break;
                */
                default: break;
 8004184:	bf00      	nop
            }
            break;
 8004186:	e052      	b.n	800422e <displayPinWrite+0xc2>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	3b04      	subs	r3, #4
 800418c:	2b0a      	cmp	r3, #10
 800418e:	d84c      	bhi.n	800422a <displayPinWrite+0xbe>
 8004190:	a201      	add	r2, pc, #4	@ (adr r2, 8004198 <displayPinWrite+0x2c>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	08004209 	.word	0x08004209
 800419c:	0800422b 	.word	0x0800422b
 80041a0:	0800421b 	.word	0x0800421b
 80041a4:	0800422b 	.word	0x0800422b
 80041a8:	0800422b 	.word	0x0800422b
 80041ac:	0800422b 	.word	0x0800422b
 80041b0:	0800422b 	.word	0x0800422b
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041d5 	.word	0x080041d5
 80041bc:	080041e5 	.word	0x080041e5
 80041c0:	080041f7 	.word	0x080041f7
            	case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, value);   break;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	2120      	movs	r1, #32
 80041cc:	481b      	ldr	r0, [pc, #108]	@ (800423c <displayPinWrite+0xd0>)
 80041ce:	f7fc fee6 	bl	8000f9e <HAL_GPIO_WritePin>
 80041d2:	e02b      	b.n	800422c <displayPinWrite+0xc0>
				case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, value);   break;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	2110      	movs	r1, #16
 80041dc:	4817      	ldr	r0, [pc, #92]	@ (800423c <displayPinWrite+0xd0>)
 80041de:	f7fc fede 	bl	8000f9e <HAL_GPIO_WritePin>
 80041e2:	e023      	b.n	800422c <displayPinWrite+0xc0>
				case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, value);   break;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041ee:	4813      	ldr	r0, [pc, #76]	@ (800423c <displayPinWrite+0xd0>)
 80041f0:	f7fc fed5 	bl	8000f9e <HAL_GPIO_WritePin>
 80041f4:	e01a      	b.n	800422c <displayPinWrite+0xc0>
				case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, value);   break;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004200:	480f      	ldr	r0, [pc, #60]	@ (8004240 <displayPinWrite+0xd4>)
 8004202:	f7fc fecc 	bl	8000f9e <HAL_GPIO_WritePin>
 8004206:	e011      	b.n	800422c <displayPinWrite+0xc0>
				case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, value);   break;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004212:	480b      	ldr	r0, [pc, #44]	@ (8004240 <displayPinWrite+0xd4>)
 8004214:	f7fc fec3 	bl	8000f9e <HAL_GPIO_WritePin>
 8004218:	e008      	b.n	800422c <displayPinWrite+0xc0>
				case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, value);   break;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	2180      	movs	r1, #128	@ 0x80
 8004222:	4808      	ldr	r0, [pc, #32]	@ (8004244 <displayPinWrite+0xd8>)
 8004224:	f7fc febb 	bl	8000f9e <HAL_GPIO_WritePin>
 8004228:	e000      	b.n	800422c <displayPinWrite+0xc0>
                case DISPLAY_PIN_RW: break;
                default: break;
 800422a:	bf00      	nop
            }
            break;
 800422c:	bf00      	nop
    }
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	200001a8 	.word	0x200001a8
 800423c:	40010c00 	.word	0x40010c00
 8004240:	40010800 	.word	0x40010800
 8004244:	40011000 	.word	0x40011000

08004248 <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8004252:	2100      	movs	r1, #0
 8004254:	2006      	movs	r0, #6
 8004256:	f7ff ff89 	bl	800416c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004260:	4619      	mov	r1, r3
 8004262:	200e      	movs	r0, #14
 8004264:	f7ff ff82 	bl	800416c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426e:	4619      	mov	r1, r3
 8004270:	200d      	movs	r0, #13
 8004272:	f7ff ff7b 	bl	800416c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	4619      	mov	r1, r3
 800427e:	200c      	movs	r0, #12
 8004280:	f7ff ff74 	bl	800416c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	4619      	mov	r1, r3
 800428c:	200b      	movs	r0, #11
 800428e:	f7ff ff6d 	bl	800416c <displayPinWrite>
    switch( display.connection ) {
 8004292:	4b32      	ldr	r3, [pc, #200]	@ (800435c <displayDataBusWrite+0x114>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01e      	beq.n	80042d8 <displayDataBusWrite+0x90>
 800429a:	2b01      	cmp	r3, #1
 800429c:	d14b      	bne.n	8004336 <displayDataBusWrite+0xee>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	4619      	mov	r1, r3
 80042a6:	200a      	movs	r0, #10
 80042a8:	f7ff ff60 	bl	800416c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	2009      	movs	r0, #9
 80042b6:	f7ff ff59 	bl	800416c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	4619      	mov	r1, r3
 80042c2:	2008      	movs	r0, #8
 80042c4:	f7ff ff52 	bl	800416c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	4619      	mov	r1, r3
 80042d0:	2007      	movs	r0, #7
 80042d2:	f7ff ff4b 	bl	800416c <displayPinWrite>
        break;
 80042d6:	e02e      	b.n	8004336 <displayDataBusWrite+0xee>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            if ( initial8BitCommunicationIsCompleted == true) {
 80042d8:	4b21      	ldr	r3, [pc, #132]	@ (8004360 <displayDataBusWrite+0x118>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d029      	beq.n	8004334 <displayDataBusWrite+0xec>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 80042e0:	2101      	movs	r1, #1
 80042e2:	2006      	movs	r0, #6
 80042e4:	f7ff ff42 	bl	800416c <displayPinWrite>
                //HAL_Delay(1);
                display_delay_us(DISPLAY_DEL_01US);
 80042e8:	2001      	movs	r0, #1
 80042ea:	f000 f83b 	bl	8004364 <display_delay_us>

                displayPinWrite( DISPLAY_PIN_EN, OFF );
 80042ee:	2100      	movs	r1, #0
 80042f0:	2006      	movs	r0, #6
 80042f2:	f7ff ff3b 	bl	800416c <displayPinWrite>
                //HAL_Delay(1);
                display_delay_us(DISPLAY_DEL_37US);
 80042f6:	2025      	movs	r0, #37	@ 0x25
 80042f8:	f000 f834 	bl	8004364 <display_delay_us>

                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	4619      	mov	r1, r3
 8004304:	200e      	movs	r0, #14
 8004306:	f7ff ff31 	bl	800416c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	200d      	movs	r0, #13
 8004314:	f7ff ff2a 	bl	800416c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	4619      	mov	r1, r3
 8004320:	200c      	movs	r0, #12
 8004322:	f7ff ff23 	bl	800416c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	4619      	mov	r1, r3
 800432e:	200b      	movs	r0, #11
 8004330:	f7ff ff1c 	bl	800416c <displayPinWrite>
            }
        break;
 8004334:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 8004336:	2101      	movs	r1, #1
 8004338:	2006      	movs	r0, #6
 800433a:	f7ff ff17 	bl	800416c <displayPinWrite>
    //HAL_Delay(1);
    display_delay_us(DISPLAY_DEL_01US);
 800433e:	2001      	movs	r0, #1
 8004340:	f000 f810 	bl	8004364 <display_delay_us>

    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8004344:	2100      	movs	r1, #0
 8004346:	2006      	movs	r0, #6
 8004348:	f7ff ff10 	bl	800416c <displayPinWrite>
    //HAL_Delay(1);
    display_delay_us(DISPLAY_DEL_37US);
 800434c:	2025      	movs	r0, #37	@ 0x25
 800434e:	f000 f809 	bl	8004364 <display_delay_us>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	200001a8 	.word	0x200001a8
 8004360:	200001a9 	.word	0x200001a9

08004364 <display_delay_us>:

void display_delay_us(uint32_t delay_us)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	uint32_t now = cycle_counter_time_us();
 800436c:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <display_delay_us+0x54>)
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <display_delay_us+0x58>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4912      	ldr	r1, [pc, #72]	@ (80043c0 <display_delay_us+0x5c>)
 8004376:	fba1 1303 	umull	r1, r3, r1, r3
 800437a:	0c9b      	lsrs	r3, r3, #18
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	60fb      	str	r3, [r7, #12]
	uint32_t then = delay_us + now;
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	60bb      	str	r3, [r7, #8]

	while (now < then)
 800438a:	e00a      	b.n	80043a2 <display_delay_us+0x3e>
		now = cycle_counter_time_us();
 800438c:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <display_delay_us+0x54>)
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <display_delay_us+0x58>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	490a      	ldr	r1, [pc, #40]	@ (80043c0 <display_delay_us+0x5c>)
 8004396:	fba1 1303 	umull	r1, r3, r1, r3
 800439a:	0c9b      	lsrs	r3, r3, #18
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	60fb      	str	r3, [r7, #12]
	while (now < then)
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d3f0      	bcc.n	800438c <display_delay_us+0x28>
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	e0001000 	.word	0xe0001000
 80043bc:	20000000 	.word	0x20000000
 80043c0:	431bde83 	.word	0x431bde83

080043c4 <min_u16>:
#include "eeprom.h"
#include "dwt.h" 

static inline uint16_t min_u16(uint16_t a, uint16_t b){ return (a < b) ? a : b; }
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	460a      	mov	r2, r1
 80043ce:	80fb      	strh	r3, [r7, #6]
 80043d0:	4613      	mov	r3, r2
 80043d2:	80bb      	strh	r3, [r7, #4]
 80043d4:	88ba      	ldrh	r2, [r7, #4]
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	4293      	cmp	r3, r2
 80043da:	bf28      	it	cs
 80043dc:	4613      	movcs	r3, r2
 80043de:	b29b      	uxth	r3, r3
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <EEPROM_Init>:
uint32_t wcet_eeprom_read_cycles = 0;
uint32_t wcet_eeprom_read_us = 0;
uint32_t wcet_eeprom_write_cycles = 0;
uint32_t wcet_eeprom_write_us = 0;

HAL_StatusTypeDef EEPROM_Init(void){
 80043ea:	b580      	push	{r7, lr}
 80043ec:	af00      	add	r7, sp, #0
    return EEPROM_WaitReady(50);
 80043ee:	2032      	movs	r0, #50	@ 0x32
 80043f0:	f000 f804 	bl	80043fc <EEPROM_WaitReady>
 80043f4:	4603      	mov	r3, r0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <EEPROM_WaitReady>:

HAL_StatusTypeDef EEPROM_WaitReady(uint32_t timeout_ms){
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
    uint32_t t0 = HAL_GetTick();
 8004404:	f7fc faee 	bl	80009e4 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - t0) < timeout_ms){
 800440a:	e00a      	b.n	8004422 <EEPROM_WaitReady+0x26>
        if (HAL_I2C_IsDeviceReady(&EEPROM_I2C_HANDLE, EEPROM_I2C_ADDR, 1, 5) == HAL_OK){
 800440c:	2305      	movs	r3, #5
 800440e:	2201      	movs	r2, #1
 8004410:	21a0      	movs	r1, #160	@ 0xa0
 8004412:	480a      	ldr	r0, [pc, #40]	@ (800443c <EEPROM_WaitReady+0x40>)
 8004414:	f7fd fab0 	bl	8001978 <HAL_I2C_IsDeviceReady>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <EEPROM_WaitReady+0x26>
            return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e008      	b.n	8004434 <EEPROM_WaitReady+0x38>
    while ((HAL_GetTick() - t0) < timeout_ms){
 8004422:	f7fc fadf 	bl	80009e4 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	d8ec      	bhi.n	800440c <EEPROM_WaitReady+0x10>
        }
    }
    return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200000dc 	.word	0x200000dc

08004440 <EEPROM_Read>:

HAL_StatusTypeDef EEPROM_Read(uint16_t addr, uint8_t *buf, uint16_t len){
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	@ 0x28
 8004444:	af04      	add	r7, sp, #16
 8004446:	4603      	mov	r3, r0
 8004448:	6039      	str	r1, [r7, #0]
 800444a:	80fb      	strh	r3, [r7, #6]
 800444c:	4613      	mov	r3, r2
 800444e:	80bb      	strh	r3, [r7, #4]

    uint32_t start_cycles = cycle_counter_get();
 8004450:	4b1b      	ldr	r3, [pc, #108]	@ (80044c0 <EEPROM_Read+0x80>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	617b      	str	r3, [r7, #20]

    if ((uint32_t)addr + len > EEPROM_SIZE_BYTES) return HAL_ERROR;
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	88bb      	ldrh	r3, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004460:	d901      	bls.n	8004466 <EEPROM_Read+0x26>
 8004462:	2301      	movs	r3, #1
 8004464:	e028      	b.n	80044b8 <EEPROM_Read+0x78>
    HAL_StatusTypeDef st = HAL_I2C_Mem_Read(&EEPROM_I2C_HANDLE,
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	2364      	movs	r3, #100	@ 0x64
 800446a:	9302      	str	r3, [sp, #8]
 800446c:	88bb      	ldrh	r3, [r7, #4]
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2310      	movs	r3, #16
 8004476:	21a0      	movs	r1, #160	@ 0xa0
 8004478:	4812      	ldr	r0, [pc, #72]	@ (80044c4 <EEPROM_Read+0x84>)
 800447a:	f7fd f809 	bl	8001490 <HAL_I2C_Mem_Read>
 800447e:	4603      	mov	r3, r0
 8004480:	74fb      	strb	r3, [r7, #19]
                                            addr,
                                            EEPROM_MEMADD_SIZE,
                                            buf, len,
                                            100);

    uint32_t elapsed_cycles = cycle_counter_get() - start_cycles;
 8004482:	4b0f      	ldr	r3, [pc, #60]	@ (80044c0 <EEPROM_Read+0x80>)
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	60fb      	str	r3, [r7, #12]
    uint32_t elapsed_us = elapsed_cycles / cycles_per_us;
 800448c:	4b0e      	ldr	r3, [pc, #56]	@ (80044c8 <EEPROM_Read+0x88>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0e      	ldr	r2, [pc, #56]	@ (80044cc <EEPROM_Read+0x8c>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	0c9b      	lsrs	r3, r3, #18
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	fbb2 f3f3 	udiv	r3, r2, r3
 800449e:	60bb      	str	r3, [r7, #8]

    if (elapsed_us > wcet_eeprom_read_us) {
 80044a0:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <EEPROM_Read+0x90>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d905      	bls.n	80044b6 <EEPROM_Read+0x76>
        wcet_eeprom_read_us = elapsed_us;
 80044aa:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <EEPROM_Read+0x90>)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6013      	str	r3, [r2, #0]
        wcet_eeprom_read_cycles = elapsed_cycles;
 80044b0:	4a08      	ldr	r2, [pc, #32]	@ (80044d4 <EEPROM_Read+0x94>)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6013      	str	r3, [r2, #0]
    }
    return st;
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	e0001000 	.word	0xe0001000
 80044c4:	200000dc 	.word	0x200000dc
 80044c8:	20000000 	.word	0x20000000
 80044cc:	431bde83 	.word	0x431bde83
 80044d0:	200001b8 	.word	0x200001b8
 80044d4:	200001b4 	.word	0x200001b4

080044d8 <EEPROM_Write>:

HAL_StatusTypeDef EEPROM_Write(uint16_t addr, const uint8_t *buf, uint16_t len){
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08c      	sub	sp, #48	@ 0x30
 80044dc:	af04      	add	r7, sp, #16
 80044de:	4603      	mov	r3, r0
 80044e0:	6039      	str	r1, [r7, #0]
 80044e2:	80fb      	strh	r3, [r7, #6]
 80044e4:	4613      	mov	r3, r2
 80044e6:	80bb      	strh	r3, [r7, #4]

    uint32_t start_cycles = cycle_counter_get();
 80044e8:	4b34      	ldr	r3, [pc, #208]	@ (80045bc <EEPROM_Write+0xe4>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	61fb      	str	r3, [r7, #28]

    if ((uint32_t)addr + len > EEPROM_SIZE_BYTES) return HAL_ERROR;
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	88bb      	ldrh	r3, [r7, #4]
 80044f2:	4413      	add	r3, r2
 80044f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f8:	d901      	bls.n	80044fe <EEPROM_Write+0x26>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e059      	b.n	80045b2 <EEPROM_Write+0xda>

    HAL_StatusTypeDef st = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	76fb      	strb	r3, [r7, #27]
    while (len > 0){
 8004502:	e038      	b.n	8004576 <EEPROM_Write+0x9e>
        uint16_t page_off   = addr % EEPROM_PAGE_SIZE;
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	81fb      	strh	r3, [r7, #14]
        uint16_t page_space = EEPROM_PAGE_SIZE - page_off;
 800450c:	89fb      	ldrh	r3, [r7, #14]
 800450e:	f1c3 0320 	rsb	r3, r3, #32
 8004512:	81bb      	strh	r3, [r7, #12]
        uint16_t chunk      = min_u16(len, page_space);
 8004514:	89ba      	ldrh	r2, [r7, #12]
 8004516:	88bb      	ldrh	r3, [r7, #4]
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ff52 	bl	80043c4 <min_u16>
 8004520:	4603      	mov	r3, r0
 8004522:	817b      	strh	r3, [r7, #10]

        st = HAL_I2C_Mem_Write(&EEPROM_I2C_HANDLE,
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	2364      	movs	r3, #100	@ 0x64
 8004528:	9302      	str	r3, [sp, #8]
 800452a:	897b      	ldrh	r3, [r7, #10]
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2310      	movs	r3, #16
 8004534:	21a0      	movs	r1, #160	@ 0xa0
 8004536:	4822      	ldr	r0, [pc, #136]	@ (80045c0 <EEPROM_Write+0xe8>)
 8004538:	f7fc feb0 	bl	800129c <HAL_I2C_Mem_Write>
 800453c:	4603      	mov	r3, r0
 800453e:	76fb      	strb	r3, [r7, #27]
                               EEPROM_I2C_ADDR,
                               addr,
                               EEPROM_MEMADD_SIZE,
                               (uint8_t*)buf, chunk,
                               100);
        if (st != HAL_OK) return st;
 8004540:	7efb      	ldrb	r3, [r7, #27]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <EEPROM_Write+0x72>
 8004546:	7efb      	ldrb	r3, [r7, #27]
 8004548:	e033      	b.n	80045b2 <EEPROM_Write+0xda>

        st = EEPROM_WaitReady(10);
 800454a:	200a      	movs	r0, #10
 800454c:	f7ff ff56 	bl	80043fc <EEPROM_WaitReady>
 8004550:	4603      	mov	r3, r0
 8004552:	76fb      	strb	r3, [r7, #27]
        if (st != HAL_OK) return st;
 8004554:	7efb      	ldrb	r3, [r7, #27]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <EEPROM_Write+0x86>
 800455a:	7efb      	ldrb	r3, [r7, #27]
 800455c:	e029      	b.n	80045b2 <EEPROM_Write+0xda>

        addr += chunk;
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	897b      	ldrh	r3, [r7, #10]
 8004562:	4413      	add	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
        buf  += chunk;
 8004566:	897b      	ldrh	r3, [r7, #10]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	4413      	add	r3, r2
 800456c:	603b      	str	r3, [r7, #0]
        len  -= chunk;
 800456e:	88ba      	ldrh	r2, [r7, #4]
 8004570:	897b      	ldrh	r3, [r7, #10]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	80bb      	strh	r3, [r7, #4]
    while (len > 0){
 8004576:	88bb      	ldrh	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1c3      	bne.n	8004504 <EEPROM_Write+0x2c>
    }

    uint32_t elapsed_cycles = cycle_counter_get() - start_cycles;
 800457c:	4b0f      	ldr	r3, [pc, #60]	@ (80045bc <EEPROM_Write+0xe4>)
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
    uint32_t elapsed_us = elapsed_cycles / cycles_per_us;
 8004586:	4b0f      	ldr	r3, [pc, #60]	@ (80045c4 <EEPROM_Write+0xec>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a0f      	ldr	r2, [pc, #60]	@ (80045c8 <EEPROM_Write+0xf0>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	0c9b      	lsrs	r3, r3, #18
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	613b      	str	r3, [r7, #16]

    if (elapsed_us > wcet_eeprom_write_us) {
 800459a:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <EEPROM_Write+0xf4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d905      	bls.n	80045b0 <EEPROM_Write+0xd8>
        wcet_eeprom_write_us = elapsed_us;
 80045a4:	4a09      	ldr	r2, [pc, #36]	@ (80045cc <EEPROM_Write+0xf4>)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	6013      	str	r3, [r2, #0]
        wcet_eeprom_write_cycles = elapsed_cycles;
 80045aa:	4a09      	ldr	r2, [pc, #36]	@ (80045d0 <EEPROM_Write+0xf8>)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	6013      	str	r3, [r2, #0]
    }
    
    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	e0001000 	.word	0xe0001000
 80045c0:	200000dc 	.word	0x200000dc
 80045c4:	20000000 	.word	0x20000000
 80045c8:	431bde83 	.word	0x431bde83
 80045cc:	200001c0 	.word	0x200001c0
 80045d0:	200001bc 	.word	0x200001bc

080045d4 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	printf(msg);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f003 fa89 	bl	8007af4 <iprintf>
	fflush(stdout);
 80045e2:	4b05      	ldr	r3, [pc, #20]	@ (80045f8 <logger_log_print_+0x24>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f003 f9ad 	bl	8007948 <fflush>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000070 	.word	0x20000070

080045fc <read_header>:
#define EE_MAGIC_L   'E'
#define EE_VERSION   1

static ee_header_t g_hdr;

static HAL_StatusTypeDef read_header(void){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
    return EEPROM_Read(EE_HDR_ADDR, (uint8_t*)&g_hdr, sizeof(g_hdr));
 8004600:	2206      	movs	r2, #6
 8004602:	4903      	ldr	r1, [pc, #12]	@ (8004610 <read_header+0x14>)
 8004604:	2000      	movs	r0, #0
 8004606:	f7ff ff1b 	bl	8004440 <EEPROM_Read>
 800460a:	4603      	mov	r3, r0
}
 800460c:	4618      	mov	r0, r3
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000208 	.word	0x20000208

08004614 <write_header>:

static HAL_StatusTypeDef write_header(void){
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
    return EEPROM_Write(EE_HDR_ADDR, (uint8_t*)&g_hdr, sizeof(g_hdr));
 8004618:	2206      	movs	r2, #6
 800461a:	4903      	ldr	r1, [pc, #12]	@ (8004628 <write_header+0x14>)
 800461c:	2000      	movs	r0, #0
 800461e:	f7ff ff5b 	bl	80044d8 <EEPROM_Write>
 8004622:	4603      	mov	r3, r0
}
 8004624:	4618      	mov	r0, r3
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000208 	.word	0x20000208

0800462c <storage_init>:

HAL_StatusTypeDef storage_init(void){
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef st = EEPROM_Init();
 8004632:	f7ff feda 	bl	80043ea <EEPROM_Init>
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
    if (st != HAL_OK) return st;
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <storage_init+0x18>
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	e028      	b.n	8004696 <storage_init+0x6a>

    st = read_header();
 8004644:	f7ff ffda 	bl	80045fc <read_header>
 8004648:	4603      	mov	r3, r0
 800464a:	71fb      	strb	r3, [r7, #7]
    if (st != HAL_OK ||
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <storage_init+0x3e>
        g_hdr.magicH != EE_MAGIC_H ||
 8004652:	4b13      	ldr	r3, [pc, #76]	@ (80046a0 <storage_init+0x74>)
 8004654:	781b      	ldrb	r3, [r3, #0]
    if (st != HAL_OK ||
 8004656:	2b45      	cmp	r3, #69	@ 0x45
 8004658:	d107      	bne.n	800466a <storage_init+0x3e>
        g_hdr.magicL != EE_MAGIC_L ||
 800465a:	4b11      	ldr	r3, [pc, #68]	@ (80046a0 <storage_init+0x74>)
 800465c:	785b      	ldrb	r3, [r3, #1]
        g_hdr.magicH != EE_MAGIC_H ||
 800465e:	2b45      	cmp	r3, #69	@ 0x45
 8004660:	d103      	bne.n	800466a <storage_init+0x3e>
        g_hdr.version != EE_VERSION)
 8004662:	4b0f      	ldr	r3, [pc, #60]	@ (80046a0 <storage_init+0x74>)
 8004664:	789b      	ldrb	r3, [r3, #2]
        g_hdr.magicL != EE_MAGIC_L ||
 8004666:	2b01      	cmp	r3, #1
 8004668:	d014      	beq.n	8004694 <storage_init+0x68>
    {
        g_hdr.magicH  = EE_MAGIC_H;
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <storage_init+0x74>)
 800466c:	2245      	movs	r2, #69	@ 0x45
 800466e:	701a      	strb	r2, [r3, #0]
        g_hdr.magicL  = EE_MAGIC_L;
 8004670:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <storage_init+0x74>)
 8004672:	2245      	movs	r2, #69	@ 0x45
 8004674:	705a      	strb	r2, [r3, #1]
        g_hdr.version = EE_VERSION;
 8004676:	4b0a      	ldr	r3, [pc, #40]	@ (80046a0 <storage_init+0x74>)
 8004678:	2201      	movs	r2, #1
 800467a:	709a      	strb	r2, [r3, #2]
        g_hdr.count   = 0;
 800467c:	4b08      	ldr	r3, [pc, #32]	@ (80046a0 <storage_init+0x74>)
 800467e:	2200      	movs	r2, #0
 8004680:	70da      	strb	r2, [r3, #3]
 8004682:	2200      	movs	r2, #0
 8004684:	711a      	strb	r2, [r3, #4]
        g_hdr.reserved= 0xFF;
 8004686:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <storage_init+0x74>)
 8004688:	22ff      	movs	r2, #255	@ 0xff
 800468a:	715a      	strb	r2, [r3, #5]
        st = write_header();
 800468c:	f7ff ffc2 	bl	8004614 <write_header>
 8004690:	4603      	mov	r3, r0
 8004692:	71fb      	strb	r3, [r7, #7]
    }
    return st;
 8004694:	79fb      	ldrb	r3, [r7, #7]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000208 	.word	0x20000208

080046a4 <storage_get_count>:

uint16_t storage_get_count(void){
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
    return g_hdr.count;
 80046a8:	4b03      	ldr	r3, [pc, #12]	@ (80046b8 <storage_get_count+0x14>)
 80046aa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80046ae:	b29b      	uxth	r3, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	20000208 	.word	0x20000208

080046bc <storage_iterate>:

HAL_StatusTypeDef storage_iterate(storage_iter_cb_t cb){
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
    if (!cb) return HAL_ERROR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <storage_iterate+0x12>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e042      	b.n	8004754 <storage_iterate+0x98>

    uint32_t total_bytes = (uint32_t)g_hdr.count * sizeof(storage_record_t);
 80046ce:	4b23      	ldr	r3, [pc, #140]	@ (800475c <storage_iterate+0xa0>)
 80046d0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	61bb      	str	r3, [r7, #24]
    if (EE_BASE_ADDR + total_bytes > EEPROM_SIZE_BYTES) {
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	3310      	adds	r3, #16
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ea:	d901      	bls.n	80046f0 <storage_iterate+0x34>
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e031      	b.n	8004754 <storage_iterate+0x98>
    }

    storage_record_t rec;
    for (uint16_t i = 0; i < g_hdr.count; i++){
 80046f0:	2300      	movs	r3, #0
 80046f2:	83fb      	strh	r3, [r7, #30]
 80046f4:	e024      	b.n	8004740 <storage_iterate+0x84>
        uint16_t addr = EE_BASE_ADDR + i * sizeof(storage_record_t);
 80046f6:	8bfb      	ldrh	r3, [r7, #30]
 80046f8:	461a      	mov	r2, r3
 80046fa:	0092      	lsls	r2, r2, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	b29b      	uxth	r3, r3
 8004702:	3310      	adds	r3, #16
 8004704:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef st = EEPROM_Read(addr, (uint8_t*)&rec, sizeof(rec));
 8004706:	f107 0108 	add.w	r1, r7, #8
 800470a:	8afb      	ldrh	r3, [r7, #22]
 800470c:	220a      	movs	r2, #10
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fe96 	bl	8004440 <EEPROM_Read>
 8004714:	4603      	mov	r3, r0
 8004716:	757b      	strb	r3, [r7, #21]
        if (st != HAL_OK) return st;
 8004718:	7d7b      	ldrb	r3, [r7, #21]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <storage_iterate+0x66>
 800471e:	7d7b      	ldrb	r3, [r7, #21]
 8004720:	e018      	b.n	8004754 <storage_iterate+0x98>
        if (!cb(&rec, i)) break; 
 8004722:	8bf9      	ldrh	r1, [r7, #30]
 8004724:	f107 0208 	add.w	r2, r7, #8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4610      	mov	r0, r2
 800472c:	4798      	blx	r3
 800472e:	4603      	mov	r3, r0
 8004730:	f083 0301 	eor.w	r3, r3, #1
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <storage_iterate+0x94>
    for (uint16_t i = 0; i < g_hdr.count; i++){
 800473a:	8bfb      	ldrh	r3, [r7, #30]
 800473c:	3301      	adds	r3, #1
 800473e:	83fb      	strh	r3, [r7, #30]
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <storage_iterate+0xa0>)
 8004742:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004746:	b29b      	uxth	r3, r3
 8004748:	8bfa      	ldrh	r2, [r7, #30]
 800474a:	429a      	cmp	r2, r3
 800474c:	d3d3      	bcc.n	80046f6 <storage_iterate+0x3a>
 800474e:	e000      	b.n	8004752 <storage_iterate+0x96>
        if (!cb(&rec, i)) break; 
 8004750:	bf00      	nop
    }
    return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000208 	.word	0x20000208

08004760 <storage_append>:

HAL_StatusTypeDef storage_append(const storage_record_t* rec){
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
    if (!rec) return HAL_ERROR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <storage_append+0x12>
 800476e:	2301      	movs	r3, #1
 8004770:	e02b      	b.n	80047ca <storage_append+0x6a>

    uint32_t next_addr = EE_BASE_ADDR + (uint32_t)g_hdr.count * sizeof(storage_record_t);
 8004772:	4b18      	ldr	r3, [pc, #96]	@ (80047d4 <storage_append+0x74>)
 8004774:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004778:	b29b      	uxth	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	3310      	adds	r3, #16
 8004786:	60fb      	str	r3, [r7, #12]
    if (next_addr + sizeof(storage_record_t) > EEPROM_SIZE_BYTES) {
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	330a      	adds	r3, #10
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004790:	d901      	bls.n	8004796 <storage_append+0x36>
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e019      	b.n	80047ca <storage_append+0x6a>
    }

    HAL_StatusTypeDef st = EEPROM_Write((uint16_t)next_addr, (uint8_t*)rec, sizeof(storage_record_t));
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	b29b      	uxth	r3, r3
 800479a:	220a      	movs	r2, #10
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fe9a 	bl	80044d8 <EEPROM_Write>
 80047a4:	4603      	mov	r3, r0
 80047a6:	72fb      	strb	r3, [r7, #11]
    if (st != HAL_OK) return st;
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <storage_append+0x52>
 80047ae:	7afb      	ldrb	r3, [r7, #11]
 80047b0:	e00b      	b.n	80047ca <storage_append+0x6a>

    g_hdr.count++;
 80047b2:	4b08      	ldr	r3, [pc, #32]	@ (80047d4 <storage_append+0x74>)
 80047b4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3301      	adds	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <storage_append+0x74>)
 80047c0:	f8a3 2003 	strh.w	r2, [r3, #3]
    return write_header();
 80047c4:	f7ff ff26 	bl	8004614 <write_header>
 80047c8:	4603      	mov	r3, r0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000208 	.word	0x20000208

080047d8 <rtc_get_datetime>:
/********************** internal functions definition ************************/

// Helpers RTC: read and write date/time
static void rtc_get_datetime(uint8_t* d, uint8_t* m, uint8_t* y,
                             uint8_t* h, uint8_t* min)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef t;
    RTC_DateTypeDef dt;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);   
 80047e6:	f107 0314 	add.w	r3, r7, #20
 80047ea:	2200      	movs	r2, #0
 80047ec:	4619      	mov	r1, r3
 80047ee:	4816      	ldr	r0, [pc, #88]	@ (8004848 <rtc_get_datetime+0x70>)
 80047f0:	f7fe fc50 	bl	8003094 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &dt, RTC_FORMAT_BIN);  
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	2200      	movs	r2, #0
 80047fa:	4619      	mov	r1, r3
 80047fc:	4812      	ldr	r0, [pc, #72]	@ (8004848 <rtc_get_datetime+0x70>)
 80047fe:	f7fe fdd7 	bl	80033b0 <HAL_RTC_GetDate>
    if (d)   *d   = dt.Date;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <rtc_get_datetime+0x36>
 8004808:	7cba      	ldrb	r2, [r7, #18]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	701a      	strb	r2, [r3, #0]
    if (m)   *m   = dt.Month;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <rtc_get_datetime+0x42>
 8004814:	7c7a      	ldrb	r2, [r7, #17]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	701a      	strb	r2, [r3, #0]
    if (y)   *y   = dt.Year;   
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <rtc_get_datetime+0x4e>
 8004820:	7cfa      	ldrb	r2, [r7, #19]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	701a      	strb	r2, [r3, #0]
    if (h)   *h   = t.Hours;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <rtc_get_datetime+0x5a>
 800482c:	7d3a      	ldrb	r2, [r7, #20]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	701a      	strb	r2, [r3, #0]
    if (min) *min = t.Minutes;
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <rtc_get_datetime+0x66>
 8004838:	7d7a      	ldrb	r2, [r7, #21]
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	701a      	strb	r2, [r3, #0]
}
 800483e:	bf00      	nop
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000130 	.word	0x20000130

0800484c <rtc_set_datetime>:

static HAL_StatusTypeDef rtc_set_datetime(uint8_t d, uint8_t m, uint8_t y,
                                          uint8_t h, uint8_t min)
{
 800484c:	b590      	push	{r4, r7, lr}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	4604      	mov	r4, r0
 8004854:	4608      	mov	r0, r1
 8004856:	4611      	mov	r1, r2
 8004858:	461a      	mov	r2, r3
 800485a:	4623      	mov	r3, r4
 800485c:	71fb      	strb	r3, [r7, #7]
 800485e:	4603      	mov	r3, r0
 8004860:	71bb      	strb	r3, [r7, #6]
 8004862:	460b      	mov	r3, r1
 8004864:	717b      	strb	r3, [r7, #5]
 8004866:	4613      	mov	r3, r2
 8004868:	713b      	strb	r3, [r7, #4]
    if (m < 1 || m > 12)  return HAL_ERROR;
 800486a:	79bb      	ldrb	r3, [r7, #6]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <rtc_set_datetime+0x2a>
 8004870:	79bb      	ldrb	r3, [r7, #6]
 8004872:	2b0c      	cmp	r3, #12
 8004874:	d901      	bls.n	800487a <rtc_set_datetime+0x2e>
 8004876:	2301      	movs	r3, #1
 8004878:	e043      	b.n	8004902 <rtc_set_datetime+0xb6>
    if (d < 1 || d > 31)  return HAL_ERROR;
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <rtc_set_datetime+0x3a>
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	2b1f      	cmp	r3, #31
 8004884:	d901      	bls.n	800488a <rtc_set_datetime+0x3e>
 8004886:	2301      	movs	r3, #1
 8004888:	e03b      	b.n	8004902 <rtc_set_datetime+0xb6>
    if (h > 23)           return HAL_ERROR;
 800488a:	793b      	ldrb	r3, [r7, #4]
 800488c:	2b17      	cmp	r3, #23
 800488e:	d901      	bls.n	8004894 <rtc_set_datetime+0x48>
 8004890:	2301      	movs	r3, #1
 8004892:	e036      	b.n	8004902 <rtc_set_datetime+0xb6>
    if (min > 59)         return HAL_ERROR;
 8004894:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004898:	2b3b      	cmp	r3, #59	@ 0x3b
 800489a:	d901      	bls.n	80048a0 <rtc_set_datetime+0x54>
 800489c:	2301      	movs	r3, #1
 800489e:	e030      	b.n	8004902 <rtc_set_datetime+0xb6>

    RTC_TimeTypeDef t = {0};
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	2100      	movs	r1, #0
 80048a6:	460a      	mov	r2, r1
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	460a      	mov	r2, r1
 80048ac:	709a      	strb	r2, [r3, #2]
    RTC_DateTypeDef dt = {0};
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]

    t.Hours   = h;
 80048b2:	793b      	ldrb	r3, [r7, #4]
 80048b4:	733b      	strb	r3, [r7, #12]
    t.Minutes = min;
 80048b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048ba:	737b      	strb	r3, [r7, #13]
    t.Seconds = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	73bb      	strb	r3, [r7, #14]

    dt.WeekDay = RTC_WEEKDAY_MONDAY;
 80048c0:	2301      	movs	r3, #1
 80048c2:	723b      	strb	r3, [r7, #8]
    dt.Month   = m;
 80048c4:	79bb      	ldrb	r3, [r7, #6]
 80048c6:	727b      	strb	r3, [r7, #9]
    dt.Date    = d;
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	72bb      	strb	r3, [r7, #10]
    dt.Year    = y;  
 80048cc:	797b      	ldrb	r3, [r7, #5]
 80048ce:	72fb      	strb	r3, [r7, #11]

    if (HAL_RTC_SetTime(&hrtc, &t, RTC_FORMAT_BIN) != HAL_OK) return HAL_ERROR;
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	2200      	movs	r2, #0
 80048d6:	4619      	mov	r1, r3
 80048d8:	480c      	ldr	r0, [pc, #48]	@ (800490c <rtc_set_datetime+0xc0>)
 80048da:	f7fe fb43 	bl	8002f64 <HAL_RTC_SetTime>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <rtc_set_datetime+0x9c>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e00c      	b.n	8004902 <rtc_set_datetime+0xb6>
    if (HAL_RTC_SetDate(&hrtc, &dt, RTC_FORMAT_BIN) != HAL_OK) return HAL_ERROR;
 80048e8:	f107 0308 	add.w	r3, r7, #8
 80048ec:	2200      	movs	r2, #0
 80048ee:	4619      	mov	r1, r3
 80048f0:	4806      	ldr	r0, [pc, #24]	@ (800490c <rtc_set_datetime+0xc0>)
 80048f2:	f7fe fca7 	bl	8003244 <HAL_RTC_SetDate>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <rtc_set_datetime+0xb4>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <rtc_set_datetime+0xb6>
    return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bd90      	pop	{r4, r7, pc}
 800490a:	bf00      	nop
 800490c:	20000130 	.word	0x20000130

08004910 <rtc_mark_initialized>:

static inline void rtc_mark_initialized(void) {
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8004914:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8004918:	2101      	movs	r1, #1
 800491a:	4802      	ldr	r0, [pc, #8]	@ (8004924 <rtc_mark_initialized+0x14>)
 800491c:	f7ff f83e 	bl	800399c <HAL_RTCEx_BKUPWrite>
}
 8004920:	bf00      	nop
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000130 	.word	0x20000130

08004928 <findVehicle>:

static int findVehicle(const char* plate) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MAX_VEHICLES; i++) {
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e01f      	b.n	8004976 <findVehicle+0x4e>
        if (vehicles[i].occupied && strcmp(vehicles[i].plate, plate) == 0) {
 8004936:	4914      	ldr	r1, [pc, #80]	@ (8004988 <findVehicle+0x60>)
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4413      	add	r3, r2
 8004944:	440b      	add	r3, r1
 8004946:	330a      	adds	r3, #10
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d010      	beq.n	8004970 <findVehicle+0x48>
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4413      	add	r3, r2
 800495a:	4a0b      	ldr	r2, [pc, #44]	@ (8004988 <findVehicle+0x60>)
 800495c:	4413      	add	r3, r2
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fb fbf3 	bl	800014c <strcmp>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <findVehicle+0x48>
            return i;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	e007      	b.n	8004980 <findVehicle+0x58>
    for (int i = 0; i < MAX_VEHICLES; i++) {
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3301      	adds	r3, #1
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b31      	cmp	r3, #49	@ 0x31
 800497a:	dddc      	ble.n	8004936 <findVehicle+0xe>
        }
    }
    return -1;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000230 	.word	0x20000230

0800498c <addVehicle>:

static bool addVehicle(const char* plate, uint8_t d, uint8_t m, uint8_t y,
                       uint8_t h, uint8_t min, vehicleType_t category) {
 800498c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498e:	b08b      	sub	sp, #44	@ 0x2c
 8004990:	af06      	add	r7, sp, #24
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	4603      	mov	r3, r0
 800499c:	70fb      	strb	r3, [r7, #3]
 800499e:	460b      	mov	r3, r1
 80049a0:	70bb      	strb	r3, [r7, #2]
 80049a2:	4613      	mov	r3, r2
 80049a4:	707b      	strb	r3, [r7, #1]
    for (int i = 0; i < MAX_VEHICLES; i++) {
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	e090      	b.n	8004ace <addVehicle+0x142>
        if (!vehicles[i].occupied) {
 80049ac:	4955      	ldr	r1, [pc, #340]	@ (8004b04 <addVehicle+0x178>)
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	4413      	add	r3, r2
 80049ba:	440b      	add	r3, r1
 80049bc:	330a      	adds	r3, #10
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f083 0301 	eor.w	r3, r3, #1
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d07e      	beq.n	8004ac8 <addVehicle+0x13c>
            strcpy(vehicles[i].plate, plate);
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4413      	add	r3, r2
 80049d6:	4a4b      	ldr	r2, [pc, #300]	@ (8004b04 <addVehicle+0x178>)
 80049d8:	4413      	add	r3, r2
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4618      	mov	r0, r3
 80049de:	f003 f9a0 	bl	8007d22 <strcpy>
            vehicles[i].day = d; vehicles[i].month = m; vehicles[i].year = y;
 80049e2:	4948      	ldr	r1, [pc, #288]	@ (8004b04 <addVehicle+0x178>)
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4413      	add	r3, r2
 80049f0:	440b      	add	r3, r1
 80049f2:	3304      	adds	r3, #4
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	701a      	strb	r2, [r3, #0]
 80049f8:	4942      	ldr	r1, [pc, #264]	@ (8004b04 <addVehicle+0x178>)
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4413      	add	r3, r2
 8004a06:	440b      	add	r3, r1
 8004a08:	3305      	adds	r3, #5
 8004a0a:	78ba      	ldrb	r2, [r7, #2]
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	493d      	ldr	r1, [pc, #244]	@ (8004b04 <addVehicle+0x178>)
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3306      	adds	r3, #6
 8004a20:	787a      	ldrb	r2, [r7, #1]
 8004a22:	701a      	strb	r2, [r3, #0]
            vehicles[i].hour= h; vehicles[i].minute= min;
 8004a24:	4937      	ldr	r1, [pc, #220]	@ (8004b04 <addVehicle+0x178>)
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	4413      	add	r3, r2
 8004a32:	440b      	add	r3, r1
 8004a34:	3307      	adds	r3, #7
 8004a36:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	4931      	ldr	r1, [pc, #196]	@ (8004b04 <addVehicle+0x178>)
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	4413      	add	r3, r2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004a52:	701a      	strb	r2, [r3, #0]
            vehicles[i].category = category;
 8004a54:	492b      	ldr	r1, [pc, #172]	@ (8004b04 <addVehicle+0x178>)
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4413      	add	r3, r2
 8004a62:	440b      	add	r3, r1
 8004a64:	3309      	adds	r3, #9
 8004a66:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004a6a:	701a      	strb	r2, [r3, #0]
            vehicles[i].occupied = true;
 8004a6c:	4925      	ldr	r1, [pc, #148]	@ (8004b04 <addVehicle+0x178>)
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	4413      	add	r3, r2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	330a      	adds	r3, #10
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
            LOGGER_LOG("Ingreso: %s - %02u/%02u/%02u %02u:%02u Tipo:%d\r\n",
 8004a82:	b672      	cpsid	i
 8004a84:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <addVehicle+0x17c>)
 8004a86:	681e      	ldr	r6, [r3, #0]
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	78ba      	ldrb	r2, [r7, #2]
 8004a8c:	7879      	ldrb	r1, [r7, #1]
 8004a8e:	f897 0028 	ldrb.w	r0, [r7, #40]	@ 0x28
 8004a92:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8004a96:	f897 5030 	ldrb.w	r5, [r7, #48]	@ 0x30
 8004a9a:	9505      	str	r5, [sp, #20]
 8004a9c:	9404      	str	r4, [sp, #16]
 8004a9e:	9003      	str	r0, [sp, #12]
 8004aa0:	9102      	str	r1, [sp, #8]
 8004aa2:	9201      	str	r2, [sp, #4]
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <addVehicle+0x180>)
 8004aaa:	213f      	movs	r1, #63	@ 0x3f
 8004aac:	4630      	mov	r0, r6
 8004aae:	f003 f833 	bl	8007b18 <sniprintf>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4a16      	ldr	r2, [pc, #88]	@ (8004b10 <addVehicle+0x184>)
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b13      	ldr	r3, [pc, #76]	@ (8004b08 <addVehicle+0x17c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fd89 	bl	80045d4 <logger_log_print_>
 8004ac2:	b662      	cpsie	i
                       plate, d, m, y, h, min, category);
            return true;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e018      	b.n	8004afa <addVehicle+0x16e>
    for (int i = 0; i < MAX_VEHICLES; i++) {
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b31      	cmp	r3, #49	@ 0x31
 8004ad2:	f77f af6b 	ble.w	80049ac <addVehicle+0x20>
        }
    }
    LOGGER_LOG("ERROR: No hay espacio para más vehículos\r\n");
 8004ad6:	b672      	cpsid	i
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <addVehicle+0x17c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b14 <addVehicle+0x188>)
 8004ade:	213f      	movs	r1, #63	@ 0x3f
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f003 f819 	bl	8007b18 <sniprintf>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4a09      	ldr	r2, [pc, #36]	@ (8004b10 <addVehicle+0x184>)
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <addVehicle+0x17c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fd6f 	bl	80045d4 <logger_log_print_>
 8004af6:	b662      	cpsie	i
    return false;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000230 	.word	0x20000230
 8004b08:	08009200 	.word	0x08009200
 8004b0c:	08008ba4 	.word	0x08008ba4
 8004b10:	20000204 	.word	0x20000204
 8004b14:	08008bd8 	.word	0x08008bd8

08004b18 <elapsedMinutes>:

static uint32_t elapsedMinutes(uint8_t sd, uint8_t sm, uint8_t sy,
                               uint8_t sh, uint8_t smin,
                               uint8_t ed, uint8_t em, uint8_t ey,
                               uint8_t eh, uint8_t emin) {
 8004b18:	b490      	push	{r4, r7}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4623      	mov	r3, r4
 8004b28:	71fb      	strb	r3, [r7, #7]
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71bb      	strb	r3, [r7, #6]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	717b      	strb	r3, [r7, #5]
 8004b32:	4613      	mov	r3, r2
 8004b34:	713b      	strb	r3, [r7, #4]
    int si = (sd * 24 * 60) + (sh * 60) + smin;
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8004b3c:	fb02 f103 	mul.w	r1, r2, r3
 8004b40:	793a      	ldrb	r2, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	18ca      	adds	r2, r1, r3
 8004b4c:	7e3b      	ldrb	r3, [r7, #24]
 8004b4e:	4413      	add	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
    int ei = (ed * 24 * 60) + (eh * 60) + emin;
 8004b52:	7f3b      	ldrb	r3, [r7, #28]
 8004b54:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8004b58:	fb02 f103 	mul.w	r1, r2, r3
 8004b5c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004b60:	4613      	mov	r3, r2
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	18ca      	adds	r2, r1, r3
 8004b6a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004b6e:	4413      	add	r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]
    return (uint32_t)(ei - si);
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc90      	pop	{r4, r7}
 8004b80:	4770      	bx	lr
	...

08004b84 <countVehicles>:

static uint8_t countVehicles(void) {
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
    uint8_t cnt = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < MAX_VEHICLES; i++) if (vehicles[i].occupied) cnt++;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	603b      	str	r3, [r7, #0]
 8004b92:	e011      	b.n	8004bb8 <countVehicles+0x34>
 8004b94:	490d      	ldr	r1, [pc, #52]	@ (8004bcc <countVehicles+0x48>)
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	330a      	adds	r3, #10
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <countVehicles+0x2e>
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	71fb      	strb	r3, [r7, #7]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b31      	cmp	r3, #49	@ 0x31
 8004bbc:	ddea      	ble.n	8004b94 <countVehicles+0x10>
    return cnt;
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000230 	.word	0x20000230

08004bd0 <showVehicleIndex>:

static void showVehicleIndex(int idx) {
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b089      	sub	sp, #36	@ 0x24
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	6078      	str	r0, [r7, #4]
    if (idx >= 0 && idx < MAX_VEHICLES && vehicles[idx].occupied) {
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db6e      	blt.n	8004cbc <showVehicleIndex+0xec>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b31      	cmp	r3, #49	@ 0x31
 8004be2:	dc6b      	bgt.n	8004cbc <showVehicleIndex+0xec>
 8004be4:	493c      	ldr	r1, [pc, #240]	@ (8004cd8 <showVehicleIndex+0x108>)
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	4413      	add	r3, r2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	330a      	adds	r3, #10
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05f      	beq.n	8004cbc <showVehicleIndex+0xec>
        displayClearFull();
 8004bfc:	f7ff fa54 	bl	80040a8 <displayClearFull>
        displayCharPositionWrite(0, 0);
 8004c00:	2100      	movs	r1, #0
 8004c02:	2000      	movs	r0, #0
 8004c04:	f7ff f98e 	bl	8003f24 <displayCharPositionWrite>
        switch (vehicles[idx].category) {
 8004c08:	4933      	ldr	r1, [pc, #204]	@ (8004cd8 <showVehicleIndex+0x108>)
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	440b      	add	r3, r1
 8004c18:	3309      	adds	r3, #9
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d81a      	bhi.n	8004c58 <showVehicleIndex+0x88>
 8004c22:	a201      	add	r2, pc, #4	@ (adr r2, 8004c28 <showVehicleIndex+0x58>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c39 	.word	0x08004c39
 8004c2c:	08004c41 	.word	0x08004c41
 8004c30:	08004c49 	.word	0x08004c49
 8004c34:	08004c51 	.word	0x08004c51
            case BIKE:        displayStringWrite("Bicicleta "); break;
 8004c38:	4828      	ldr	r0, [pc, #160]	@ (8004cdc <showVehicleIndex+0x10c>)
 8004c3a:	f7ff f9e5 	bl	8004008 <displayStringWrite>
 8004c3e:	e00b      	b.n	8004c58 <showVehicleIndex+0x88>
            case MOTORCYCLE:  displayStringWrite("Moto ");      break;
 8004c40:	4827      	ldr	r0, [pc, #156]	@ (8004ce0 <showVehicleIndex+0x110>)
 8004c42:	f7ff f9e1 	bl	8004008 <displayStringWrite>
 8004c46:	e007      	b.n	8004c58 <showVehicleIndex+0x88>
            case CAR:         displayStringWrite("Auto ");      break;
 8004c48:	4826      	ldr	r0, [pc, #152]	@ (8004ce4 <showVehicleIndex+0x114>)
 8004c4a:	f7ff f9dd 	bl	8004008 <displayStringWrite>
 8004c4e:	e003      	b.n	8004c58 <showVehicleIndex+0x88>
            case TRUCK:       displayStringWrite("Camioneta "); break;
 8004c50:	4825      	ldr	r0, [pc, #148]	@ (8004ce8 <showVehicleIndex+0x118>)
 8004c52:	f7ff f9d9 	bl	8004008 <displayStringWrite>
 8004c56:	bf00      	nop
        }
        displayStringWrite(vehicles[idx].plate);
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	4413      	add	r3, r2
 8004c64:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd8 <showVehicleIndex+0x108>)
 8004c66:	4413      	add	r3, r2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff f9cd 	bl	8004008 <displayStringWrite>

        displayCharPositionWrite(0, 1);
 8004c6e:	2101      	movs	r1, #1
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7ff f957 	bl	8003f24 <displayCharPositionWrite>
        char horaStr[16];
        snprintf(horaStr, sizeof(horaStr), "Hora: %02u:%02u",
                 vehicles[idx].hour, vehicles[idx].minute);
 8004c76:	4918      	ldr	r1, [pc, #96]	@ (8004cd8 <showVehicleIndex+0x108>)
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4413      	add	r3, r2
 8004c84:	440b      	add	r3, r1
 8004c86:	3307      	adds	r3, #7
 8004c88:	781b      	ldrb	r3, [r3, #0]
        snprintf(horaStr, sizeof(horaStr), "Hora: %02u:%02u",
 8004c8a:	461c      	mov	r4, r3
                 vehicles[idx].hour, vehicles[idx].minute);
 8004c8c:	4912      	ldr	r1, [pc, #72]	@ (8004cd8 <showVehicleIndex+0x108>)
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	4413      	add	r3, r2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	781b      	ldrb	r3, [r3, #0]
        snprintf(horaStr, sizeof(horaStr), "Hora: %02u:%02u",
 8004ca0:	f107 0008 	add.w	r0, r7, #8
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	4a10      	ldr	r2, [pc, #64]	@ (8004cec <showVehicleIndex+0x11c>)
 8004caa:	2110      	movs	r1, #16
 8004cac:	f002 ff34 	bl	8007b18 <sniprintf>
        displayStringWrite(horaStr);
 8004cb0:	f107 0308 	add.w	r3, r7, #8
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff f9a7 	bl	8004008 <displayStringWrite>
    if (idx >= 0 && idx < MAX_VEHICLES && vehicles[idx].occupied) {
 8004cba:	e009      	b.n	8004cd0 <showVehicleIndex+0x100>
    } else {
        displayClearFull();
 8004cbc:	f7ff f9f4 	bl	80040a8 <displayClearFull>
        displayCharPositionWrite(0, 0);
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7ff f92e 	bl	8003f24 <displayCharPositionWrite>
        displayStringWrite("No hay vehiculos");
 8004cc8:	4809      	ldr	r0, [pc, #36]	@ (8004cf0 <showVehicleIndex+0x120>)
 8004cca:	f7ff f99d 	bl	8004008 <displayStringWrite>
    }
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd90      	pop	{r4, r7, pc}
 8004cd8:	20000230 	.word	0x20000230
 8004cdc:	08008c08 	.word	0x08008c08
 8004ce0:	08008c14 	.word	0x08008c14
 8004ce4:	08008c1c 	.word	0x08008c1c
 8004ce8:	08008c24 	.word	0x08008c24
 8004cec:	08008c30 	.word	0x08008c30
 8004cf0:	08008c40 	.word	0x08008c40

08004cf4 <exitlog_read_hdr>:
#define EXIT_MAGIC_L  'L'
#define EXIT_VERSION  1

static exit_hdr_t g_exit_hdr;

static HAL_StatusTypeDef exitlog_read_hdr(void){
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
    return EEPROM_Read(EXIT_HDR_ADDR, (uint8_t*)&g_exit_hdr, sizeof(g_exit_hdr));
 8004cf8:	2206      	movs	r2, #6
 8004cfa:	4904      	ldr	r1, [pc, #16]	@ (8004d0c <exitlog_read_hdr+0x18>)
 8004cfc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004d00:	f7ff fb9e 	bl	8004440 <EEPROM_Read>
 8004d04:	4603      	mov	r3, r0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200004b0 	.word	0x200004b0

08004d10 <exitlog_write_hdr>:
static HAL_StatusTypeDef exitlog_write_hdr(void){
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
    return EEPROM_Write(EXIT_HDR_ADDR, (uint8_t*)&g_exit_hdr, sizeof(g_exit_hdr));
 8004d14:	2206      	movs	r2, #6
 8004d16:	4904      	ldr	r1, [pc, #16]	@ (8004d28 <exitlog_write_hdr+0x18>)
 8004d18:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004d1c:	f7ff fbdc 	bl	80044d8 <EEPROM_Write>
 8004d20:	4603      	mov	r3, r0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	200004b0 	.word	0x200004b0

08004d2c <exitlog_init>:
static HAL_StatusTypeDef exitlog_init(void){
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef st = EEPROM_Init();
 8004d32:	f7ff fb5a 	bl	80043ea <EEPROM_Init>
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
    if (st != HAL_OK) return st;
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <exitlog_init+0x18>
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	e028      	b.n	8004d96 <exitlog_init+0x6a>

    st = exitlog_read_hdr();
 8004d44:	f7ff ffd6 	bl	8004cf4 <exitlog_read_hdr>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	71fb      	strb	r3, [r7, #7]
    if (st != HAL_OK ||
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10b      	bne.n	8004d6a <exitlog_init+0x3e>
        g_exit_hdr.magicH != EXIT_MAGIC_H ||
 8004d52:	4b13      	ldr	r3, [pc, #76]	@ (8004da0 <exitlog_init+0x74>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
    if (st != HAL_OK ||
 8004d56:	2b58      	cmp	r3, #88	@ 0x58
 8004d58:	d107      	bne.n	8004d6a <exitlog_init+0x3e>
        g_exit_hdr.magicL != EXIT_MAGIC_L ||
 8004d5a:	4b11      	ldr	r3, [pc, #68]	@ (8004da0 <exitlog_init+0x74>)
 8004d5c:	785b      	ldrb	r3, [r3, #1]
        g_exit_hdr.magicH != EXIT_MAGIC_H ||
 8004d5e:	2b4c      	cmp	r3, #76	@ 0x4c
 8004d60:	d103      	bne.n	8004d6a <exitlog_init+0x3e>
        g_exit_hdr.version != EXIT_VERSION)
 8004d62:	4b0f      	ldr	r3, [pc, #60]	@ (8004da0 <exitlog_init+0x74>)
 8004d64:	789b      	ldrb	r3, [r3, #2]
        g_exit_hdr.magicL != EXIT_MAGIC_L ||
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d014      	beq.n	8004d94 <exitlog_init+0x68>
    {
        g_exit_hdr.magicH = EXIT_MAGIC_H;
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004da0 <exitlog_init+0x74>)
 8004d6c:	2258      	movs	r2, #88	@ 0x58
 8004d6e:	701a      	strb	r2, [r3, #0]
        g_exit_hdr.magicL = EXIT_MAGIC_L;
 8004d70:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <exitlog_init+0x74>)
 8004d72:	224c      	movs	r2, #76	@ 0x4c
 8004d74:	705a      	strb	r2, [r3, #1]
        g_exit_hdr.version= EXIT_VERSION;
 8004d76:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <exitlog_init+0x74>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	709a      	strb	r2, [r3, #2]
        g_exit_hdr.count  = 0;
 8004d7c:	4b08      	ldr	r3, [pc, #32]	@ (8004da0 <exitlog_init+0x74>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	70da      	strb	r2, [r3, #3]
 8004d82:	2200      	movs	r2, #0
 8004d84:	711a      	strb	r2, [r3, #4]
        g_exit_hdr.reserved = 0xFF;
 8004d86:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <exitlog_init+0x74>)
 8004d88:	22ff      	movs	r2, #255	@ 0xff
 8004d8a:	715a      	strb	r2, [r3, #5]
        st = exitlog_write_hdr();
 8004d8c:	f7ff ffc0 	bl	8004d10 <exitlog_write_hdr>
 8004d90:	4603      	mov	r3, r0
 8004d92:	71fb      	strb	r3, [r7, #7]
    }
    return st;
 8004d94:	79fb      	ldrb	r3, [r7, #7]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	200004b0 	.word	0x200004b0

08004da4 <exitlog_append>:
static HAL_StatusTypeDef exitlog_append(const exit_log_rec_t* rec){
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
    if (!rec) return HAL_ERROR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <exitlog_append+0x12>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e02d      	b.n	8004e12 <exitlog_append+0x6e>
    uint32_t next = EXIT_BASE_ADDR + (uint32_t)g_exit_hdr.count * sizeof(exit_log_rec_t);
 8004db6:	4b19      	ldr	r3, [pc, #100]	@ (8004e1c <exitlog_append+0x78>)
 8004db8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8004dce:	60fb      	str	r3, [r7, #12]
    if (next + sizeof(exit_log_rec_t) > EEPROM_SIZE_BYTES) {
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3313      	adds	r3, #19
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd8:	d901      	bls.n	8004dde <exitlog_append+0x3a>
        return HAL_ERROR; 
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e019      	b.n	8004e12 <exitlog_append+0x6e>
    }
    HAL_StatusTypeDef st = EEPROM_Write((uint16_t)next, (const uint8_t*)rec, sizeof(exit_log_rec_t));
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2213      	movs	r2, #19
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fb76 	bl	80044d8 <EEPROM_Write>
 8004dec:	4603      	mov	r3, r0
 8004dee:	72fb      	strb	r3, [r7, #11]
    if (st != HAL_OK) return st;
 8004df0:	7afb      	ldrb	r3, [r7, #11]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <exitlog_append+0x56>
 8004df6:	7afb      	ldrb	r3, [r7, #11]
 8004df8:	e00b      	b.n	8004e12 <exitlog_append+0x6e>
    g_exit_hdr.count++;
 8004dfa:	4b08      	ldr	r3, [pc, #32]	@ (8004e1c <exitlog_append+0x78>)
 8004dfc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3301      	adds	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <exitlog_append+0x78>)
 8004e08:	f8a3 2003 	strh.w	r2, [r3, #3]
    return exitlog_write_hdr();
 8004e0c:	f7ff ff80 	bl	8004d10 <exitlog_write_hdr>
 8004e10:	4603      	mov	r3, r0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200004b0 	.word	0x200004b0

08004e20 <load_cb.0>:
    displayInit( DISPLAY_CONNECTION_GPIO_4BITS );

    g_task_menu_tick_cnt = G_TASK_MEN_TICK_CNT_INI;

    if (storage_init() == HAL_OK) {
        bool load_cb(const storage_record_t* r, uint16_t idx){
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	817b      	strh	r3, [r7, #10]
 8004e2c:	f8c7 c004 	str.w	ip, [r7, #4]
            (void)idx;
            for (int i=0;i<MAX_VEHICLES;i++){
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	e083      	b.n	8004f3e <load_cb.0+0x11e>
                if (!vehicles[i].occupied){
 8004e36:	4946      	ldr	r1, [pc, #280]	@ (8004f50 <load_cb.0+0x130>)
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	440b      	add	r3, r1
 8004e46:	330a      	adds	r3, #10
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f083 0301 	eor.w	r3, r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d071      	beq.n	8004f38 <load_cb.0+0x118>
                    strncpy(vehicles[i].plate, r->patente, sizeof(vehicles[i].plate)-1);
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	4413      	add	r3, r2
 8004e60:	4a3b      	ldr	r2, [pc, #236]	@ (8004f50 <load_cb.0+0x130>)
 8004e62:	4413      	add	r3, r2
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	2203      	movs	r2, #3
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f002 fed4 	bl	8007c16 <strncpy>
                    vehicles[i].plate[sizeof(vehicles[i].plate)-1]='\0';
 8004e6e:	4938      	ldr	r1, [pc, #224]	@ (8004f50 <load_cb.0+0x130>)
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4413      	add	r3, r2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3303      	adds	r3, #3
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
                    vehicles[i].day=r->day;   vehicles[i].month=r->month; vehicles[i].year=r->year;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	7918      	ldrb	r0, [r3, #4]
 8004e88:	4931      	ldr	r1, [pc, #196]	@ (8004f50 <load_cb.0+0x130>)
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	4413      	add	r3, r2
 8004e96:	440b      	add	r3, r1
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	7958      	ldrb	r0, [r3, #5]
 8004ea2:	492b      	ldr	r1, [pc, #172]	@ (8004f50 <load_cb.0+0x130>)
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	4413      	add	r3, r2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3305      	adds	r3, #5
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	7998      	ldrb	r0, [r3, #6]
 8004ebc:	4924      	ldr	r1, [pc, #144]	@ (8004f50 <load_cb.0+0x130>)
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	440b      	add	r3, r1
 8004ecc:	3306      	adds	r3, #6
 8004ece:	4602      	mov	r2, r0
 8004ed0:	701a      	strb	r2, [r3, #0]
                    vehicles[i].hour=r->hora; vehicles[i].minute=r->minuto;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	79d8      	ldrb	r0, [r3, #7]
 8004ed6:	491e      	ldr	r1, [pc, #120]	@ (8004f50 <load_cb.0+0x130>)
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4413      	add	r3, r2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3307      	adds	r3, #7
 8004ee8:	4602      	mov	r2, r0
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	7a18      	ldrb	r0, [r3, #8]
 8004ef0:	4917      	ldr	r1, [pc, #92]	@ (8004f50 <load_cb.0+0x130>)
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	440b      	add	r3, r1
 8004f00:	3308      	adds	r3, #8
 8004f02:	4602      	mov	r2, r0
 8004f04:	701a      	strb	r2, [r3, #0]
                    vehicles[i].category=(vehicleType_t)r->categoria;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	7a58      	ldrb	r0, [r3, #9]
 8004f0a:	4911      	ldr	r1, [pc, #68]	@ (8004f50 <load_cb.0+0x130>)
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	440b      	add	r3, r1
 8004f1a:	3309      	adds	r3, #9
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	701a      	strb	r2, [r3, #0]
                    vehicles[i].occupied=true;
 8004f20:	490b      	ldr	r1, [pc, #44]	@ (8004f50 <load_cb.0+0x130>)
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	440b      	add	r3, r1
 8004f30:	330a      	adds	r3, #10
 8004f32:	2201      	movs	r2, #1
 8004f34:	701a      	strb	r2, [r3, #0]
                    break;
 8004f36:	e006      	b.n	8004f46 <load_cb.0+0x126>
            for (int i=0;i<MAX_VEHICLES;i++){
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b31      	cmp	r3, #49	@ 0x31
 8004f42:	f77f af78 	ble.w	8004e36 <load_cb.0+0x16>
                }
            }
            return true;
 8004f46:	2301      	movs	r3, #1
        };
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000230 	.word	0x20000230

08004f54 <task_menu_init>:
void task_menu_init(void *parameters){
 8004f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f56:	b08d      	sub	sp, #52	@ 0x34
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	f107 040c 	add.w	r4, r7, #12
 8004f66:	f107 050c 	add.w	r5, r7, #12
 8004f6a:	4b7e      	ldr	r3, [pc, #504]	@ (8005164 <task_menu_init+0x210>)
 8004f6c:	4626      	mov	r6, r4
 8004f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f70:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8004f74:	60a5      	str	r5, [r4, #8]
 8004f76:	4b7c      	ldr	r3, [pc, #496]	@ (8005168 <task_menu_init+0x214>)
 8004f78:	60e3      	str	r3, [r4, #12]
    LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_menu_init), p_task_menu);
 8004f7a:	b672      	cpsid	i
 8004f7c:	4b7b      	ldr	r3, [pc, #492]	@ (800516c <task_menu_init+0x218>)
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	4b7b      	ldr	r3, [pc, #492]	@ (8005170 <task_menu_init+0x21c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	4b7b      	ldr	r3, [pc, #492]	@ (8005174 <task_menu_init+0x220>)
 8004f88:	4a7b      	ldr	r2, [pc, #492]	@ (8005178 <task_menu_init+0x224>)
 8004f8a:	213f      	movs	r1, #63	@ 0x3f
 8004f8c:	f002 fdc4 	bl	8007b18 <sniprintf>
 8004f90:	4603      	mov	r3, r0
 8004f92:	4a7a      	ldr	r2, [pc, #488]	@ (800517c <task_menu_init+0x228>)
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	4b75      	ldr	r3, [pc, #468]	@ (800516c <task_menu_init+0x218>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff fb1a 	bl	80045d4 <logger_log_print_>
 8004fa0:	b662      	cpsie	i
    LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_menu), p_task_menu_);
 8004fa2:	b672      	cpsid	i
 8004fa4:	4b71      	ldr	r3, [pc, #452]	@ (800516c <task_menu_init+0x218>)
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	4b75      	ldr	r3, [pc, #468]	@ (8005180 <task_menu_init+0x22c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	4b75      	ldr	r3, [pc, #468]	@ (8005184 <task_menu_init+0x230>)
 8004fb0:	4a75      	ldr	r2, [pc, #468]	@ (8005188 <task_menu_init+0x234>)
 8004fb2:	213f      	movs	r1, #63	@ 0x3f
 8004fb4:	f002 fdb0 	bl	8007b18 <sniprintf>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4a70      	ldr	r2, [pc, #448]	@ (800517c <task_menu_init+0x228>)
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4b6b      	ldr	r3, [pc, #428]	@ (800516c <task_menu_init+0x218>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fb06 	bl	80045d4 <logger_log_print_>
 8004fc8:	b662      	cpsie	i
    g_task_menu_cnt = G_TASK_MEN_CNT_INI;
 8004fca:	4b70      	ldr	r3, [pc, #448]	@ (800518c <task_menu_init+0x238>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
    LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_menu_cnt), g_task_menu_cnt);
 8004fd0:	b672      	cpsid	i
 8004fd2:	4b66      	ldr	r3, [pc, #408]	@ (800516c <task_menu_init+0x218>)
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800518c <task_menu_init+0x238>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8005190 <task_menu_init+0x23c>)
 8004fde:	4a6d      	ldr	r2, [pc, #436]	@ (8005194 <task_menu_init+0x240>)
 8004fe0:	213f      	movs	r1, #63	@ 0x3f
 8004fe2:	f002 fd99 	bl	8007b18 <sniprintf>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4a64      	ldr	r2, [pc, #400]	@ (800517c <task_menu_init+0x228>)
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	4b5f      	ldr	r3, [pc, #380]	@ (800516c <task_menu_init+0x218>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff faef 	bl	80045d4 <logger_log_print_>
 8004ff6:	b662      	cpsie	i
    init_queue_event_task_menu();
 8004ff8:	f001 fe0c 	bl	8006c14 <init_queue_event_task_menu>
    p_task_menu_dta = &task_menu_dta;
 8004ffc:	4b66      	ldr	r3, [pc, #408]	@ (8005198 <task_menu_init+0x244>)
 8004ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    state = p_task_menu_dta->state;
 8005000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005002:	7a1b      	ldrb	r3, [r3, #8]
 8005004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8005008:	b672      	cpsid	i
 800500a:	4b58      	ldr	r3, [pc, #352]	@ (800516c <task_menu_init+0x218>)
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4b61      	ldr	r3, [pc, #388]	@ (800519c <task_menu_init+0x248>)
 8005016:	4a62      	ldr	r2, [pc, #392]	@ (80051a0 <task_menu_init+0x24c>)
 8005018:	213f      	movs	r1, #63	@ 0x3f
 800501a:	f002 fd7d 	bl	8007b18 <sniprintf>
 800501e:	4603      	mov	r3, r0
 8005020:	4a56      	ldr	r2, [pc, #344]	@ (800517c <task_menu_init+0x228>)
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	4b51      	ldr	r3, [pc, #324]	@ (800516c <task_menu_init+0x218>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fad3 	bl	80045d4 <logger_log_print_>
 800502e:	b662      	cpsie	i
    event = p_task_menu_dta->event;
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	7a5b      	ldrb	r3, [r3, #9]
 8005034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8005038:	b672      	cpsid	i
 800503a:	4b4c      	ldr	r3, [pc, #304]	@ (800516c <task_menu_init+0x218>)
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	4b57      	ldr	r3, [pc, #348]	@ (80051a4 <task_menu_init+0x250>)
 8005046:	4a56      	ldr	r2, [pc, #344]	@ (80051a0 <task_menu_init+0x24c>)
 8005048:	213f      	movs	r1, #63	@ 0x3f
 800504a:	f002 fd65 	bl	8007b18 <sniprintf>
 800504e:	4603      	mov	r3, r0
 8005050:	4a4a      	ldr	r2, [pc, #296]	@ (800517c <task_menu_init+0x228>)
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b45      	ldr	r3, [pc, #276]	@ (800516c <task_menu_init+0x218>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fabb 	bl	80045d4 <logger_log_print_>
 800505e:	b662      	cpsie	i
    b_event = p_task_menu_dta->flag;
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	7a9b      	ldrb	r3, [r3, #10]
 8005064:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8005068:	b672      	cpsid	i
 800506a:	4b40      	ldr	r3, [pc, #256]	@ (800516c <task_menu_init+0x218>)
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <task_menu_init+0x126>
 8005076:	4b4c      	ldr	r3, [pc, #304]	@ (80051a8 <task_menu_init+0x254>)
 8005078:	e000      	b.n	800507c <task_menu_init+0x128>
 800507a:	4b4c      	ldr	r3, [pc, #304]	@ (80051ac <task_menu_init+0x258>)
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	4b4c      	ldr	r3, [pc, #304]	@ (80051b0 <task_menu_init+0x25c>)
 8005080:	4a4c      	ldr	r2, [pc, #304]	@ (80051b4 <task_menu_init+0x260>)
 8005082:	213f      	movs	r1, #63	@ 0x3f
 8005084:	f002 fd48 	bl	8007b18 <sniprintf>
 8005088:	4603      	mov	r3, r0
 800508a:	4a3c      	ldr	r2, [pc, #240]	@ (800517c <task_menu_init+0x228>)
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4b37      	ldr	r3, [pc, #220]	@ (800516c <task_menu_init+0x218>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fa9e 	bl	80045d4 <logger_log_print_>
 8005098:	b662      	cpsie	i
    cycle_counter_init();
 800509a:	4b47      	ldr	r3, [pc, #284]	@ (80051b8 <task_menu_init+0x264>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	4a46      	ldr	r2, [pc, #280]	@ (80051b8 <task_menu_init+0x264>)
 80050a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050a4:	60d3      	str	r3, [r2, #12]
 80050a6:	4b45      	ldr	r3, [pc, #276]	@ (80051bc <task_menu_init+0x268>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	4b43      	ldr	r3, [pc, #268]	@ (80051bc <task_menu_init+0x268>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a42      	ldr	r2, [pc, #264]	@ (80051bc <task_menu_init+0x268>)
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	6013      	str	r3, [r2, #0]
    cycle_counter_reset();
 80050b8:	4b40      	ldr	r3, [pc, #256]	@ (80051bc <task_menu_init+0x268>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	605a      	str	r2, [r3, #4]
    displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80050be:	2000      	movs	r0, #0
 80050c0:	f7fe fec8 	bl	8003e54 <displayInit>
    g_task_menu_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
 80050c4:	4b3e      	ldr	r3, [pc, #248]	@ (80051c0 <task_menu_init+0x26c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
    if (storage_init() == HAL_OK) {
 80050ca:	f7ff faaf 	bl	800462c <storage_init>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11b      	bne.n	800510c <task_menu_init+0x1b8>
        (void)storage_iterate(load_cb);
 80050d4:	f107 030c 	add.w	r3, r7, #12
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff faed 	bl	80046bc <storage_iterate>
        LOGGER_LOG("Historial ingresos: %u\r\n", storage_get_count());
 80050e2:	b672      	cpsid	i
 80050e4:	4b21      	ldr	r3, [pc, #132]	@ (800516c <task_menu_init+0x218>)
 80050e6:	681c      	ldr	r4, [r3, #0]
 80050e8:	f7ff fadc 	bl	80046a4 <storage_get_count>
 80050ec:	4603      	mov	r3, r0
 80050ee:	4a35      	ldr	r2, [pc, #212]	@ (80051c4 <task_menu_init+0x270>)
 80050f0:	213f      	movs	r1, #63	@ 0x3f
 80050f2:	4620      	mov	r0, r4
 80050f4:	f002 fd10 	bl	8007b18 <sniprintf>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4a20      	ldr	r2, [pc, #128]	@ (800517c <task_menu_init+0x228>)
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4b1b      	ldr	r3, [pc, #108]	@ (800516c <task_menu_init+0x218>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fa66 	bl	80045d4 <logger_log_print_>
 8005108:	b662      	cpsie	i
 800510a:	e010      	b.n	800512e <task_menu_init+0x1da>
    } else {
        LOGGER_LOG("EEPROM (storage) no disponible\r\n");
 800510c:	b672      	cpsid	i
 800510e:	4b17      	ldr	r3, [pc, #92]	@ (800516c <task_menu_init+0x218>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2d      	ldr	r2, [pc, #180]	@ (80051c8 <task_menu_init+0x274>)
 8005114:	213f      	movs	r1, #63	@ 0x3f
 8005116:	4618      	mov	r0, r3
 8005118:	f002 fcfe 	bl	8007b18 <sniprintf>
 800511c:	4603      	mov	r3, r0
 800511e:	4a17      	ldr	r2, [pc, #92]	@ (800517c <task_menu_init+0x228>)
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	4b12      	ldr	r3, [pc, #72]	@ (800516c <task_menu_init+0x218>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fa54 	bl	80045d4 <logger_log_print_>
 800512c:	b662      	cpsie	i
    }

    if (exitlog_init() != HAL_OK){
 800512e:	f7ff fdfd 	bl	8004d2c <exitlog_init>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <task_menu_init+0x206>
        LOGGER_LOG("EEPROM (egresos) no disponible\r\n");
 8005138:	b672      	cpsid	i
 800513a:	4b0c      	ldr	r3, [pc, #48]	@ (800516c <task_menu_init+0x218>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a23      	ldr	r2, [pc, #140]	@ (80051cc <task_menu_init+0x278>)
 8005140:	213f      	movs	r1, #63	@ 0x3f
 8005142:	4618      	mov	r0, r3
 8005144:	f002 fce8 	bl	8007b18 <sniprintf>
 8005148:	4603      	mov	r3, r0
 800514a:	4a0c      	ldr	r2, [pc, #48]	@ (800517c <task_menu_init+0x228>)
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	4b07      	ldr	r3, [pc, #28]	@ (800516c <task_menu_init+0x218>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fa3e 	bl	80045d4 <logger_log_print_>
 8005158:	b662      	cpsie	i
    }
}
 800515a:	bf00      	nop
 800515c:	372c      	adds	r7, #44	@ 0x2c
 800515e:	46bd      	mov	sp, r7
 8005160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005162:	bf00      	nop
 8005164:	08008c54 	.word	0x08008c54
 8005168:	08004e21 	.word	0x08004e21
 800516c:	08009200 	.word	0x08009200
 8005170:	20000014 	.word	0x20000014
 8005174:	08008c64 	.word	0x08008c64
 8005178:	08008c74 	.word	0x08008c74
 800517c:	20000204 	.word	0x20000204
 8005180:	20000018 	.word	0x20000018
 8005184:	08008c8c 	.word	0x08008c8c
 8005188:	08008c98 	.word	0x08008c98
 800518c:	2000021c 	.word	0x2000021c
 8005190:	08008ca8 	.word	0x08008ca8
 8005194:	08008cb8 	.word	0x08008cb8
 8005198:	20000210 	.word	0x20000210
 800519c:	08008cc8 	.word	0x08008cc8
 80051a0:	08008cd0 	.word	0x08008cd0
 80051a4:	08008cdc 	.word	0x08008cdc
 80051a8:	08008ce4 	.word	0x08008ce4
 80051ac:	08008cec 	.word	0x08008cec
 80051b0:	08008cf4 	.word	0x08008cf4
 80051b4:	08008cfc 	.word	0x08008cfc
 80051b8:	e000edf0 	.word	0xe000edf0
 80051bc:	e0001000 	.word	0xe0001000
 80051c0:	20000220 	.word	0x20000220
 80051c4:	08008d0c 	.word	0x08008d0c
 80051c8:	08008d28 	.word	0x08008d28
 80051cc:	08008d4c 	.word	0x08008d4c

080051d0 <task_menu_update>:

void task_menu_update(void *parameters){
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	b0b4      	sub	sp, #208	@ 0xd0
 80051d6:	af06      	add	r7, sp, #24
 80051d8:	6078      	str	r0, [r7, #4]
    uint32_t start_cycles = cycle_counter_get(); // Initial time
 80051da:	4bb4      	ldr	r3, [pc, #720]	@ (80054ac <task_menu_update+0x2dc>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    volatile task_menu_dta_t *p_task_menu_dta;
    bool b_time_update_required = false;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

    g_task_menu_cnt++;
 80051e8:	4bb1      	ldr	r3, [pc, #708]	@ (80054b0 <task_menu_update+0x2e0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	4ab0      	ldr	r2, [pc, #704]	@ (80054b0 <task_menu_update+0x2e0>)
 80051f0:	6013      	str	r3, [r2, #0]

    __asm("CPSID i");
 80051f2:	b672      	cpsid	i
    if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 80051f4:	4baf      	ldr	r3, [pc, #700]	@ (80054b4 <task_menu_update+0x2e4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <task_menu_update+0x3c>
    {
        g_task_menu_tick_cnt--;
 80051fc:	4bad      	ldr	r3, [pc, #692]	@ (80054b4 <task_menu_update+0x2e4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3b01      	subs	r3, #1
 8005202:	4aac      	ldr	r2, [pc, #688]	@ (80054b4 <task_menu_update+0x2e4>)
 8005204:	6013      	str	r3, [r2, #0]
        b_time_update_required = true;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    }
    __asm("CPSIE i");
 800520c:	b662      	cpsie	i

    while (b_time_update_required){
 800520e:	f001 bcba 	b.w	8006b86 <task_menu_update+0x19b6>

        __asm("CPSID i");
 8005212:	b672      	cpsid	i
        if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt){
 8005214:	4ba7      	ldr	r3, [pc, #668]	@ (80054b4 <task_menu_update+0x2e4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <task_menu_update+0x5e>
            g_task_menu_tick_cnt--;
 800521c:	4ba5      	ldr	r3, [pc, #660]	@ (80054b4 <task_menu_update+0x2e4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3b01      	subs	r3, #1
 8005222:	4aa4      	ldr	r2, [pc, #656]	@ (80054b4 <task_menu_update+0x2e4>)
 8005224:	6013      	str	r3, [r2, #0]
            b_time_update_required = true;
 8005226:	2301      	movs	r3, #1
 8005228:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 800522c:	e002      	b.n	8005234 <task_menu_update+0x64>
        }
        else{
            b_time_update_required = false;
 800522e:	2300      	movs	r3, #0
 8005230:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
        }
        __asm("CPSIE i");
 8005234:	b662      	cpsie	i

        p_task_menu_dta = &task_menu_dta;
 8005236:	4ba0      	ldr	r3, [pc, #640]	@ (80054b8 <task_menu_update+0x2e8>)
 8005238:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        if (key_lock_ticks > 0) key_lock_ticks--;
 800523c:	4b9f      	ldr	r3, [pc, #636]	@ (80054bc <task_menu_update+0x2ec>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <task_menu_update+0x80>
 8005244:	4b9d      	ldr	r3, [pc, #628]	@ (80054bc <task_menu_update+0x2ec>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	3b01      	subs	r3, #1
 800524a:	b2da      	uxtb	r2, r3
 800524c:	4b9b      	ldr	r3, [pc, #620]	@ (80054bc <task_menu_update+0x2ec>)
 800524e:	701a      	strb	r2, [r3, #0]

        keypadUpdate();
 8005250:	f001 ff16 	bl	8007080 <keypadUpdate>

        if (keypadKeyAvailable() && key_lock_ticks == 0) {
 8005254:	f001 ff98 	bl	8007188 <keypadKeyAvailable>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	f001 81c3 	beq.w	80065e6 <task_menu_update+0x1416>
 8005260:	4b96      	ldr	r3, [pc, #600]	@ (80054bc <task_menu_update+0x2ec>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f041 81be 	bne.w	80065e6 <task_menu_update+0x1416>
            key_lock_ticks = KEY_LOCK_TICKS;
 800526a:	4b94      	ldr	r3, [pc, #592]	@ (80054bc <task_menu_update+0x2ec>)
 800526c:	2203      	movs	r2, #3
 800526e:	701a      	strb	r2, [r3, #0]

            char key = keypadReadKey();
 8005270:	f001 ff94 	bl	800719c <keypadReadKey>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

            if (type_selection_in_progress) {
 800527a:	4b91      	ldr	r3, [pc, #580]	@ (80054c0 <task_menu_update+0x2f0>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 80e4 	beq.w	800544c <task_menu_update+0x27c>
                if (key == 'D') {
 8005284:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005288:	2b44      	cmp	r3, #68	@ 0x44
 800528a:	d12a      	bne.n	80052e2 <task_menu_update+0x112>
                    vehicle_type_page = !vehicle_type_page;
 800528c:	4b8d      	ldr	r3, [pc, #564]	@ (80054c4 <task_menu_update+0x2f4>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	bf14      	ite	ne
 8005294:	2301      	movne	r3, #1
 8005296:	2300      	moveq	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f083 0301 	eor.w	r3, r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	4b87      	ldr	r3, [pc, #540]	@ (80054c4 <task_menu_update+0x2f4>)
 80052a8:	701a      	strb	r2, [r3, #0]
                    displayClearFull();
 80052aa:	f7fe fefd 	bl	80040a8 <displayClearFull>
                    displayCharPositionWrite(0, 0); displayStringWrite("Tipo Vehiculo:");
 80052ae:	2100      	movs	r1, #0
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7fe fe37 	bl	8003f24 <displayCharPositionWrite>
 80052b6:	4884      	ldr	r0, [pc, #528]	@ (80054c8 <task_menu_update+0x2f8>)
 80052b8:	f7fe fea6 	bl	8004008 <displayStringWrite>
                    displayCharPositionWrite(0, 1);
 80052bc:	2101      	movs	r1, #1
 80052be:	2000      	movs	r0, #0
 80052c0:	f7fe fe30 	bl	8003f24 <displayCharPositionWrite>
                    displayStringWrite(!vehicle_type_page ? "1:Bici  2:Moto"
 80052c4:	4b7f      	ldr	r3, [pc, #508]	@ (80054c4 <task_menu_update+0x2f4>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f083 0301 	eor.w	r3, r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <task_menu_update+0x106>
 80052d2:	4b7e      	ldr	r3, [pc, #504]	@ (80054cc <task_menu_update+0x2fc>)
 80052d4:	e000      	b.n	80052d8 <task_menu_update+0x108>
 80052d6:	4b7e      	ldr	r3, [pc, #504]	@ (80054d0 <task_menu_update+0x300>)
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe fe95 	bl	8004008 <displayStringWrite>
                        displayStringWrite("No hay mas lugar");
                        error_display_ticks = DISPLAY_DELAY_TICKS;
                    }
                    type_selection_in_progress = false;
                }
                return;
 80052de:	f001 bc75 	b.w	8006bcc <task_menu_update+0x19fc>
                else if (key >= '1' && key <= '4') {
 80052e2:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80052e6:	2b30      	cmp	r3, #48	@ 0x30
 80052e8:	f241 8470 	bls.w	8006bcc <task_menu_update+0x19fc>
 80052ec:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80052f0:	2b34      	cmp	r3, #52	@ 0x34
 80052f2:	f201 846b 	bhi.w	8006bcc <task_menu_update+0x19fc>
                    vehicleType_t category = (vehicleType_t)(key - '0');
 80052f6:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80052fa:	3b30      	subs	r3, #48	@ 0x30
 80052fc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
                    rtc_get_datetime(&d,&m,&y,&h,&min);
 8005300:	f107 047e 	add.w	r4, r7, #126	@ 0x7e
 8005304:	f107 027f 	add.w	r2, r7, #127	@ 0x7f
 8005308:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800530c:	f107 0081 	add.w	r0, r7, #129	@ 0x81
 8005310:	f107 037d 	add.w	r3, r7, #125	@ 0x7d
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	4623      	mov	r3, r4
 8005318:	f7ff fa5e 	bl	80047d8 <rtc_get_datetime>
                    if (addVehicle(plate_temp, d, m, y, h, min, category)) {
 800531c:	f897 0081 	ldrb.w	r0, [r7, #129]	@ 0x81
 8005320:	f897 4080 	ldrb.w	r4, [r7, #128]	@ 0x80
 8005324:	f897 507f 	ldrb.w	r5, [r7, #127]	@ 0x7f
 8005328:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800532c:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 8005330:	f897 1082 	ldrb.w	r1, [r7, #130]	@ 0x82
 8005334:	9102      	str	r1, [sp, #8]
 8005336:	9201      	str	r2, [sp, #4]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	462b      	mov	r3, r5
 800533c:	4622      	mov	r2, r4
 800533e:	4601      	mov	r1, r0
 8005340:	4864      	ldr	r0, [pc, #400]	@ (80054d4 <task_menu_update+0x304>)
 8005342:	f7ff fb23 	bl	800498c <addVehicle>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d06d      	beq.n	8005428 <task_menu_update+0x258>
                        strncpy(rec.patente, plate_temp, sizeof(rec.patente)-1);
 800534c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005350:	2203      	movs	r2, #3
 8005352:	4960      	ldr	r1, [pc, #384]	@ (80054d4 <task_menu_update+0x304>)
 8005354:	4618      	mov	r0, r3
 8005356:	f002 fc5e 	bl	8007c16 <strncpy>
                        rec.patente[sizeof(rec.patente)-1] = '\0';
 800535a:	2300      	movs	r3, #0
 800535c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
                        rec.day = d; rec.month = m; rec.year = y;
 8005360:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8005364:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8005368:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800536c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8005370:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005374:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
                        rec.hora = h; rec.minuto = min;
 8005378:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800537c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8005380:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8005384:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
                        rec.categoria = (uint8_t)category;
 8005388:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800538c:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
                        if (storage_append(&rec) != HAL_OK) {
 8005390:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff f9e3 	bl	8004760 <storage_append>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01e      	beq.n	80053de <task_menu_update+0x20e>
                            LOGGER_LOG("EEPROM llena o error al guardar INGRESO\r\n");
 80053a0:	b672      	cpsid	i
 80053a2:	4b4d      	ldr	r3, [pc, #308]	@ (80054d8 <task_menu_update+0x308>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a4d      	ldr	r2, [pc, #308]	@ (80054dc <task_menu_update+0x30c>)
 80053a8:	213f      	movs	r1, #63	@ 0x3f
 80053aa:	4618      	mov	r0, r3
 80053ac:	f002 fbb4 	bl	8007b18 <sniprintf>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4a4b      	ldr	r2, [pc, #300]	@ (80054e0 <task_menu_update+0x310>)
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b48      	ldr	r3, [pc, #288]	@ (80054d8 <task_menu_update+0x308>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff f90a 	bl	80045d4 <logger_log_print_>
 80053c0:	b662      	cpsie	i
                            displayRowClear(1);
 80053c2:	2001      	movs	r0, #1
 80053c4:	f7fe fe5c 	bl	8004080 <displayRowClear>
                            displayCharPositionWrite(0, 1);
 80053c8:	2101      	movs	r1, #1
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7fe fdaa 	bl	8003f24 <displayCharPositionWrite>
                            displayStringWrite("EEPROM LLENA");
 80053d0:	4844      	ldr	r0, [pc, #272]	@ (80054e4 <task_menu_update+0x314>)
 80053d2:	f7fe fe19 	bl	8004008 <displayStringWrite>
                            error_display_ticks = DISPLAY_DELAY_TICKS;
 80053d6:	4b44      	ldr	r3, [pc, #272]	@ (80054e8 <task_menu_update+0x318>)
 80053d8:	2206      	movs	r2, #6
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	e013      	b.n	8005406 <task_menu_update+0x236>
                            LOGGER_LOG("Ingreso guardado. Total: %u\r\n", storage_get_count());
 80053de:	b672      	cpsid	i
 80053e0:	4b3d      	ldr	r3, [pc, #244]	@ (80054d8 <task_menu_update+0x308>)
 80053e2:	681c      	ldr	r4, [r3, #0]
 80053e4:	f7ff f95e 	bl	80046a4 <storage_get_count>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4a40      	ldr	r2, [pc, #256]	@ (80054ec <task_menu_update+0x31c>)
 80053ec:	213f      	movs	r1, #63	@ 0x3f
 80053ee:	4620      	mov	r0, r4
 80053f0:	f002 fb92 	bl	8007b18 <sniprintf>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4a3a      	ldr	r2, [pc, #232]	@ (80054e0 <task_menu_update+0x310>)
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b37      	ldr	r3, [pc, #220]	@ (80054d8 <task_menu_update+0x308>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff f8e8 	bl	80045d4 <logger_log_print_>
 8005404:	b662      	cpsie	i
                        displayRowClear(1);
 8005406:	2001      	movs	r0, #1
 8005408:	f7fe fe3a 	bl	8004080 <displayRowClear>
                        displayCharPositionWrite(0, 1);
 800540c:	2101      	movs	r1, #1
 800540e:	2000      	movs	r0, #0
 8005410:	f7fe fd88 	bl	8003f24 <displayCharPositionWrite>
                        displayStringWrite("Ingresa: ");
 8005414:	4836      	ldr	r0, [pc, #216]	@ (80054f0 <task_menu_update+0x320>)
 8005416:	f7fe fdf7 	bl	8004008 <displayStringWrite>
                        displayStringWrite(plate_temp);
 800541a:	482e      	ldr	r0, [pc, #184]	@ (80054d4 <task_menu_update+0x304>)
 800541c:	f7fe fdf4 	bl	8004008 <displayStringWrite>
                        plate_display_ticks = DISPLAY_DELAY_TICKS;
 8005420:	4b34      	ldr	r3, [pc, #208]	@ (80054f4 <task_menu_update+0x324>)
 8005422:	2206      	movs	r2, #6
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	e00c      	b.n	8005442 <task_menu_update+0x272>
                        displayRowClear(1);
 8005428:	2001      	movs	r0, #1
 800542a:	f7fe fe29 	bl	8004080 <displayRowClear>
                        displayCharPositionWrite(0, 1);
 800542e:	2101      	movs	r1, #1
 8005430:	2000      	movs	r0, #0
 8005432:	f7fe fd77 	bl	8003f24 <displayCharPositionWrite>
                        displayStringWrite("No hay mas lugar");
 8005436:	4830      	ldr	r0, [pc, #192]	@ (80054f8 <task_menu_update+0x328>)
 8005438:	f7fe fde6 	bl	8004008 <displayStringWrite>
                        error_display_ticks = DISPLAY_DELAY_TICKS;
 800543c:	4b2a      	ldr	r3, [pc, #168]	@ (80054e8 <task_menu_update+0x318>)
 800543e:	2206      	movs	r2, #6
 8005440:	801a      	strh	r2, [r3, #0]
                    type_selection_in_progress = false;
 8005442:	4b1f      	ldr	r3, [pc, #124]	@ (80054c0 <task_menu_update+0x2f0>)
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
                return;
 8005448:	f001 bbc0 	b.w	8006bcc <task_menu_update+0x19fc>
            }

            if (password_entry_in_progress) {
 800544c:	4b2b      	ldr	r3, [pc, #172]	@ (80054fc <task_menu_update+0x32c>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80e9 	beq.w	8005628 <task_menu_update+0x458>
                if (key >= '0' && key <= '9') {
 8005456:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800545a:	2b2f      	cmp	r3, #47	@ 0x2f
 800545c:	f240 80b1 	bls.w	80055c2 <task_menu_update+0x3f2>
 8005460:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005464:	2b39      	cmp	r3, #57	@ 0x39
 8005466:	f200 80ac 	bhi.w	80055c2 <task_menu_update+0x3f2>
                    if (password_index < 8) {
 800546a:	4b25      	ldr	r3, [pc, #148]	@ (8005500 <task_menu_update+0x330>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b07      	cmp	r3, #7
 8005470:	d858      	bhi.n	8005524 <task_menu_update+0x354>
                        password_buffer[password_index++] = key;
 8005472:	4b23      	ldr	r3, [pc, #140]	@ (8005500 <task_menu_update+0x330>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	b2d1      	uxtb	r1, r2
 800547a:	4a21      	ldr	r2, [pc, #132]	@ (8005500 <task_menu_update+0x330>)
 800547c:	7011      	strb	r1, [r2, #0]
 800547e:	4619      	mov	r1, r3
 8005480:	4a20      	ldr	r2, [pc, #128]	@ (8005504 <task_menu_update+0x334>)
 8005482:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005486:	5453      	strb	r3, [r2, r1]
                        password_buffer[password_index] = '\0';
 8005488:	4b1d      	ldr	r3, [pc, #116]	@ (8005500 <task_menu_update+0x330>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	4b1d      	ldr	r3, [pc, #116]	@ (8005504 <task_menu_update+0x334>)
 8005490:	2100      	movs	r1, #0
 8005492:	5499      	strb	r1, [r3, r2]
                        displayRowClear(1); displayCharPositionWrite(0, 1);
 8005494:	2001      	movs	r0, #1
 8005496:	f7fe fdf3 	bl	8004080 <displayRowClear>
 800549a:	2101      	movs	r1, #1
 800549c:	2000      	movs	r0, #0
 800549e:	f7fe fd41 	bl	8003f24 <displayCharPositionWrite>
                        for (uint8_t i = 0; i < password_index; i++) displayStringWrite("*");
 80054a2:	2300      	movs	r3, #0
 80054a4:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 80054a8:	e036      	b.n	8005518 <task_menu_update+0x348>
 80054aa:	bf00      	nop
 80054ac:	e0001000 	.word	0xe0001000
 80054b0:	2000021c 	.word	0x2000021c
 80054b4:	20000220 	.word	0x20000220
 80054b8:	20000210 	.word	0x20000210
 80054bc:	2000045e 	.word	0x2000045e
 80054c0:	20000464 	.word	0x20000464
 80054c4:	20000465 	.word	0x20000465
 80054c8:	08008d70 	.word	0x08008d70
 80054cc:	08008d80 	.word	0x08008d80
 80054d0:	08008d90 	.word	0x08008d90
 80054d4:	20000468 	.word	0x20000468
 80054d8:	08009200 	.word	0x08009200
 80054dc:	08008da4 	.word	0x08008da4
 80054e0:	20000204 	.word	0x20000204
 80054e4:	08008dd0 	.word	0x08008dd0
 80054e8:	20000462 	.word	0x20000462
 80054ec:	08008de0 	.word	0x08008de0
 80054f0:	08008e00 	.word	0x08008e00
 80054f4:	2000022e 	.word	0x2000022e
 80054f8:	08008e0c 	.word	0x08008e0c
 80054fc:	20000498 	.word	0x20000498
 8005500:	200004a5 	.word	0x200004a5
 8005504:	2000049c 	.word	0x2000049c
 8005508:	489e      	ldr	r0, [pc, #632]	@ (8005784 <task_menu_update+0x5b4>)
 800550a:	f7fe fd7d 	bl	8004008 <displayStringWrite>
 800550e:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8005512:	3301      	adds	r3, #1
 8005514:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 8005518:	4b9b      	ldr	r3, [pc, #620]	@ (8005788 <task_menu_update+0x5b8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8005520:	429a      	cmp	r2, r3
 8005522:	d3f1      	bcc.n	8005508 <task_menu_update+0x338>
                    }
                    if (password_index == 8) {
 8005524:	4b98      	ldr	r3, [pc, #608]	@ (8005788 <task_menu_update+0x5b8>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b08      	cmp	r3, #8
 800552a:	d17b      	bne.n	8005624 <task_menu_update+0x454>
                        if (strcmp(password_buffer, DEFAULT_PASSWORD) == 0) {
 800552c:	4997      	ldr	r1, [pc, #604]	@ (800578c <task_menu_update+0x5bc>)
 800552e:	4898      	ldr	r0, [pc, #608]	@ (8005790 <task_menu_update+0x5c0>)
 8005530:	f7fa fe0c 	bl	800014c <strcmp>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d11f      	bne.n	800557a <task_menu_update+0x3aa>
                            password_entry_in_progress = false;
 800553a:	4b96      	ldr	r3, [pc, #600]	@ (8005794 <task_menu_update+0x5c4>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
                            rate_change_in_progress = true;
 8005540:	4b95      	ldr	r3, [pc, #596]	@ (8005798 <task_menu_update+0x5c8>)
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
                            current_rate_idx = 0; rate_index = 0; rate_buffer[0] = '\0';
 8005546:	4b95      	ldr	r3, [pc, #596]	@ (800579c <task_menu_update+0x5cc>)
 8005548:	2200      	movs	r2, #0
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	4b94      	ldr	r3, [pc, #592]	@ (80057a0 <task_menu_update+0x5d0>)
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	4b94      	ldr	r3, [pc, #592]	@ (80057a4 <task_menu_update+0x5d4>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
                            displayClearFull();
 8005558:	f7fe fda6 	bl	80040a8 <displayClearFull>
                            displayCharPositionWrite(0, 0); displayStringWrite("Nueva tarifa:");
 800555c:	2100      	movs	r1, #0
 800555e:	2000      	movs	r0, #0
 8005560:	f7fe fce0 	bl	8003f24 <displayCharPositionWrite>
 8005564:	4890      	ldr	r0, [pc, #576]	@ (80057a8 <task_menu_update+0x5d8>)
 8005566:	f7fe fd4f 	bl	8004008 <displayStringWrite>
                            displayCharPositionWrite(0, 1); displayStringWrite("Bicicleta: ");
 800556a:	2101      	movs	r1, #1
 800556c:	2000      	movs	r0, #0
 800556e:	f7fe fcd9 	bl	8003f24 <displayCharPositionWrite>
 8005572:	488e      	ldr	r0, [pc, #568]	@ (80057ac <task_menu_update+0x5dc>)
 8005574:	f7fe fd48 	bl	8004008 <displayStringWrite>
                    if (password_index == 8) {
 8005578:	e054      	b.n	8005624 <task_menu_update+0x454>
                        } else {
                            password_entry_in_progress = false;
 800557a:	4b86      	ldr	r3, [pc, #536]	@ (8005794 <task_menu_update+0x5c4>)
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
                            displayClearFull();
 8005580:	f7fe fd92 	bl	80040a8 <displayClearFull>
                            displayCharPositionWrite(0, 0); displayStringWrite("Clave incorrecta");
 8005584:	2100      	movs	r1, #0
 8005586:	2000      	movs	r0, #0
 8005588:	f7fe fccc 	bl	8003f24 <displayCharPositionWrite>
 800558c:	4888      	ldr	r0, [pc, #544]	@ (80057b0 <task_menu_update+0x5e0>)
 800558e:	f7fe fd3b 	bl	8004008 <displayStringWrite>
                            funds_display_ticks = 6;
 8005592:	4b88      	ldr	r3, [pc, #544]	@ (80057b4 <task_menu_update+0x5e4>)
 8005594:	2206      	movs	r2, #6
 8005596:	801a      	strh	r2, [r3, #0]
                            setup_menu_active = true;
 8005598:	4b87      	ldr	r3, [pc, #540]	@ (80057b8 <task_menu_update+0x5e8>)
 800559a:	2201      	movs	r2, #1
 800559c:	701a      	strb	r2, [r3, #0]
                            LOGGER_LOG("Clave incorrecta\r\n");
 800559e:	b672      	cpsid	i
 80055a0:	4b86      	ldr	r3, [pc, #536]	@ (80057bc <task_menu_update+0x5ec>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a86      	ldr	r2, [pc, #536]	@ (80057c0 <task_menu_update+0x5f0>)
 80055a6:	213f      	movs	r1, #63	@ 0x3f
 80055a8:	4618      	mov	r0, r3
 80055aa:	f002 fab5 	bl	8007b18 <sniprintf>
 80055ae:	4603      	mov	r3, r0
 80055b0:	4a84      	ldr	r2, [pc, #528]	@ (80057c4 <task_menu_update+0x5f4>)
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	4b81      	ldr	r3, [pc, #516]	@ (80057bc <task_menu_update+0x5ec>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff f80b 	bl	80045d4 <logger_log_print_>
 80055be:	b662      	cpsie	i
                    if (password_index == 8) {
 80055c0:	e030      	b.n	8005624 <task_menu_update+0x454>
                        }
                    }
                }
                else if (key == 'C') {
 80055c2:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80055c6:	2b43      	cmp	r3, #67	@ 0x43
 80055c8:	f041 8302 	bne.w	8006bd0 <task_menu_update+0x1a00>
                    if (password_index > 0) {
 80055cc:	4b6e      	ldr	r3, [pc, #440]	@ (8005788 <task_menu_update+0x5b8>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f001 82fd 	beq.w	8006bd0 <task_menu_update+0x1a00>
                        password_index--;
 80055d6:	4b6c      	ldr	r3, [pc, #432]	@ (8005788 <task_menu_update+0x5b8>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	3b01      	subs	r3, #1
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	4b6a      	ldr	r3, [pc, #424]	@ (8005788 <task_menu_update+0x5b8>)
 80055e0:	701a      	strb	r2, [r3, #0]
                        password_buffer[password_index] = '\0';
 80055e2:	4b69      	ldr	r3, [pc, #420]	@ (8005788 <task_menu_update+0x5b8>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	4b69      	ldr	r3, [pc, #420]	@ (8005790 <task_menu_update+0x5c0>)
 80055ea:	2100      	movs	r1, #0
 80055ec:	5499      	strb	r1, [r3, r2]
                        displayRowClear(1); displayCharPositionWrite(0, 1);
 80055ee:	2001      	movs	r0, #1
 80055f0:	f7fe fd46 	bl	8004080 <displayRowClear>
 80055f4:	2101      	movs	r1, #1
 80055f6:	2000      	movs	r0, #0
 80055f8:	f7fe fc94 	bl	8003f24 <displayCharPositionWrite>
                        for (uint8_t i = 0; i < password_index; i++) displayStringWrite("*");
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
 8005602:	e007      	b.n	8005614 <task_menu_update+0x444>
 8005604:	485f      	ldr	r0, [pc, #380]	@ (8005784 <task_menu_update+0x5b4>)
 8005606:	f7fe fcff 	bl	8004008 <displayStringWrite>
 800560a:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 800560e:	3301      	adds	r3, #1
 8005610:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
 8005614:	4b5c      	ldr	r3, [pc, #368]	@ (8005788 <task_menu_update+0x5b8>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f897 20b5 	ldrb.w	r2, [r7, #181]	@ 0xb5
 800561c:	429a      	cmp	r2, r3
 800561e:	d3f1      	bcc.n	8005604 <task_menu_update+0x434>
                    }
                }
                return;
 8005620:	f001 bad6 	b.w	8006bd0 <task_menu_update+0x1a00>
 8005624:	f001 bad4 	b.w	8006bd0 <task_menu_update+0x1a00>
            }

            /* ======== Rate changes ======== */
            if (rate_change_in_progress) {
 8005628:	4b5b      	ldr	r3, [pc, #364]	@ (8005798 <task_menu_update+0x5c8>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80d7 	beq.w	80057e0 <task_menu_update+0x610>
                if (key >= '0' && key <= '9') {
 8005632:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005636:	2b2f      	cmp	r3, #47	@ 0x2f
 8005638:	d91a      	bls.n	8005670 <task_menu_update+0x4a0>
 800563a:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800563e:	2b39      	cmp	r3, #57	@ 0x39
 8005640:	d816      	bhi.n	8005670 <task_menu_update+0x4a0>
                    if (rate_index < 3) { rate_buffer[rate_index++] = key; rate_buffer[rate_index] = '\0'; }
 8005642:	4b57      	ldr	r3, [pc, #348]	@ (80057a0 <task_menu_update+0x5d0>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b02      	cmp	r3, #2
 8005648:	f200 809a 	bhi.w	8005780 <task_menu_update+0x5b0>
 800564c:	4b54      	ldr	r3, [pc, #336]	@ (80057a0 <task_menu_update+0x5d0>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	b2d1      	uxtb	r1, r2
 8005654:	4a52      	ldr	r2, [pc, #328]	@ (80057a0 <task_menu_update+0x5d0>)
 8005656:	7011      	strb	r1, [r2, #0]
 8005658:	4619      	mov	r1, r3
 800565a:	4a52      	ldr	r2, [pc, #328]	@ (80057a4 <task_menu_update+0x5d4>)
 800565c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005660:	5453      	strb	r3, [r2, r1]
 8005662:	4b4f      	ldr	r3, [pc, #316]	@ (80057a0 <task_menu_update+0x5d0>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	4b4e      	ldr	r3, [pc, #312]	@ (80057a4 <task_menu_update+0x5d4>)
 800566a:	2100      	movs	r1, #0
 800566c:	5499      	strb	r1, [r3, r2]
 800566e:	e087      	b.n	8005780 <task_menu_update+0x5b0>
                }
                else if (key == 'D') {
 8005670:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005674:	2b44      	cmp	r3, #68	@ 0x44
 8005676:	f041 82ad 	bne.w	8006bd4 <task_menu_update+0x1a04>
                    uint8_t valor = (uint8_t)atoi(rate_buffer);
 800567a:	484a      	ldr	r0, [pc, #296]	@ (80057a4 <task_menu_update+0x5d4>)
 800567c:	f002 f833 	bl	80076e6 <atoi>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
                    switch (current_rate_idx) {
 8005686:	4b45      	ldr	r3, [pc, #276]	@ (800579c <task_menu_update+0x5cc>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b03      	cmp	r3, #3
 800568c:	d81e      	bhi.n	80056cc <task_menu_update+0x4fc>
 800568e:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <task_menu_update+0x4c4>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056a5 	.word	0x080056a5
 8005698:	080056af 	.word	0x080056af
 800569c:	080056b9 	.word	0x080056b9
 80056a0:	080056c3 	.word	0x080056c3
                        case 0: rates.bike_rate = valor; break;
 80056a4:	4a48      	ldr	r2, [pc, #288]	@ (80057c8 <task_menu_update+0x5f8>)
 80056a6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80056aa:	7013      	strb	r3, [r2, #0]
 80056ac:	e00e      	b.n	80056cc <task_menu_update+0x4fc>
                        case 1: rates.motorcycle_rate = valor; break;
 80056ae:	4a46      	ldr	r2, [pc, #280]	@ (80057c8 <task_menu_update+0x5f8>)
 80056b0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80056b4:	7053      	strb	r3, [r2, #1]
 80056b6:	e009      	b.n	80056cc <task_menu_update+0x4fc>
                        case 2: rates.car_rate = valor; break;
 80056b8:	4a43      	ldr	r2, [pc, #268]	@ (80057c8 <task_menu_update+0x5f8>)
 80056ba:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80056be:	7093      	strb	r3, [r2, #2]
 80056c0:	e004      	b.n	80056cc <task_menu_update+0x4fc>
                        case 3: rates.truck_rate = valor; break;
 80056c2:	4a41      	ldr	r2, [pc, #260]	@ (80057c8 <task_menu_update+0x5f8>)
 80056c4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80056c8:	70d3      	strb	r3, [r2, #3]
 80056ca:	bf00      	nop
                    }
                    current_rate_idx++; rate_index = 0; rate_buffer[0] = '\0';
 80056cc:	4b33      	ldr	r3, [pc, #204]	@ (800579c <task_menu_update+0x5cc>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	3301      	adds	r3, #1
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	4b31      	ldr	r3, [pc, #196]	@ (800579c <task_menu_update+0x5cc>)
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	4b31      	ldr	r3, [pc, #196]	@ (80057a0 <task_menu_update+0x5d0>)
 80056da:	2200      	movs	r2, #0
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	4b31      	ldr	r3, [pc, #196]	@ (80057a4 <task_menu_update+0x5d4>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]

                    if (current_rate_idx > 3) {
 80056e4:	4b2d      	ldr	r3, [pc, #180]	@ (800579c <task_menu_update+0x5cc>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d917      	bls.n	800571c <task_menu_update+0x54c>
                        rate_change_in_progress = false;
 80056ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005798 <task_menu_update+0x5c8>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
                        setup_menu_active = true;
 80056f2:	4b31      	ldr	r3, [pc, #196]	@ (80057b8 <task_menu_update+0x5e8>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	701a      	strb	r2, [r3, #0]
                        displayClearFull();
 80056f8:	f7fe fcd6 	bl	80040a8 <displayClearFull>
                        displayCharPositionWrite(0, 0); displayStringWrite("Tarifas:1 Caja:2");
 80056fc:	2100      	movs	r1, #0
 80056fe:	2000      	movs	r0, #0
 8005700:	f7fe fc10 	bl	8003f24 <displayCharPositionWrite>
 8005704:	4831      	ldr	r0, [pc, #196]	@ (80057cc <task_menu_update+0x5fc>)
 8005706:	f7fe fc7f 	bl	8004008 <displayStringWrite>
                        displayCharPositionWrite(0, 1); displayStringWrite("Lista:3   Hora:4");
 800570a:	2101      	movs	r1, #1
 800570c:	2000      	movs	r0, #0
 800570e:	f7fe fc09 	bl	8003f24 <displayCharPositionWrite>
 8005712:	482f      	ldr	r0, [pc, #188]	@ (80057d0 <task_menu_update+0x600>)
 8005714:	f7fe fc78 	bl	8004008 <displayStringWrite>
                        else if (current_rate_idx == 1) displayStringWrite("Moto: ");
                        else if (current_rate_idx == 2) displayStringWrite("Auto: ");
                        else if (current_rate_idx == 3) displayStringWrite("Camioneta: ");
                    }
                }
                return;
 8005718:	f001 ba5c 	b.w	8006bd4 <task_menu_update+0x1a04>
                        displayClearFull();
 800571c:	f7fe fcc4 	bl	80040a8 <displayClearFull>
                        displayCharPositionWrite(0, 0); displayStringWrite("Nueva tarifa:");
 8005720:	2100      	movs	r1, #0
 8005722:	2000      	movs	r0, #0
 8005724:	f7fe fbfe 	bl	8003f24 <displayCharPositionWrite>
 8005728:	481f      	ldr	r0, [pc, #124]	@ (80057a8 <task_menu_update+0x5d8>)
 800572a:	f7fe fc6d 	bl	8004008 <displayStringWrite>
                        displayCharPositionWrite(0, 1);
 800572e:	2101      	movs	r1, #1
 8005730:	2000      	movs	r0, #0
 8005732:	f7fe fbf7 	bl	8003f24 <displayCharPositionWrite>
                        if (current_rate_idx == 0)      displayStringWrite("Bicicleta: ");
 8005736:	4b19      	ldr	r3, [pc, #100]	@ (800579c <task_menu_update+0x5cc>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d104      	bne.n	8005748 <task_menu_update+0x578>
 800573e:	481b      	ldr	r0, [pc, #108]	@ (80057ac <task_menu_update+0x5dc>)
 8005740:	f7fe fc62 	bl	8004008 <displayStringWrite>
                return;
 8005744:	f001 ba46 	b.w	8006bd4 <task_menu_update+0x1a04>
                        else if (current_rate_idx == 1) displayStringWrite("Moto: ");
 8005748:	4b14      	ldr	r3, [pc, #80]	@ (800579c <task_menu_update+0x5cc>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d104      	bne.n	800575a <task_menu_update+0x58a>
 8005750:	4820      	ldr	r0, [pc, #128]	@ (80057d4 <task_menu_update+0x604>)
 8005752:	f7fe fc59 	bl	8004008 <displayStringWrite>
                return;
 8005756:	f001 ba3d 	b.w	8006bd4 <task_menu_update+0x1a04>
                        else if (current_rate_idx == 2) displayStringWrite("Auto: ");
 800575a:	4b10      	ldr	r3, [pc, #64]	@ (800579c <task_menu_update+0x5cc>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d104      	bne.n	800576c <task_menu_update+0x59c>
 8005762:	481d      	ldr	r0, [pc, #116]	@ (80057d8 <task_menu_update+0x608>)
 8005764:	f7fe fc50 	bl	8004008 <displayStringWrite>
                return;
 8005768:	f001 ba34 	b.w	8006bd4 <task_menu_update+0x1a04>
                        else if (current_rate_idx == 3) displayStringWrite("Camioneta: ");
 800576c:	4b0b      	ldr	r3, [pc, #44]	@ (800579c <task_menu_update+0x5cc>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b03      	cmp	r3, #3
 8005772:	f041 822f 	bne.w	8006bd4 <task_menu_update+0x1a04>
 8005776:	4819      	ldr	r0, [pc, #100]	@ (80057dc <task_menu_update+0x60c>)
 8005778:	f7fe fc46 	bl	8004008 <displayStringWrite>
                return;
 800577c:	f001 ba2a 	b.w	8006bd4 <task_menu_update+0x1a04>
 8005780:	f001 ba28 	b.w	8006bd4 <task_menu_update+0x1a04>
 8005784:	08008e20 	.word	0x08008e20
 8005788:	200004a5 	.word	0x200004a5
 800578c:	08008e24 	.word	0x08008e24
 8005790:	2000049c 	.word	0x2000049c
 8005794:	20000498 	.word	0x20000498
 8005798:	2000048a 	.word	0x2000048a
 800579c:	2000048b 	.word	0x2000048b
 80057a0:	20000490 	.word	0x20000490
 80057a4:	2000048c 	.word	0x2000048c
 80057a8:	08008e30 	.word	0x08008e30
 80057ac:	08008e40 	.word	0x08008e40
 80057b0:	08008e4c 	.word	0x08008e4c
 80057b4:	20000488 	.word	0x20000488
 80057b8:	20000480 	.word	0x20000480
 80057bc:	08009200 	.word	0x08009200
 80057c0:	08008e60 	.word	0x08008e60
 80057c4:	20000204 	.word	0x20000204
 80057c8:	2000001c 	.word	0x2000001c
 80057cc:	08008e74 	.word	0x08008e74
 80057d0:	08008e88 	.word	0x08008e88
 80057d4:	08008e9c 	.word	0x08008e9c
 80057d8:	08008ea4 	.word	0x08008ea4
 80057dc:	08008eac 	.word	0x08008eac
            }

            /* ======== Vehicles list ======== */
            if (display_list_in_progress) {
 80057e0:	4bb2      	ldr	r3, [pc, #712]	@ (8005aac <task_menu_update+0x8dc>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8086 	beq.w	80058f6 <task_menu_update+0x726>
                if (key == 'D') {
 80057ea:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80057ee:	2b44      	cmp	r3, #68	@ 0x44
 80057f0:	d12f      	bne.n	8005852 <task_menu_update+0x682>
                    int start = current_list_index;
 80057f2:	4baf      	ldr	r3, [pc, #700]	@ (8005ab0 <task_menu_update+0x8e0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    do {
                        current_list_index = (current_list_index + 1) % MAX_VEHICLES;
 80057fa:	4bad      	ldr	r3, [pc, #692]	@ (8005ab0 <task_menu_update+0x8e0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	4bac      	ldr	r3, [pc, #688]	@ (8005ab4 <task_menu_update+0x8e4>)
 8005802:	fb83 1302 	smull	r1, r3, r3, r2
 8005806:	1119      	asrs	r1, r3, #4
 8005808:	17d3      	asrs	r3, r2, #31
 800580a:	1acb      	subs	r3, r1, r3
 800580c:	2132      	movs	r1, #50	@ 0x32
 800580e:	fb01 f303 	mul.w	r3, r1, r3
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	4aa6      	ldr	r2, [pc, #664]	@ (8005ab0 <task_menu_update+0x8e0>)
 8005816:	6013      	str	r3, [r2, #0]
                    } while (!vehicles[current_list_index].occupied && current_list_index != start);
 8005818:	4ba5      	ldr	r3, [pc, #660]	@ (8005ab0 <task_menu_update+0x8e0>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	49a6      	ldr	r1, [pc, #664]	@ (8005ab8 <task_menu_update+0x8e8>)
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4413      	add	r3, r2
 8005828:	440b      	add	r3, r1
 800582a:	330a      	adds	r3, #10
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	f083 0301 	eor.w	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <task_menu_update+0x674>
 8005838:	4b9d      	ldr	r3, [pc, #628]	@ (8005ab0 <task_menu_update+0x8e0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005840:	429a      	cmp	r2, r3
 8005842:	d1da      	bne.n	80057fa <task_menu_update+0x62a>
                    showVehicleIndex(current_list_index);
 8005844:	4b9a      	ldr	r3, [pc, #616]	@ (8005ab0 <task_menu_update+0x8e0>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff f9c1 	bl	8004bd0 <showVehicleIndex>
                    setup_menu_active = true;
                    displayClearFull();
                    displayCharPositionWrite(0, 0); displayStringWrite("Tarifas:1 Caja:2");
                    displayCharPositionWrite(0, 1); displayStringWrite("Lista:3   Hora:4");
                }
                return;
 800584e:	f001 b9c3 	b.w	8006bd8 <task_menu_update+0x1a08>
                else if (key == 'C') {
 8005852:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005856:	2b43      	cmp	r3, #67	@ 0x43
 8005858:	d130      	bne.n	80058bc <task_menu_update+0x6ec>
                    int start = current_list_index;
 800585a:	4b95      	ldr	r3, [pc, #596]	@ (8005ab0 <task_menu_update+0x8e0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        current_list_index = (current_list_index - 1 + MAX_VEHICLES) % MAX_VEHICLES;
 8005862:	4b93      	ldr	r3, [pc, #588]	@ (8005ab0 <task_menu_update+0x8e0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f103 0231 	add.w	r2, r3, #49	@ 0x31
 800586a:	4b92      	ldr	r3, [pc, #584]	@ (8005ab4 <task_menu_update+0x8e4>)
 800586c:	fb83 1302 	smull	r1, r3, r3, r2
 8005870:	1119      	asrs	r1, r3, #4
 8005872:	17d3      	asrs	r3, r2, #31
 8005874:	1acb      	subs	r3, r1, r3
 8005876:	2132      	movs	r1, #50	@ 0x32
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	4a8c      	ldr	r2, [pc, #560]	@ (8005ab0 <task_menu_update+0x8e0>)
 8005880:	6013      	str	r3, [r2, #0]
                    } while (!vehicles[current_list_index].occupied && current_list_index != start);
 8005882:	4b8b      	ldr	r3, [pc, #556]	@ (8005ab0 <task_menu_update+0x8e0>)
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	498c      	ldr	r1, [pc, #560]	@ (8005ab8 <task_menu_update+0x8e8>)
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	4413      	add	r3, r2
 8005892:	440b      	add	r3, r1
 8005894:	330a      	adds	r3, #10
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f083 0301 	eor.w	r3, r3, #1
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <task_menu_update+0x6de>
 80058a2:	4b83      	ldr	r3, [pc, #524]	@ (8005ab0 <task_menu_update+0x8e0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d1d9      	bne.n	8005862 <task_menu_update+0x692>
                    showVehicleIndex(current_list_index);
 80058ae:	4b80      	ldr	r3, [pc, #512]	@ (8005ab0 <task_menu_update+0x8e0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff f98c 	bl	8004bd0 <showVehicleIndex>
                return;
 80058b8:	f001 b98e 	b.w	8006bd8 <task_menu_update+0x1a08>
                else if (key == '#') {
 80058bc:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80058c0:	2b23      	cmp	r3, #35	@ 0x23
 80058c2:	f041 8189 	bne.w	8006bd8 <task_menu_update+0x1a08>
                    display_list_in_progress = false;
 80058c6:	4b79      	ldr	r3, [pc, #484]	@ (8005aac <task_menu_update+0x8dc>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
                    setup_menu_active = true;
 80058cc:	4b7b      	ldr	r3, [pc, #492]	@ (8005abc <task_menu_update+0x8ec>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
                    displayClearFull();
 80058d2:	f7fe fbe9 	bl	80040a8 <displayClearFull>
                    displayCharPositionWrite(0, 0); displayStringWrite("Tarifas:1 Caja:2");
 80058d6:	2100      	movs	r1, #0
 80058d8:	2000      	movs	r0, #0
 80058da:	f7fe fb23 	bl	8003f24 <displayCharPositionWrite>
 80058de:	4878      	ldr	r0, [pc, #480]	@ (8005ac0 <task_menu_update+0x8f0>)
 80058e0:	f7fe fb92 	bl	8004008 <displayStringWrite>
                    displayCharPositionWrite(0, 1); displayStringWrite("Lista:3   Hora:4");
 80058e4:	2101      	movs	r1, #1
 80058e6:	2000      	movs	r0, #0
 80058e8:	f7fe fb1c 	bl	8003f24 <displayCharPositionWrite>
 80058ec:	4875      	ldr	r0, [pc, #468]	@ (8005ac4 <task_menu_update+0x8f4>)
 80058ee:	f7fe fb8b 	bl	8004008 <displayStringWrite>
                return;
 80058f2:	f001 b971 	b.w	8006bd8 <task_menu_update+0x1a08>
            }

            /* ======== Date/Time editor ======== */
            if (dt_edit_in_progress) {
 80058f6:	4b74      	ldr	r3, [pc, #464]	@ (8005ac8 <task_menu_update+0x8f8>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 81c3 	beq.w	8005c86 <task_menu_update+0xab6>
                if (key >= '0' && key <= '9') {
 8005900:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005904:	2b2f      	cmp	r3, #47	@ 0x2f
 8005906:	d950      	bls.n	80059aa <task_menu_update+0x7da>
 8005908:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800590c:	2b39      	cmp	r3, #57	@ 0x39
 800590e:	d84c      	bhi.n	80059aa <task_menu_update+0x7da>
                    if (dt_idx < 2) {
 8005910:	4b6e      	ldr	r3, [pc, #440]	@ (8005acc <task_menu_update+0x8fc>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	f200 81b4 	bhi.w	8005c82 <task_menu_update+0xab2>
                        dt_buf[dt_idx++] = key;
 800591a:	4b6c      	ldr	r3, [pc, #432]	@ (8005acc <task_menu_update+0x8fc>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	b2d1      	uxtb	r1, r2
 8005922:	4a6a      	ldr	r2, [pc, #424]	@ (8005acc <task_menu_update+0x8fc>)
 8005924:	7011      	strb	r1, [r2, #0]
 8005926:	4619      	mov	r1, r3
 8005928:	4a69      	ldr	r2, [pc, #420]	@ (8005ad0 <task_menu_update+0x900>)
 800592a:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800592e:	5453      	strb	r3, [r2, r1]
                        dt_buf[dt_idx] = '\0';
 8005930:	4b66      	ldr	r3, [pc, #408]	@ (8005acc <task_menu_update+0x8fc>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	4b66      	ldr	r3, [pc, #408]	@ (8005ad0 <task_menu_update+0x900>)
 8005938:	2100      	movs	r1, #0
 800593a:	5499      	strb	r1, [r3, r2]

                        displayRowClear(1);
 800593c:	2001      	movs	r0, #1
 800593e:	f7fe fb9f 	bl	8004080 <displayRowClear>
                        displayCharPositionWrite(0, 1);
 8005942:	2101      	movs	r1, #1
 8005944:	2000      	movs	r0, #0
 8005946:	f7fe faed 	bl	8003f24 <displayCharPositionWrite>
                        switch (dt_step) {
 800594a:	4b62      	ldr	r3, [pc, #392]	@ (8005ad4 <task_menu_update+0x904>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b04      	cmp	r3, #4
 8005950:	d820      	bhi.n	8005994 <task_menu_update+0x7c4>
 8005952:	a201      	add	r2, pc, #4	@ (adr r2, 8005958 <task_menu_update+0x788>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	0800596d 	.word	0x0800596d
 800595c:	08005975 	.word	0x08005975
 8005960:	0800597d 	.word	0x0800597d
 8005964:	08005985 	.word	0x08005985
 8005968:	0800598d 	.word	0x0800598d
                            case 0: displayStringWrite("DD:"); break;
 800596c:	485a      	ldr	r0, [pc, #360]	@ (8005ad8 <task_menu_update+0x908>)
 800596e:	f7fe fb4b 	bl	8004008 <displayStringWrite>
 8005972:	e00f      	b.n	8005994 <task_menu_update+0x7c4>
                            case 1: displayStringWrite("MM:"); break;
 8005974:	4859      	ldr	r0, [pc, #356]	@ (8005adc <task_menu_update+0x90c>)
 8005976:	f7fe fb47 	bl	8004008 <displayStringWrite>
 800597a:	e00b      	b.n	8005994 <task_menu_update+0x7c4>
                            case 2: displayStringWrite("YY:"); break;
 800597c:	4858      	ldr	r0, [pc, #352]	@ (8005ae0 <task_menu_update+0x910>)
 800597e:	f7fe fb43 	bl	8004008 <displayStringWrite>
 8005982:	e007      	b.n	8005994 <task_menu_update+0x7c4>
                            case 3: displayStringWrite("HH:"); break;
 8005984:	4857      	ldr	r0, [pc, #348]	@ (8005ae4 <task_menu_update+0x914>)
 8005986:	f7fe fb3f 	bl	8004008 <displayStringWrite>
 800598a:	e003      	b.n	8005994 <task_menu_update+0x7c4>
                            case 4: displayStringWrite("mm:"); break;
 800598c:	4856      	ldr	r0, [pc, #344]	@ (8005ae8 <task_menu_update+0x918>)
 800598e:	f7fe fb3b 	bl	8004008 <displayStringWrite>
 8005992:	bf00      	nop
                        }
                        displayStringWrite("__");
 8005994:	4855      	ldr	r0, [pc, #340]	@ (8005aec <task_menu_update+0x91c>)
 8005996:	f7fe fb37 	bl	8004008 <displayStringWrite>
                        displayCharPositionWrite(3, 1);
 800599a:	2101      	movs	r1, #1
 800599c:	2003      	movs	r0, #3
 800599e:	f7fe fac1 	bl	8003f24 <displayCharPositionWrite>
                        displayStringWrite(dt_buf);
 80059a2:	484b      	ldr	r0, [pc, #300]	@ (8005ad0 <task_menu_update+0x900>)
 80059a4:	f7fe fb30 	bl	8004008 <displayStringWrite>
                    if (dt_idx < 2) {
 80059a8:	e16b      	b.n	8005c82 <task_menu_update+0xab2>
                    }
                }
                else if (key == 'C') {
 80059aa:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80059ae:	2b43      	cmp	r3, #67	@ 0x43
 80059b0:	d148      	bne.n	8005a44 <task_menu_update+0x874>
                    if (dt_idx > 0) {
 80059b2:	4b46      	ldr	r3, [pc, #280]	@ (8005acc <task_menu_update+0x8fc>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f001 8110 	beq.w	8006bdc <task_menu_update+0x1a0c>
                        dt_idx--;
 80059bc:	4b43      	ldr	r3, [pc, #268]	@ (8005acc <task_menu_update+0x8fc>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	4b41      	ldr	r3, [pc, #260]	@ (8005acc <task_menu_update+0x8fc>)
 80059c6:	701a      	strb	r2, [r3, #0]
                        dt_buf[dt_idx] = '\0';
 80059c8:	4b40      	ldr	r3, [pc, #256]	@ (8005acc <task_menu_update+0x8fc>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	4b40      	ldr	r3, [pc, #256]	@ (8005ad0 <task_menu_update+0x900>)
 80059d0:	2100      	movs	r1, #0
 80059d2:	5499      	strb	r1, [r3, r2]
                        displayRowClear(1);
 80059d4:	2001      	movs	r0, #1
 80059d6:	f7fe fb53 	bl	8004080 <displayRowClear>
                        displayCharPositionWrite(0, 1);
 80059da:	2101      	movs	r1, #1
 80059dc:	2000      	movs	r0, #0
 80059de:	f7fe faa1 	bl	8003f24 <displayCharPositionWrite>
                        switch (dt_step) {
 80059e2:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad4 <task_menu_update+0x904>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d820      	bhi.n	8005a2c <task_menu_update+0x85c>
 80059ea:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <task_menu_update+0x820>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a05 	.word	0x08005a05
 80059f4:	08005a0d 	.word	0x08005a0d
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a1d 	.word	0x08005a1d
 8005a00:	08005a25 	.word	0x08005a25
                            case 0: displayStringWrite("DD:"); break;
 8005a04:	4834      	ldr	r0, [pc, #208]	@ (8005ad8 <task_menu_update+0x908>)
 8005a06:	f7fe faff 	bl	8004008 <displayStringWrite>
 8005a0a:	e00f      	b.n	8005a2c <task_menu_update+0x85c>
                            case 1: displayStringWrite("MM:"); break;
 8005a0c:	4833      	ldr	r0, [pc, #204]	@ (8005adc <task_menu_update+0x90c>)
 8005a0e:	f7fe fafb 	bl	8004008 <displayStringWrite>
 8005a12:	e00b      	b.n	8005a2c <task_menu_update+0x85c>
                            case 2: displayStringWrite("YY:"); break;
 8005a14:	4832      	ldr	r0, [pc, #200]	@ (8005ae0 <task_menu_update+0x910>)
 8005a16:	f7fe faf7 	bl	8004008 <displayStringWrite>
 8005a1a:	e007      	b.n	8005a2c <task_menu_update+0x85c>
                            case 3: displayStringWrite("HH:"); break;
 8005a1c:	4831      	ldr	r0, [pc, #196]	@ (8005ae4 <task_menu_update+0x914>)
 8005a1e:	f7fe faf3 	bl	8004008 <displayStringWrite>
 8005a22:	e003      	b.n	8005a2c <task_menu_update+0x85c>
                            case 4: displayStringWrite("mm:"); break;
 8005a24:	4830      	ldr	r0, [pc, #192]	@ (8005ae8 <task_menu_update+0x918>)
 8005a26:	f7fe faef 	bl	8004008 <displayStringWrite>
 8005a2a:	bf00      	nop
                        }
                        displayStringWrite("__");
 8005a2c:	482f      	ldr	r0, [pc, #188]	@ (8005aec <task_menu_update+0x91c>)
 8005a2e:	f7fe faeb 	bl	8004008 <displayStringWrite>
                        displayCharPositionWrite(3, 1);
 8005a32:	2101      	movs	r1, #1
 8005a34:	2003      	movs	r0, #3
 8005a36:	f7fe fa75 	bl	8003f24 <displayCharPositionWrite>
                        displayStringWrite(dt_buf);
 8005a3a:	4825      	ldr	r0, [pc, #148]	@ (8005ad0 <task_menu_update+0x900>)
 8005a3c:	f7fe fae4 	bl	8004008 <displayStringWrite>
                    } else {
                        displayRowClear(1);
                        displayCharPositionWrite(0, 1); displayStringWrite("Ingrese 2 digitos");
                    }
                }
                return;
 8005a40:	f001 b8cc 	b.w	8006bdc <task_menu_update+0x1a0c>
                else if (key == 'D') {
 8005a44:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005a48:	2b44      	cmp	r3, #68	@ 0x44
 8005a4a:	f041 80c7 	bne.w	8006bdc <task_menu_update+0x1a0c>
                    if (dt_idx == 2) {
 8005a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005acc <task_menu_update+0x8fc>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	f040 8109 	bne.w	8005c6a <task_menu_update+0xa9a>
                        uint8_t v = (uint8_t)atoi(dt_buf);
 8005a58:	481d      	ldr	r0, [pc, #116]	@ (8005ad0 <task_menu_update+0x900>)
 8005a5a:	f001 fe44 	bl	80076e6 <atoi>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                        bool ok = false;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
                        switch (dt_step) {
 8005a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad4 <task_menu_update+0x904>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d877      	bhi.n	8005b62 <task_menu_update+0x992>
 8005a72:	a201      	add	r2, pc, #4	@ (adr r2, 8005a78 <task_menu_update+0x8a8>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005a8d 	.word	0x08005a8d
 8005a7c:	08005af5 	.word	0x08005af5
 8005a80:	08005b15 	.word	0x08005b15
 8005a84:	08005b25 	.word	0x08005b25
 8005a88:	08005b3d 	.word	0x08005b3d
                            case 0: if (v >= 1 && v <= 31) { ed_day   = v; ok = true; } break;
 8005a8c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d05f      	beq.n	8005b54 <task_menu_update+0x984>
 8005a94:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005a98:	2b1f      	cmp	r3, #31
 8005a9a:	d85b      	bhi.n	8005b54 <task_menu_update+0x984>
 8005a9c:	4a14      	ldr	r2, [pc, #80]	@ (8005af0 <task_menu_update+0x920>)
 8005a9e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005aa2:	7013      	strb	r3, [r2, #0]
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8005aaa:	e053      	b.n	8005b54 <task_menu_update+0x984>
 8005aac:	20000491 	.word	0x20000491
 8005ab0:	20000494 	.word	0x20000494
 8005ab4:	51eb851f 	.word	0x51eb851f
 8005ab8:	20000230 	.word	0x20000230
 8005abc:	20000480 	.word	0x20000480
 8005ac0:	08008e74 	.word	0x08008e74
 8005ac4:	08008e88 	.word	0x08008e88
 8005ac8:	200004a6 	.word	0x200004a6
 8005acc:	200004ab 	.word	0x200004ab
 8005ad0:	200004a8 	.word	0x200004a8
 8005ad4:	200004a7 	.word	0x200004a7
 8005ad8:	08008eb8 	.word	0x08008eb8
 8005adc:	08008ebc 	.word	0x08008ebc
 8005ae0:	08008ec0 	.word	0x08008ec0
 8005ae4:	08008ec4 	.word	0x08008ec4
 8005ae8:	08008ec8 	.word	0x08008ec8
 8005aec:	08008ecc 	.word	0x08008ecc
 8005af0:	20000020 	.word	0x20000020
                            case 1: if (v >= 1 && v <= 12) { ed_month = v; ok = true; } break;
 8005af4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02d      	beq.n	8005b58 <task_menu_update+0x988>
 8005afc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005b00:	2b0c      	cmp	r3, #12
 8005b02:	d829      	bhi.n	8005b58 <task_menu_update+0x988>
 8005b04:	4aa5      	ldr	r2, [pc, #660]	@ (8005d9c <task_menu_update+0xbcc>)
 8005b06:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005b0a:	7013      	strb	r3, [r2, #0]
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8005b12:	e021      	b.n	8005b58 <task_menu_update+0x988>
                            case 2:                          { ed_year  = v; ok = true; } break;
 8005b14:	4aa2      	ldr	r2, [pc, #648]	@ (8005da0 <task_menu_update+0xbd0>)
 8005b16:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005b1a:	7013      	strb	r3, [r2, #0]
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8005b22:	e01e      	b.n	8005b62 <task_menu_update+0x992>
                            case 3: if (v <= 23)            { ed_hour  = v; ok = true; } break;
 8005b24:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005b28:	2b17      	cmp	r3, #23
 8005b2a:	d817      	bhi.n	8005b5c <task_menu_update+0x98c>
 8005b2c:	4a9d      	ldr	r2, [pc, #628]	@ (8005da4 <task_menu_update+0xbd4>)
 8005b2e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005b32:	7013      	strb	r3, [r2, #0]
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8005b3a:	e00f      	b.n	8005b5c <task_menu_update+0x98c>
                            case 4: if (v <= 59)            { ed_minute= v; ok = true; } break;
 8005b3c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005b40:	2b3b      	cmp	r3, #59	@ 0x3b
 8005b42:	d80d      	bhi.n	8005b60 <task_menu_update+0x990>
 8005b44:	4a98      	ldr	r2, [pc, #608]	@ (8005da8 <task_menu_update+0xbd8>)
 8005b46:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005b4a:	7013      	strb	r3, [r2, #0]
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8005b52:	e005      	b.n	8005b60 <task_menu_update+0x990>
                            case 0: if (v >= 1 && v <= 31) { ed_day   = v; ok = true; } break;
 8005b54:	bf00      	nop
 8005b56:	e004      	b.n	8005b62 <task_menu_update+0x992>
                            case 1: if (v >= 1 && v <= 12) { ed_month = v; ok = true; } break;
 8005b58:	bf00      	nop
 8005b5a:	e002      	b.n	8005b62 <task_menu_update+0x992>
                            case 3: if (v <= 23)            { ed_hour  = v; ok = true; } break;
 8005b5c:	bf00      	nop
 8005b5e:	e000      	b.n	8005b62 <task_menu_update+0x992>
                            case 4: if (v <= 59)            { ed_minute= v; ok = true; } break;
 8005b60:	bf00      	nop
                        if (!ok) {
 8005b62:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 8005b66:	f083 0301 	eor.w	r3, r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d011      	beq.n	8005b94 <task_menu_update+0x9c4>
                            displayRowClear(1);
 8005b70:	2001      	movs	r0, #1
 8005b72:	f7fe fa85 	bl	8004080 <displayRowClear>
                            displayCharPositionWrite(0, 1); displayStringWrite("Valor invalido");
 8005b76:	2101      	movs	r1, #1
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f7fe f9d3 	bl	8003f24 <displayCharPositionWrite>
 8005b7e:	488b      	ldr	r0, [pc, #556]	@ (8005dac <task_menu_update+0xbdc>)
 8005b80:	f7fe fa42 	bl	8004008 <displayStringWrite>
                            dt_idx = 0; dt_buf[0] = '\0';
 8005b84:	4b8a      	ldr	r3, [pc, #552]	@ (8005db0 <task_menu_update+0xbe0>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	4b8a      	ldr	r3, [pc, #552]	@ (8005db4 <task_menu_update+0xbe4>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
                return;
 8005b90:	f001 b824 	b.w	8006bdc <task_menu_update+0x1a0c>
                            dt_step++;
 8005b94:	4b88      	ldr	r3, [pc, #544]	@ (8005db8 <task_menu_update+0xbe8>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	4b86      	ldr	r3, [pc, #536]	@ (8005db8 <task_menu_update+0xbe8>)
 8005b9e:	701a      	strb	r2, [r3, #0]
                            dt_idx = 0; dt_buf[0] = '\0';
 8005ba0:	4b83      	ldr	r3, [pc, #524]	@ (8005db0 <task_menu_update+0xbe0>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	4b83      	ldr	r3, [pc, #524]	@ (8005db4 <task_menu_update+0xbe4>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	701a      	strb	r2, [r3, #0]
                            displayRowClear(1);
 8005bac:	2001      	movs	r0, #1
 8005bae:	f7fe fa67 	bl	8004080 <displayRowClear>
                            displayCharPositionWrite(0, 1);
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f7fe f9b5 	bl	8003f24 <displayCharPositionWrite>
                            if (dt_step == 1)      displayStringWrite("MM:__");
 8005bba:	4b7f      	ldr	r3, [pc, #508]	@ (8005db8 <task_menu_update+0xbe8>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d104      	bne.n	8005bcc <task_menu_update+0x9fc>
 8005bc2:	487e      	ldr	r0, [pc, #504]	@ (8005dbc <task_menu_update+0xbec>)
 8005bc4:	f7fe fa20 	bl	8004008 <displayStringWrite>
                return;
 8005bc8:	f001 b808 	b.w	8006bdc <task_menu_update+0x1a0c>
                            else if (dt_step == 2) displayStringWrite("YY:__");
 8005bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8005db8 <task_menu_update+0xbe8>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d104      	bne.n	8005bde <task_menu_update+0xa0e>
 8005bd4:	487a      	ldr	r0, [pc, #488]	@ (8005dc0 <task_menu_update+0xbf0>)
 8005bd6:	f7fe fa17 	bl	8004008 <displayStringWrite>
                return;
 8005bda:	f000 bfff 	b.w	8006bdc <task_menu_update+0x1a0c>
                            else if (dt_step == 3) displayStringWrite("HH:__");
 8005bde:	4b76      	ldr	r3, [pc, #472]	@ (8005db8 <task_menu_update+0xbe8>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d104      	bne.n	8005bf0 <task_menu_update+0xa20>
 8005be6:	4877      	ldr	r0, [pc, #476]	@ (8005dc4 <task_menu_update+0xbf4>)
 8005be8:	f7fe fa0e 	bl	8004008 <displayStringWrite>
                return;
 8005bec:	f000 bff6 	b.w	8006bdc <task_menu_update+0x1a0c>
                            else if (dt_step == 4) displayStringWrite("mm:__");
 8005bf0:	4b71      	ldr	r3, [pc, #452]	@ (8005db8 <task_menu_update+0xbe8>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d104      	bne.n	8005c02 <task_menu_update+0xa32>
 8005bf8:	4873      	ldr	r0, [pc, #460]	@ (8005dc8 <task_menu_update+0xbf8>)
 8005bfa:	f7fe fa05 	bl	8004008 <displayStringWrite>
                return;
 8005bfe:	f000 bfed 	b.w	8006bdc <task_menu_update+0x1a0c>
                                if (rtc_set_datetime(ed_day, ed_month, ed_year, ed_hour, ed_minute) == HAL_OK) {
 8005c02:	4b72      	ldr	r3, [pc, #456]	@ (8005dcc <task_menu_update+0xbfc>)
 8005c04:	7818      	ldrb	r0, [r3, #0]
 8005c06:	4b65      	ldr	r3, [pc, #404]	@ (8005d9c <task_menu_update+0xbcc>)
 8005c08:	7819      	ldrb	r1, [r3, #0]
 8005c0a:	4b65      	ldr	r3, [pc, #404]	@ (8005da0 <task_menu_update+0xbd0>)
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	4b65      	ldr	r3, [pc, #404]	@ (8005da4 <task_menu_update+0xbd4>)
 8005c10:	781c      	ldrb	r4, [r3, #0]
 8005c12:	4b65      	ldr	r3, [pc, #404]	@ (8005da8 <task_menu_update+0xbd8>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	4623      	mov	r3, r4
 8005c1a:	f7fe fe17 	bl	800484c <rtc_set_datetime>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10e      	bne.n	8005c42 <task_menu_update+0xa72>
                                    rtc_mark_initialized();
 8005c24:	f7fe fe74 	bl	8004910 <rtc_mark_initialized>
                                    displayClearFull();
 8005c28:	f7fe fa3e 	bl	80040a8 <displayClearFull>
                                    displayCharPositionWrite(0, 0); displayStringWrite("Reloj actualizado");
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f7fe f978 	bl	8003f24 <displayCharPositionWrite>
 8005c34:	4866      	ldr	r0, [pc, #408]	@ (8005dd0 <task_menu_update+0xc00>)
 8005c36:	f7fe f9e7 	bl	8004008 <displayStringWrite>
                                    dt_msg_ticks = 6;
 8005c3a:	4b66      	ldr	r3, [pc, #408]	@ (8005dd4 <task_menu_update+0xc04>)
 8005c3c:	2206      	movs	r2, #6
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e00b      	b.n	8005c5a <task_menu_update+0xa8a>
                                    displayClearFull();
 8005c42:	f7fe fa31 	bl	80040a8 <displayClearFull>
                                    displayCharPositionWrite(0, 0); displayStringWrite("Error al ajustar");
 8005c46:	2100      	movs	r1, #0
 8005c48:	2000      	movs	r0, #0
 8005c4a:	f7fe f96b 	bl	8003f24 <displayCharPositionWrite>
 8005c4e:	4862      	ldr	r0, [pc, #392]	@ (8005dd8 <task_menu_update+0xc08>)
 8005c50:	f7fe f9da 	bl	8004008 <displayStringWrite>
                                    dt_msg_ticks = 6;
 8005c54:	4b5f      	ldr	r3, [pc, #380]	@ (8005dd4 <task_menu_update+0xc04>)
 8005c56:	2206      	movs	r2, #6
 8005c58:	801a      	strh	r2, [r3, #0]
                                dt_edit_in_progress = false;
 8005c5a:	4b60      	ldr	r3, [pc, #384]	@ (8005ddc <task_menu_update+0xc0c>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
                                setup_menu_active = true;
 8005c60:	4b5f      	ldr	r3, [pc, #380]	@ (8005de0 <task_menu_update+0xc10>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	701a      	strb	r2, [r3, #0]
                return;
 8005c66:	f000 bfb9 	b.w	8006bdc <task_menu_update+0x1a0c>
                        displayRowClear(1);
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	f7fe fa08 	bl	8004080 <displayRowClear>
                        displayCharPositionWrite(0, 1); displayStringWrite("Ingrese 2 digitos");
 8005c70:	2101      	movs	r1, #1
 8005c72:	2000      	movs	r0, #0
 8005c74:	f7fe f956 	bl	8003f24 <displayCharPositionWrite>
 8005c78:	485a      	ldr	r0, [pc, #360]	@ (8005de4 <task_menu_update+0xc14>)
 8005c7a:	f7fe f9c5 	bl	8004008 <displayStringWrite>
                return;
 8005c7e:	f000 bfad 	b.w	8006bdc <task_menu_update+0x1a0c>
 8005c82:	f000 bfab 	b.w	8006bdc <task_menu_update+0x1a0c>
            }

            /* ======== Type selection ======== */
            if (exit_type_selection_in_progress) {
 8005c86:	4b58      	ldr	r3, [pc, #352]	@ (8005de8 <task_menu_update+0xc18>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8286 	beq.w	800619c <task_menu_update+0xfcc>
                if (key == 'D') {
 8005c90:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005c94:	2b44      	cmp	r3, #68	@ 0x44
 8005c96:	d12a      	bne.n	8005cee <task_menu_update+0xb1e>
                    exit_vehicle_type_page = !exit_vehicle_type_page;
 8005c98:	4b54      	ldr	r3, [pc, #336]	@ (8005dec <task_menu_update+0xc1c>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f083 0301 	eor.w	r3, r3, #1
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8005dec <task_menu_update+0xc1c>)
 8005cb4:	701a      	strb	r2, [r3, #0]
                    displayClearFull();
 8005cb6:	f7fe f9f7 	bl	80040a8 <displayClearFull>
                    displayCharPositionWrite(0, 0); displayStringWrite("Tipo Vehiculo:");
 8005cba:	2100      	movs	r1, #0
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f7fe f931 	bl	8003f24 <displayCharPositionWrite>
 8005cc2:	484b      	ldr	r0, [pc, #300]	@ (8005df0 <task_menu_update+0xc20>)
 8005cc4:	f7fe f9a0 	bl	8004008 <displayStringWrite>
                    displayCharPositionWrite(0, 1);
 8005cc8:	2101      	movs	r1, #1
 8005cca:	2000      	movs	r0, #0
 8005ccc:	f7fe f92a 	bl	8003f24 <displayCharPositionWrite>
                    displayStringWrite(!exit_vehicle_type_page ? "1:Bici  2:Moto"
 8005cd0:	4b46      	ldr	r3, [pc, #280]	@ (8005dec <task_menu_update+0xc1c>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f083 0301 	eor.w	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <task_menu_update+0xb12>
 8005cde:	4b45      	ldr	r3, [pc, #276]	@ (8005df4 <task_menu_update+0xc24>)
 8005ce0:	e000      	b.n	8005ce4 <task_menu_update+0xb14>
 8005ce2:	4b45      	ldr	r3, [pc, #276]	@ (8005df8 <task_menu_update+0xc28>)
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fe f98f 	bl	8004008 <displayStringWrite>
                    }

                    exit_type_selection_in_progress = false;
                    exit_in_progress = false;
                }
                return;
 8005cea:	f000 bf79 	b.w	8006be0 <task_menu_update+0x1a10>
                else if (key >= '1' && key <= '4') {
 8005cee:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005cf2:	2b30      	cmp	r3, #48	@ 0x30
 8005cf4:	f240 8774 	bls.w	8006be0 <task_menu_update+0x1a10>
 8005cf8:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005cfc:	2b34      	cmp	r3, #52	@ 0x34
 8005cfe:	f200 876f 	bhi.w	8006be0 <task_menu_update+0x1a10>
                    vehicleType_t category = (vehicleType_t)(key - '0');
 8005d02:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8005d06:	3b30      	subs	r3, #48	@ 0x30
 8005d08:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
                    int idx = findVehicle(plate_temp);
 8005d0c:	483b      	ldr	r0, [pc, #236]	@ (8005dfc <task_menu_update+0xc2c>)
 8005d0e:	f7fe fe0b 	bl	8004928 <findVehicle>
 8005d12:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
                    if (idx >= 0) {
 8005d16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f2c0 8218 	blt.w	8006150 <task_menu_update+0xf80>
                        if (vehicles[idx].category != category) {
 8005d20:	4937      	ldr	r1, [pc, #220]	@ (8005e00 <task_menu_update+0xc30>)
 8005d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d26:	4613      	mov	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	4413      	add	r3, r2
 8005d30:	440b      	add	r3, r1
 8005d32:	3309      	adds	r3, #9
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d06c      	beq.n	8005e18 <task_menu_update+0xc48>
                            displayRowClear(1);
 8005d3e:	2001      	movs	r0, #1
 8005d40:	f7fe f99e 	bl	8004080 <displayRowClear>
                            displayCharPositionWrite(0, 1); displayStringWrite("No encontrado");
 8005d44:	2101      	movs	r1, #1
 8005d46:	2000      	movs	r0, #0
 8005d48:	f7fe f8ec 	bl	8003f24 <displayCharPositionWrite>
 8005d4c:	482d      	ldr	r0, [pc, #180]	@ (8005e04 <task_menu_update+0xc34>)
 8005d4e:	f7fe f95b 	bl	8004008 <displayStringWrite>
                            exit_display_ticks = DISPLAY_DELAY_TICKS;
 8005d52:	4b2d      	ldr	r3, [pc, #180]	@ (8005e08 <task_menu_update+0xc38>)
 8005d54:	2206      	movs	r2, #6
 8005d56:	801a      	strh	r2, [r3, #0]
                            LOGGER_LOG("Error tipo egreso %s (esp %d, ing %d)\r\n",
 8005d58:	b672      	cpsid	i
 8005d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8005e0c <task_menu_update+0xc3c>)
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	4928      	ldr	r1, [pc, #160]	@ (8005e00 <task_menu_update+0xc30>)
 8005d60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	4413      	add	r3, r2
 8005d6e:	440b      	add	r3, r1
 8005d70:	3309      	adds	r3, #9
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	9200      	str	r2, [sp, #0]
 8005d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8005dfc <task_menu_update+0xc2c>)
 8005d80:	4a23      	ldr	r2, [pc, #140]	@ (8005e10 <task_menu_update+0xc40>)
 8005d82:	213f      	movs	r1, #63	@ 0x3f
 8005d84:	f001 fec8 	bl	8007b18 <sniprintf>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	4a22      	ldr	r2, [pc, #136]	@ (8005e14 <task_menu_update+0xc44>)
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005e0c <task_menu_update+0xc3c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fc1e 	bl	80045d4 <logger_log_print_>
 8005d98:	b662      	cpsie	i
 8005d9a:	e1f7      	b.n	800618c <task_menu_update+0xfbc>
 8005d9c:	20000021 	.word	0x20000021
 8005da0:	20000022 	.word	0x20000022
 8005da4:	20000023 	.word	0x20000023
 8005da8:	200004ac 	.word	0x200004ac
 8005dac:	08008ed0 	.word	0x08008ed0
 8005db0:	200004ab 	.word	0x200004ab
 8005db4:	200004a8 	.word	0x200004a8
 8005db8:	200004a7 	.word	0x200004a7
 8005dbc:	08008ee0 	.word	0x08008ee0
 8005dc0:	08008ee8 	.word	0x08008ee8
 8005dc4:	08008ef0 	.word	0x08008ef0
 8005dc8:	08008ef8 	.word	0x08008ef8
 8005dcc:	20000020 	.word	0x20000020
 8005dd0:	08008f00 	.word	0x08008f00
 8005dd4:	200004ae 	.word	0x200004ae
 8005dd8:	08008f14 	.word	0x08008f14
 8005ddc:	200004a6 	.word	0x200004a6
 8005de0:	20000480 	.word	0x20000480
 8005de4:	08008f28 	.word	0x08008f28
 8005de8:	2000046c 	.word	0x2000046c
 8005dec:	2000046d 	.word	0x2000046d
 8005df0:	08008d70 	.word	0x08008d70
 8005df4:	08008d80 	.word	0x08008d80
 8005df8:	08008d90 	.word	0x08008d90
 8005dfc:	20000468 	.word	0x20000468
 8005e00:	20000230 	.word	0x20000230
 8005e04:	08008f3c 	.word	0x08008f3c
 8005e08:	20000460 	.word	0x20000460
 8005e0c:	08009200 	.word	0x08009200
 8005e10:	08008f4c 	.word	0x08008f4c
 8005e14:	20000204 	.word	0x20000204
                            rtc_get_datetime(&d_now,&m_now,&y_now,&h_now,&min_now);
 8005e18:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8005e1c:	f107 026d 	add.w	r2, r7, #109	@ 0x6d
 8005e20:	f107 016e 	add.w	r1, r7, #110	@ 0x6e
 8005e24:	f107 006f 	add.w	r0, r7, #111	@ 0x6f
 8005e28:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	4623      	mov	r3, r4
 8005e30:	f7fe fcd2 	bl	80047d8 <rtc_get_datetime>
                            uint32_t mins = elapsedMinutes(
 8005e34:	49b9      	ldr	r1, [pc, #740]	@ (800611c <task_menu_update+0xf4c>)
 8005e36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	440b      	add	r3, r1
 8005e46:	3304      	adds	r3, #4
 8005e48:	781e      	ldrb	r6, [r3, #0]
 8005e4a:	49b4      	ldr	r1, [pc, #720]	@ (800611c <task_menu_update+0xf4c>)
 8005e4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	4413      	add	r3, r2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3305      	adds	r3, #5
 8005e5e:	f893 c000 	ldrb.w	ip, [r3]
 8005e62:	49ae      	ldr	r1, [pc, #696]	@ (800611c <task_menu_update+0xf4c>)
 8005e64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	440b      	add	r3, r1
 8005e74:	3306      	adds	r3, #6
 8005e76:	f893 e000 	ldrb.w	lr, [r3]
 8005e7a:	49a8      	ldr	r1, [pc, #672]	@ (800611c <task_menu_update+0xf4c>)
 8005e7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	4413      	add	r3, r2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3307      	adds	r3, #7
 8005e8e:	f893 8000 	ldrb.w	r8, [r3]
 8005e92:	49a2      	ldr	r1, [pc, #648]	@ (800611c <task_menu_update+0xf4c>)
 8005e94:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	4413      	add	r3, r2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8005eac:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
 8005eb0:	f897 006d 	ldrb.w	r0, [r7, #109]	@ 0x6d
 8005eb4:	f897 406c 	ldrb.w	r4, [r7, #108]	@ 0x6c
 8005eb8:	f897 506b 	ldrb.w	r5, [r7, #107]	@ 0x6b
 8005ebc:	9505      	str	r5, [sp, #20]
 8005ebe:	9404      	str	r4, [sp, #16]
 8005ec0:	9003      	str	r0, [sp, #12]
 8005ec2:	9102      	str	r1, [sp, #8]
 8005ec4:	9201      	str	r2, [sp, #4]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	4643      	mov	r3, r8
 8005eca:	4672      	mov	r2, lr
 8005ecc:	4661      	mov	r1, ip
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f7fe fe22 	bl	8004b18 <elapsedMinutes>
 8005ed4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                            uint32_t price = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                            switch (category) {
 8005ede:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d833      	bhi.n	8005f50 <task_menu_update+0xd80>
 8005ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef0 <task_menu_update+0xd20>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f15 	.word	0x08005f15
 8005ef8:	08005f29 	.word	0x08005f29
 8005efc:	08005f3d 	.word	0x08005f3d
                                case BIKE:        price = mins * rates.bike_rate; break;
 8005f00:	4b87      	ldr	r3, [pc, #540]	@ (8006120 <task_menu_update+0xf50>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f0a:	fb02 f303 	mul.w	r3, r2, r3
 8005f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f12:	e01e      	b.n	8005f52 <task_menu_update+0xd82>
                                case MOTORCYCLE:  price = mins * rates.motorcycle_rate; break;
 8005f14:	4b82      	ldr	r3, [pc, #520]	@ (8006120 <task_menu_update+0xf50>)
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f26:	e014      	b.n	8005f52 <task_menu_update+0xd82>
                                case CAR:         price = mins * rates.car_rate; break;
 8005f28:	4b7d      	ldr	r3, [pc, #500]	@ (8006120 <task_menu_update+0xf50>)
 8005f2a:	789b      	ldrb	r3, [r3, #2]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f3a:	e00a      	b.n	8005f52 <task_menu_update+0xd82>
                                case TRUCK:       price = mins * rates.truck_rate; break;
 8005f3c:	4b78      	ldr	r3, [pc, #480]	@ (8006120 <task_menu_update+0xf50>)
 8005f3e:	78db      	ldrb	r3, [r3, #3]
 8005f40:	461a      	mov	r2, r3
 8005f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f4e:	e000      	b.n	8005f52 <task_menu_update+0xd82>
                                default: break;
 8005f50:	bf00      	nop
                            snprintf(msg, sizeof(msg), "Tiempo: %lu min", mins);
 8005f52:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8005f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f5a:	4a72      	ldr	r2, [pc, #456]	@ (8006124 <task_menu_update+0xf54>)
 8005f5c:	2110      	movs	r1, #16
 8005f5e:	f001 fddb 	bl	8007b18 <sniprintf>
                            displayRowClear(1);
 8005f62:	2001      	movs	r0, #1
 8005f64:	f7fe f88c 	bl	8004080 <displayRowClear>
                            displayCharPositionWrite(0, 1); displayStringWrite(msg);
 8005f68:	2101      	movs	r1, #1
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	f7fd ffda 	bl	8003f24 <displayCharPositionWrite>
 8005f70:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fe f847 	bl	8004008 <displayStringWrite>
                            exit_display_ticks = DISPLAY_DELAY_TICKS;
 8005f7a:	4b6b      	ldr	r3, [pc, #428]	@ (8006128 <task_menu_update+0xf58>)
 8005f7c:	2206      	movs	r2, #6
 8005f7e:	801a      	strh	r2, [r3, #0]
                            snprintf(price_msg, sizeof(price_msg), "Precio: $%lu", price);
 8005f80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005f84:	4a69      	ldr	r2, [pc, #420]	@ (800612c <task_menu_update+0xf5c>)
 8005f86:	2110      	movs	r1, #16
 8005f88:	4869      	ldr	r0, [pc, #420]	@ (8006130 <task_menu_update+0xf60>)
 8005f8a:	f001 fdc5 	bl	8007b18 <sniprintf>
                            price_display_ticks = DISPLAY_DELAY_TICKS;
 8005f8e:	4b69      	ldr	r3, [pc, #420]	@ (8006134 <task_menu_update+0xf64>)
 8005f90:	2206      	movs	r2, #6
 8005f92:	801a      	strh	r2, [r3, #0]
                            LOGGER_LOG("Egreso %s - %lu min - Tipo:%d - $%lu\r\n",
 8005f94:	b672      	cpsid	i
 8005f96:	4b68      	ldr	r3, [pc, #416]	@ (8006138 <task_menu_update+0xf68>)
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8005f9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fa2:	9202      	str	r2, [sp, #8]
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	4b63      	ldr	r3, [pc, #396]	@ (800613c <task_menu_update+0xf6c>)
 8005fae:	4a64      	ldr	r2, [pc, #400]	@ (8006140 <task_menu_update+0xf70>)
 8005fb0:	213f      	movs	r1, #63	@ 0x3f
 8005fb2:	f001 fdb1 	bl	8007b18 <sniprintf>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4a62      	ldr	r2, [pc, #392]	@ (8006144 <task_menu_update+0xf74>)
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8006138 <task_menu_update+0xf68>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fb07 	bl	80045d4 <logger_log_print_>
 8005fc6:	b662      	cpsie	i
                            total_collected += price;
 8005fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8006148 <task_menu_update+0xf78>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fd0:	4413      	add	r3, r2
 8005fd2:	4a5d      	ldr	r2, [pc, #372]	@ (8006148 <task_menu_update+0xf78>)
 8005fd4:	6013      	str	r3, [r2, #0]
                            strncpy(x.plate, plate_temp, sizeof(x.plate)-1);
 8005fd6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005fda:	2203      	movs	r2, #3
 8005fdc:	4957      	ldr	r1, [pc, #348]	@ (800613c <task_menu_update+0xf6c>)
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fe19 	bl	8007c16 <strncpy>
                            x.plate[sizeof(x.plate)-1]='\0';
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                            x.category  = (uint8_t)category;
 8005fea:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8005fee:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                            x.in_day    = vehicles[idx].day;   x.in_month = vehicles[idx].month;
 8005ff2:	494a      	ldr	r1, [pc, #296]	@ (800611c <task_menu_update+0xf4c>)
 8005ff4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	4413      	add	r3, r2
 8006002:	440b      	add	r3, r1
 8006004:	3304      	adds	r3, #4
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800600c:	4943      	ldr	r1, [pc, #268]	@ (800611c <task_menu_update+0xf4c>)
 800600e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4413      	add	r3, r2
 800601c:	440b      	add	r3, r1
 800601e:	3305      	adds	r3, #5
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                            x.in_year   = vehicles[idx].year;  x.in_hour  = vehicles[idx].hour;
 8006026:	493d      	ldr	r1, [pc, #244]	@ (800611c <task_menu_update+0xf4c>)
 8006028:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	4413      	add	r3, r2
 8006036:	440b      	add	r3, r1
 8006038:	3306      	adds	r3, #6
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8006040:	4936      	ldr	r1, [pc, #216]	@ (800611c <task_menu_update+0xf4c>)
 8006042:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	4413      	add	r3, r2
 8006050:	440b      	add	r3, r1
 8006052:	3307      	adds	r3, #7
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                            x.in_min    = vehicles[idx].minute;
 800605a:	4930      	ldr	r1, [pc, #192]	@ (800611c <task_menu_update+0xf4c>)
 800605c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	4413      	add	r3, r2
 800606a:	440b      	add	r3, r1
 800606c:	3308      	adds	r3, #8
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                            x.out_day   = d_now;   x.out_month = m_now; x.out_year = y_now;
 8006074:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006078:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800607c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8006080:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006084:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006088:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                            x.out_hour  = h_now;   x.out_min   = min_now;
 800608c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8006090:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8006094:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006098:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
                            x.minutes   = (uint16_t)((mins > 65535u) ? 65535u : mins);
 800609c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a4:	d203      	bcs.n	80060ae <task_menu_update+0xede>
 80060a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	e001      	b.n	80060b2 <task_menu_update+0xee2>
 80060ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80060b2:	f8a7 3053 	strh.w	r3, [r7, #83]	@ 0x53
                            x.price     = (uint16_t)((price > 65535u) ? 65535u : price);
 80060b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80060ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060be:	d203      	bcs.n	80060c8 <task_menu_update+0xef8>
 80060c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	e001      	b.n	80060cc <task_menu_update+0xefc>
 80060c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80060cc:	f8a7 3055 	strh.w	r3, [r7, #85]	@ 0x55
                            if (exitlog_append(&x) != HAL_OK){
 80060d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe fe65 	bl	8004da4 <exitlog_append>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d010      	beq.n	8006102 <task_menu_update+0xf32>
                                LOGGER_LOG("EEPROM egresos: LLENA/ERROR\r\n");
 80060e0:	b672      	cpsid	i
 80060e2:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <task_menu_update+0xf68>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a19      	ldr	r2, [pc, #100]	@ (800614c <task_menu_update+0xf7c>)
 80060e8:	213f      	movs	r1, #63	@ 0x3f
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fd14 	bl	8007b18 <sniprintf>
 80060f0:	4603      	mov	r3, r0
 80060f2:	4a14      	ldr	r2, [pc, #80]	@ (8006144 <task_menu_update+0xf74>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b10      	ldr	r3, [pc, #64]	@ (8006138 <task_menu_update+0xf68>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe fa6a 	bl	80045d4 <logger_log_print_>
 8006100:	b662      	cpsie	i
                            vehicles[idx].occupied = false;
 8006102:	4906      	ldr	r1, [pc, #24]	@ (800611c <task_menu_update+0xf4c>)
 8006104:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	4413      	add	r3, r2
 8006112:	440b      	add	r3, r1
 8006114:	330a      	adds	r3, #10
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	e037      	b.n	800618c <task_menu_update+0xfbc>
 800611c:	20000230 	.word	0x20000230
 8006120:	2000001c 	.word	0x2000001c
 8006124:	08008f74 	.word	0x08008f74
 8006128:	20000460 	.word	0x20000460
 800612c:	08008f84 	.word	0x08008f84
 8006130:	20000470 	.word	0x20000470
 8006134:	2000046e 	.word	0x2000046e
 8006138:	08009200 	.word	0x08009200
 800613c:	20000468 	.word	0x20000468
 8006140:	08008f94 	.word	0x08008f94
 8006144:	20000204 	.word	0x20000204
 8006148:	20000484 	.word	0x20000484
 800614c:	08008fbc 	.word	0x08008fbc
                        displayRowClear(1);
 8006150:	2001      	movs	r0, #1
 8006152:	f7fd ff95 	bl	8004080 <displayRowClear>
                        displayCharPositionWrite(0, 1); displayStringWrite("No encontrado");
 8006156:	2101      	movs	r1, #1
 8006158:	2000      	movs	r0, #0
 800615a:	f7fd fee3 	bl	8003f24 <displayCharPositionWrite>
 800615e:	48a2      	ldr	r0, [pc, #648]	@ (80063e8 <task_menu_update+0x1218>)
 8006160:	f7fd ff52 	bl	8004008 <displayStringWrite>
                        exit_display_ticks = DISPLAY_DELAY_TICKS;
 8006164:	4ba1      	ldr	r3, [pc, #644]	@ (80063ec <task_menu_update+0x121c>)
 8006166:	2206      	movs	r2, #6
 8006168:	801a      	strh	r2, [r3, #0]
                        LOGGER_LOG("Patente %s no encontrada\r\n", plate_temp);
 800616a:	b672      	cpsid	i
 800616c:	4ba0      	ldr	r3, [pc, #640]	@ (80063f0 <task_menu_update+0x1220>)
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	4ba0      	ldr	r3, [pc, #640]	@ (80063f4 <task_menu_update+0x1224>)
 8006172:	4aa1      	ldr	r2, [pc, #644]	@ (80063f8 <task_menu_update+0x1228>)
 8006174:	213f      	movs	r1, #63	@ 0x3f
 8006176:	f001 fccf 	bl	8007b18 <sniprintf>
 800617a:	4603      	mov	r3, r0
 800617c:	4a9f      	ldr	r2, [pc, #636]	@ (80063fc <task_menu_update+0x122c>)
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	4b9b      	ldr	r3, [pc, #620]	@ (80063f0 <task_menu_update+0x1220>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe fa25 	bl	80045d4 <logger_log_print_>
 800618a:	b662      	cpsie	i
                    exit_type_selection_in_progress = false;
 800618c:	4b9c      	ldr	r3, [pc, #624]	@ (8006400 <task_menu_update+0x1230>)
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
                    exit_in_progress = false;
 8006192:	4b9c      	ldr	r3, [pc, #624]	@ (8006404 <task_menu_update+0x1234>)
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
                return;
 8006198:	f000 bd22 	b.w	8006be0 <task_menu_update+0x1a10>
            }

            /* ======== Swap mode ======== */
            if (key == 'A') {
 800619c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80061a0:	2b41      	cmp	r3, #65	@ 0x41
 80061a2:	d121      	bne.n	80061e8 <task_menu_update+0x1018>
                if (current_mode == NORMAL_MODE) {
 80061a4:	4b98      	ldr	r3, [pc, #608]	@ (8006408 <task_menu_update+0x1238>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d116      	bne.n	80061da <task_menu_update+0x100a>
                    current_mode = SETUP_MODE;
 80061ac:	4b96      	ldr	r3, [pc, #600]	@ (8006408 <task_menu_update+0x1238>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	701a      	strb	r2, [r3, #0]
                    setup_menu_active = true;
 80061b2:	4b96      	ldr	r3, [pc, #600]	@ (800640c <task_menu_update+0x123c>)
 80061b4:	2201      	movs	r2, #1
 80061b6:	701a      	strb	r2, [r3, #0]
                    displayClearFull();
 80061b8:	f7fd ff76 	bl	80040a8 <displayClearFull>
                    displayCharPositionWrite(0, 0); displayStringWrite("Tarifas:1 Caja:2");
 80061bc:	2100      	movs	r1, #0
 80061be:	2000      	movs	r0, #0
 80061c0:	f7fd feb0 	bl	8003f24 <displayCharPositionWrite>
 80061c4:	4892      	ldr	r0, [pc, #584]	@ (8006410 <task_menu_update+0x1240>)
 80061c6:	f7fd ff1f 	bl	8004008 <displayStringWrite>
                    displayCharPositionWrite(0, 1); displayStringWrite("Lista:3   Hora:4");
 80061ca:	2101      	movs	r1, #1
 80061cc:	2000      	movs	r0, #0
 80061ce:	f7fd fea9 	bl	8003f24 <displayCharPositionWrite>
 80061d2:	4890      	ldr	r0, [pc, #576]	@ (8006414 <task_menu_update+0x1244>)
 80061d4:	f7fd ff18 	bl	8004008 <displayStringWrite>
 80061d8:	e205      	b.n	80065e6 <task_menu_update+0x1416>
                } else {
                    current_mode = NORMAL_MODE;
 80061da:	4b8b      	ldr	r3, [pc, #556]	@ (8006408 <task_menu_update+0x1238>)
 80061dc:	2200      	movs	r2, #0
 80061de:	701a      	strb	r2, [r3, #0]
                    setup_menu_active = false;
 80061e0:	4b8a      	ldr	r3, [pc, #552]	@ (800640c <task_menu_update+0x123c>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	e1fe      	b.n	80065e6 <task_menu_update+0x1416>
                }
            }
            else if (current_mode == NORMAL_MODE) {
 80061e8:	4b87      	ldr	r3, [pc, #540]	@ (8006408 <task_menu_update+0x1238>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 812b 	bne.w	8006448 <task_menu_update+0x1278>

                if (key == '#') {
 80061f2:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80061f6:	2b23      	cmp	r3, #35	@ 0x23
 80061f8:	d110      	bne.n	800621c <task_menu_update+0x104c>
                    exit_in_progress = true;
 80061fa:	4b82      	ldr	r3, [pc, #520]	@ (8006404 <task_menu_update+0x1234>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	701a      	strb	r2, [r3, #0]
                    exit_plate_index = 0;
 8006200:	4b85      	ldr	r3, [pc, #532]	@ (8006418 <task_menu_update+0x1248>)
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
                    exit_plate_buffer[0] = '\0';
 8006206:	4b85      	ldr	r3, [pc, #532]	@ (800641c <task_menu_update+0x124c>)
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
                    displayCharPositionWrite(0, 1); displayStringWrite("Egreso:      ");
 800620c:	2101      	movs	r1, #1
 800620e:	2000      	movs	r0, #0
 8006210:	f7fd fe88 	bl	8003f24 <displayCharPositionWrite>
 8006214:	4882      	ldr	r0, [pc, #520]	@ (8006420 <task_menu_update+0x1250>)
 8006216:	f7fd fef7 	bl	8004008 <displayStringWrite>
 800621a:	e1e4      	b.n	80065e6 <task_menu_update+0x1416>
                }
                else if (exit_in_progress) {
 800621c:	4b79      	ldr	r3, [pc, #484]	@ (8006404 <task_menu_update+0x1234>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d06d      	beq.n	8006300 <task_menu_update+0x1130>
                    if (key >= '0' && key <= '9') {
 8006224:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006228:	2b2f      	cmp	r3, #47	@ 0x2f
 800622a:	d945      	bls.n	80062b8 <task_menu_update+0x10e8>
 800622c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006230:	2b39      	cmp	r3, #57	@ 0x39
 8006232:	d841      	bhi.n	80062b8 <task_menu_update+0x10e8>
                        if (exit_plate_index < 3) {
 8006234:	4b78      	ldr	r3, [pc, #480]	@ (8006418 <task_menu_update+0x1248>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d81d      	bhi.n	8006278 <task_menu_update+0x10a8>
                            exit_plate_buffer[exit_plate_index++] = key;
 800623c:	4b76      	ldr	r3, [pc, #472]	@ (8006418 <task_menu_update+0x1248>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	b2d1      	uxtb	r1, r2
 8006244:	4a74      	ldr	r2, [pc, #464]	@ (8006418 <task_menu_update+0x1248>)
 8006246:	7011      	strb	r1, [r2, #0]
 8006248:	4619      	mov	r1, r3
 800624a:	4a74      	ldr	r2, [pc, #464]	@ (800641c <task_menu_update+0x124c>)
 800624c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006250:	5453      	strb	r3, [r2, r1]
                            exit_plate_buffer[exit_plate_index]   = '\0';
 8006252:	4b71      	ldr	r3, [pc, #452]	@ (8006418 <task_menu_update+0x1248>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	4b70      	ldr	r3, [pc, #448]	@ (800641c <task_menu_update+0x124c>)
 800625a:	2100      	movs	r1, #0
 800625c:	5499      	strb	r1, [r3, r2]
                            displayRowClear(1);
 800625e:	2001      	movs	r0, #1
 8006260:	f7fd ff0e 	bl	8004080 <displayRowClear>
                            displayCharPositionWrite(0, 1);
 8006264:	2101      	movs	r1, #1
 8006266:	2000      	movs	r0, #0
 8006268:	f7fd fe5c 	bl	8003f24 <displayCharPositionWrite>
                            displayStringWrite("Egreso: ");
 800626c:	486d      	ldr	r0, [pc, #436]	@ (8006424 <task_menu_update+0x1254>)
 800626e:	f7fd fecb 	bl	8004008 <displayStringWrite>
                            displayStringWrite(exit_plate_buffer);
 8006272:	486a      	ldr	r0, [pc, #424]	@ (800641c <task_menu_update+0x124c>)
 8006274:	f7fd fec8 	bl	8004008 <displayStringWrite>
                        }
                        if (exit_plate_index == 3) {
 8006278:	4b67      	ldr	r3, [pc, #412]	@ (8006418 <task_menu_update+0x1248>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b03      	cmp	r3, #3
 800627e:	f040 81b2 	bne.w	80065e6 <task_menu_update+0x1416>
                            strcpy(plate_temp, exit_plate_buffer);
 8006282:	4966      	ldr	r1, [pc, #408]	@ (800641c <task_menu_update+0x124c>)
 8006284:	485b      	ldr	r0, [pc, #364]	@ (80063f4 <task_menu_update+0x1224>)
 8006286:	f001 fd4c 	bl	8007d22 <strcpy>
                            exit_type_selection_in_progress = true;
 800628a:	4b5d      	ldr	r3, [pc, #372]	@ (8006400 <task_menu_update+0x1230>)
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
                            exit_vehicle_type_page = false;
 8006290:	4b65      	ldr	r3, [pc, #404]	@ (8006428 <task_menu_update+0x1258>)
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]
                            displayClearFull();
 8006296:	f7fd ff07 	bl	80040a8 <displayClearFull>
                            displayCharPositionWrite(0, 0); displayStringWrite("Tipo Vehiculo:");
 800629a:	2100      	movs	r1, #0
 800629c:	2000      	movs	r0, #0
 800629e:	f7fd fe41 	bl	8003f24 <displayCharPositionWrite>
 80062a2:	4862      	ldr	r0, [pc, #392]	@ (800642c <task_menu_update+0x125c>)
 80062a4:	f7fd feb0 	bl	8004008 <displayStringWrite>
                            displayCharPositionWrite(0, 1); displayStringWrite("1:Bici  2:Moto");
 80062a8:	2101      	movs	r1, #1
 80062aa:	2000      	movs	r0, #0
 80062ac:	f7fd fe3a 	bl	8003f24 <displayCharPositionWrite>
 80062b0:	485f      	ldr	r0, [pc, #380]	@ (8006430 <task_menu_update+0x1260>)
 80062b2:	f7fd fea9 	bl	8004008 <displayStringWrite>
                        if (exit_plate_index == 3) {
 80062b6:	e196      	b.n	80065e6 <task_menu_update+0x1416>
                        }
                    }
                    else if (key == 'C') {
 80062b8:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80062bc:	2b43      	cmp	r3, #67	@ 0x43
 80062be:	f040 8192 	bne.w	80065e6 <task_menu_update+0x1416>
                        if (exit_plate_index > 0) {
 80062c2:	4b55      	ldr	r3, [pc, #340]	@ (8006418 <task_menu_update+0x1248>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 818d 	beq.w	80065e6 <task_menu_update+0x1416>
                            exit_plate_index--;
 80062cc:	4b52      	ldr	r3, [pc, #328]	@ (8006418 <task_menu_update+0x1248>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	4b50      	ldr	r3, [pc, #320]	@ (8006418 <task_menu_update+0x1248>)
 80062d6:	701a      	strb	r2, [r3, #0]
                            exit_plate_buffer[exit_plate_index] = '\0';
 80062d8:	4b4f      	ldr	r3, [pc, #316]	@ (8006418 <task_menu_update+0x1248>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	4b4f      	ldr	r3, [pc, #316]	@ (800641c <task_menu_update+0x124c>)
 80062e0:	2100      	movs	r1, #0
 80062e2:	5499      	strb	r1, [r3, r2]
                            displayRowClear(1);
 80062e4:	2001      	movs	r0, #1
 80062e6:	f7fd fecb 	bl	8004080 <displayRowClear>
                            displayCharPositionWrite(0, 1);
 80062ea:	2101      	movs	r1, #1
 80062ec:	2000      	movs	r0, #0
 80062ee:	f7fd fe19 	bl	8003f24 <displayCharPositionWrite>
                            displayStringWrite("Egreso: ");
 80062f2:	484c      	ldr	r0, [pc, #304]	@ (8006424 <task_menu_update+0x1254>)
 80062f4:	f7fd fe88 	bl	8004008 <displayStringWrite>
                            displayStringWrite(exit_plate_buffer);
 80062f8:	4848      	ldr	r0, [pc, #288]	@ (800641c <task_menu_update+0x124c>)
 80062fa:	f7fd fe85 	bl	8004008 <displayStringWrite>
 80062fe:	e172      	b.n	80065e6 <task_menu_update+0x1416>
                        }
                    }
                }
                else {
                    if (key >= '0' && key <= '9') {
 8006300:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006304:	2b2f      	cmp	r3, #47	@ 0x2f
 8006306:	d94b      	bls.n	80063a0 <task_menu_update+0x11d0>
 8006308:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800630c:	2b39      	cmp	r3, #57	@ 0x39
 800630e:	d847      	bhi.n	80063a0 <task_menu_update+0x11d0>
                        if (plate_index < 3) {
 8006310:	4b48      	ldr	r3, [pc, #288]	@ (8006434 <task_menu_update+0x1264>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d81d      	bhi.n	8006354 <task_menu_update+0x1184>
                            plate_buffer[plate_index++] = key;
 8006318:	4b46      	ldr	r3, [pc, #280]	@ (8006434 <task_menu_update+0x1264>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	b2d1      	uxtb	r1, r2
 8006320:	4a44      	ldr	r2, [pc, #272]	@ (8006434 <task_menu_update+0x1264>)
 8006322:	7011      	strb	r1, [r2, #0]
 8006324:	4619      	mov	r1, r3
 8006326:	4a44      	ldr	r2, [pc, #272]	@ (8006438 <task_menu_update+0x1268>)
 8006328:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800632c:	5453      	strb	r3, [r2, r1]
                            plate_buffer[plate_index]   = '\0';
 800632e:	4b41      	ldr	r3, [pc, #260]	@ (8006434 <task_menu_update+0x1264>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	4b40      	ldr	r3, [pc, #256]	@ (8006438 <task_menu_update+0x1268>)
 8006336:	2100      	movs	r1, #0
 8006338:	5499      	strb	r1, [r3, r2]
                            displayRowClear(1);
 800633a:	2001      	movs	r0, #1
 800633c:	f7fd fea0 	bl	8004080 <displayRowClear>
                            displayCharPositionWrite(0, 1);
 8006340:	2101      	movs	r1, #1
 8006342:	2000      	movs	r0, #0
 8006344:	f7fd fdee 	bl	8003f24 <displayCharPositionWrite>
                            displayStringWrite("Ingreso: ");
 8006348:	483c      	ldr	r0, [pc, #240]	@ (800643c <task_menu_update+0x126c>)
 800634a:	f7fd fe5d 	bl	8004008 <displayStringWrite>
                            displayStringWrite(plate_buffer);
 800634e:	483a      	ldr	r0, [pc, #232]	@ (8006438 <task_menu_update+0x1268>)
 8006350:	f7fd fe5a 	bl	8004008 <displayStringWrite>
                        }
                        if (plate_index == 3) {
 8006354:	4b37      	ldr	r3, [pc, #220]	@ (8006434 <task_menu_update+0x1264>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b03      	cmp	r3, #3
 800635a:	f040 8144 	bne.w	80065e6 <task_menu_update+0x1416>
                            strcpy(plate_temp, plate_buffer);
 800635e:	4936      	ldr	r1, [pc, #216]	@ (8006438 <task_menu_update+0x1268>)
 8006360:	4824      	ldr	r0, [pc, #144]	@ (80063f4 <task_menu_update+0x1224>)
 8006362:	f001 fcde 	bl	8007d22 <strcpy>
                            type_selection_in_progress = true;
 8006366:	4b36      	ldr	r3, [pc, #216]	@ (8006440 <task_menu_update+0x1270>)
 8006368:	2201      	movs	r2, #1
 800636a:	701a      	strb	r2, [r3, #0]
                            vehicle_type_page = false;
 800636c:	4b35      	ldr	r3, [pc, #212]	@ (8006444 <task_menu_update+0x1274>)
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]

                            displayClearFull();
 8006372:	f7fd fe99 	bl	80040a8 <displayClearFull>
                            displayCharPositionWrite(0, 0); displayStringWrite("Tipo Vehiculo:");
 8006376:	2100      	movs	r1, #0
 8006378:	2000      	movs	r0, #0
 800637a:	f7fd fdd3 	bl	8003f24 <displayCharPositionWrite>
 800637e:	482b      	ldr	r0, [pc, #172]	@ (800642c <task_menu_update+0x125c>)
 8006380:	f7fd fe42 	bl	8004008 <displayStringWrite>
                            displayCharPositionWrite(0, 1); displayStringWrite("1:Bici  2:Moto");
 8006384:	2101      	movs	r1, #1
 8006386:	2000      	movs	r0, #0
 8006388:	f7fd fdcc 	bl	8003f24 <displayCharPositionWrite>
 800638c:	4828      	ldr	r0, [pc, #160]	@ (8006430 <task_menu_update+0x1260>)
 800638e:	f7fd fe3b 	bl	8004008 <displayStringWrite>

                            plate_index = 0; plate_buffer[0] = '\0';
 8006392:	4b28      	ldr	r3, [pc, #160]	@ (8006434 <task_menu_update+0x1264>)
 8006394:	2200      	movs	r2, #0
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	4b27      	ldr	r3, [pc, #156]	@ (8006438 <task_menu_update+0x1268>)
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]
                        if (plate_index == 3) {
 800639e:	e122      	b.n	80065e6 <task_menu_update+0x1416>
                        }
                    }
                    else if (key == 'C') {
 80063a0:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80063a4:	2b43      	cmp	r3, #67	@ 0x43
 80063a6:	f040 811e 	bne.w	80065e6 <task_menu_update+0x1416>
                        if (plate_index > 0) {
 80063aa:	4b22      	ldr	r3, [pc, #136]	@ (8006434 <task_menu_update+0x1264>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8119 	beq.w	80065e6 <task_menu_update+0x1416>
                            plate_index--;
 80063b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006434 <task_menu_update+0x1264>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006434 <task_menu_update+0x1264>)
 80063be:	701a      	strb	r2, [r3, #0]
                            plate_buffer[plate_index] = '\0';
 80063c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006434 <task_menu_update+0x1264>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006438 <task_menu_update+0x1268>)
 80063c8:	2100      	movs	r1, #0
 80063ca:	5499      	strb	r1, [r3, r2]
                            displayRowClear(1);
 80063cc:	2001      	movs	r0, #1
 80063ce:	f7fd fe57 	bl	8004080 <displayRowClear>
                            displayCharPositionWrite(0, 1);
 80063d2:	2101      	movs	r1, #1
 80063d4:	2000      	movs	r0, #0
 80063d6:	f7fd fda5 	bl	8003f24 <displayCharPositionWrite>
                            displayStringWrite("Ingreso: ");
 80063da:	4818      	ldr	r0, [pc, #96]	@ (800643c <task_menu_update+0x126c>)
 80063dc:	f7fd fe14 	bl	8004008 <displayStringWrite>
                            displayStringWrite(plate_buffer);
 80063e0:	4815      	ldr	r0, [pc, #84]	@ (8006438 <task_menu_update+0x1268>)
 80063e2:	f7fd fe11 	bl	8004008 <displayStringWrite>
 80063e6:	e0fe      	b.n	80065e6 <task_menu_update+0x1416>
 80063e8:	08008f3c 	.word	0x08008f3c
 80063ec:	20000460 	.word	0x20000460
 80063f0:	08009200 	.word	0x08009200
 80063f4:	20000468 	.word	0x20000468
 80063f8:	08008fdc 	.word	0x08008fdc
 80063fc:	20000204 	.word	0x20000204
 8006400:	2000046c 	.word	0x2000046c
 8006404:	2000045d 	.word	0x2000045d
 8006408:	20000224 	.word	0x20000224
 800640c:	20000480 	.word	0x20000480
 8006410:	08008e74 	.word	0x08008e74
 8006414:	08008e88 	.word	0x08008e88
 8006418:	2000045c 	.word	0x2000045c
 800641c:	20000458 	.word	0x20000458
 8006420:	08008ff8 	.word	0x08008ff8
 8006424:	08009008 	.word	0x08009008
 8006428:	2000046d 	.word	0x2000046d
 800642c:	08008d70 	.word	0x08008d70
 8006430:	08008d80 	.word	0x08008d80
 8006434:	2000022c 	.word	0x2000022c
 8006438:	20000228 	.word	0x20000228
 800643c:	08009014 	.word	0x08009014
 8006440:	20000464 	.word	0x20000464
 8006444:	20000465 	.word	0x20000465
                        }
                    }
                }
            }
            else if (current_mode == SETUP_MODE) {
 8006448:	4bb3      	ldr	r3, [pc, #716]	@ (8006718 <task_menu_update+0x1548>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	f040 80ca 	bne.w	80065e6 <task_menu_update+0x1416>
                if (setup_menu_active) {
 8006452:	4bb2      	ldr	r3, [pc, #712]	@ (800671c <task_menu_update+0x154c>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 80c5 	beq.w	80065e6 <task_menu_update+0x1416>
                    if (key == '1') {
 800645c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006460:	2b31      	cmp	r3, #49	@ 0x31
 8006462:	d127      	bne.n	80064b4 <task_menu_update+0x12e4>
                        LOGGER_LOG("Opcion: Cambio tarifas\r\n");
 8006464:	b672      	cpsid	i
 8006466:	4bae      	ldr	r3, [pc, #696]	@ (8006720 <task_menu_update+0x1550>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4aae      	ldr	r2, [pc, #696]	@ (8006724 <task_menu_update+0x1554>)
 800646c:	213f      	movs	r1, #63	@ 0x3f
 800646e:	4618      	mov	r0, r3
 8006470:	f001 fb52 	bl	8007b18 <sniprintf>
 8006474:	4603      	mov	r3, r0
 8006476:	4aac      	ldr	r2, [pc, #688]	@ (8006728 <task_menu_update+0x1558>)
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	4ba9      	ldr	r3, [pc, #676]	@ (8006720 <task_menu_update+0x1550>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe f8a8 	bl	80045d4 <logger_log_print_>
 8006484:	b662      	cpsie	i
                        password_entry_in_progress = true;
 8006486:	4ba9      	ldr	r3, [pc, #676]	@ (800672c <task_menu_update+0x155c>)
 8006488:	2201      	movs	r2, #1
 800648a:	701a      	strb	r2, [r3, #0]
                        password_index = 0; password_buffer[0] = '\0';
 800648c:	4ba8      	ldr	r3, [pc, #672]	@ (8006730 <task_menu_update+0x1560>)
 800648e:	2200      	movs	r2, #0
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	4ba8      	ldr	r3, [pc, #672]	@ (8006734 <task_menu_update+0x1564>)
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]
                        displayClearFull();
 8006498:	f7fd fe06 	bl	80040a8 <displayClearFull>
                        displayCharPositionWrite(0, 0); displayStringWrite("Ingrese clave:");
 800649c:	2100      	movs	r1, #0
 800649e:	2000      	movs	r0, #0
 80064a0:	f7fd fd40 	bl	8003f24 <displayCharPositionWrite>
 80064a4:	48a4      	ldr	r0, [pc, #656]	@ (8006738 <task_menu_update+0x1568>)
 80064a6:	f7fd fdaf 	bl	8004008 <displayStringWrite>
                        displayCharPositionWrite(0, 1);
 80064aa:	2101      	movs	r1, #1
 80064ac:	2000      	movs	r0, #0
 80064ae:	f7fd fd39 	bl	8003f24 <displayCharPositionWrite>
 80064b2:	e098      	b.n	80065e6 <task_menu_update+0x1416>
                    }
                    else if (key == '2') {
 80064b4:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80064b8:	2b32      	cmp	r3, #50	@ 0x32
 80064ba:	d12e      	bne.n	800651a <task_menu_update+0x134a>
                        LOGGER_LOG("Opcion: Caja\r\n");
 80064bc:	b672      	cpsid	i
 80064be:	4b98      	ldr	r3, [pc, #608]	@ (8006720 <task_menu_update+0x1550>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a9e      	ldr	r2, [pc, #632]	@ (800673c <task_menu_update+0x156c>)
 80064c4:	213f      	movs	r1, #63	@ 0x3f
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 fb26 	bl	8007b18 <sniprintf>
 80064cc:	4603      	mov	r3, r0
 80064ce:	4a96      	ldr	r2, [pc, #600]	@ (8006728 <task_menu_update+0x1558>)
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	4b93      	ldr	r3, [pc, #588]	@ (8006720 <task_menu_update+0x1550>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe f87c 	bl	80045d4 <logger_log_print_>
 80064dc:	b662      	cpsie	i
                        char msg[16];
                        snprintf(msg, sizeof(msg), "Caja: $%lu", total_collected);
 80064de:	4b98      	ldr	r3, [pc, #608]	@ (8006740 <task_menu_update+0x1570>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80064e6:	4a97      	ldr	r2, [pc, #604]	@ (8006744 <task_menu_update+0x1574>)
 80064e8:	2110      	movs	r1, #16
 80064ea:	f001 fb15 	bl	8007b18 <sniprintf>
                        displayClearFull();
 80064ee:	f7fd fddb 	bl	80040a8 <displayClearFull>
                        displayCharPositionWrite(0, 0); displayStringWrite("Recaudado total:");
 80064f2:	2100      	movs	r1, #0
 80064f4:	2000      	movs	r0, #0
 80064f6:	f7fd fd15 	bl	8003f24 <displayCharPositionWrite>
 80064fa:	4893      	ldr	r0, [pc, #588]	@ (8006748 <task_menu_update+0x1578>)
 80064fc:	f7fd fd84 	bl	8004008 <displayStringWrite>
                        displayCharPositionWrite(0, 1); displayStringWrite(msg);
 8006500:	2101      	movs	r1, #1
 8006502:	2000      	movs	r0, #0
 8006504:	f7fd fd0e 	bl	8003f24 <displayCharPositionWrite>
 8006508:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800650c:	4618      	mov	r0, r3
 800650e:	f7fd fd7b 	bl	8004008 <displayStringWrite>
                        funds_display_ticks = 6;
 8006512:	4b8e      	ldr	r3, [pc, #568]	@ (800674c <task_menu_update+0x157c>)
 8006514:	2206      	movs	r2, #6
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e065      	b.n	80065e6 <task_menu_update+0x1416>
                    }
                    else if (key == '3') {
 800651a:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800651e:	2b33      	cmp	r3, #51	@ 0x33
 8006520:	d136      	bne.n	8006590 <task_menu_update+0x13c0>
                        LOGGER_LOG("Opcion: Listado\r\n");
 8006522:	b672      	cpsid	i
 8006524:	4b7e      	ldr	r3, [pc, #504]	@ (8006720 <task_menu_update+0x1550>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a89      	ldr	r2, [pc, #548]	@ (8006750 <task_menu_update+0x1580>)
 800652a:	213f      	movs	r1, #63	@ 0x3f
 800652c:	4618      	mov	r0, r3
 800652e:	f001 faf3 	bl	8007b18 <sniprintf>
 8006532:	4603      	mov	r3, r0
 8006534:	4a7c      	ldr	r2, [pc, #496]	@ (8006728 <task_menu_update+0x1558>)
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	4b79      	ldr	r3, [pc, #484]	@ (8006720 <task_menu_update+0x1550>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f7fe f849 	bl	80045d4 <logger_log_print_>
 8006542:	b662      	cpsie	i
                        display_list_in_progress = true;
 8006544:	4b83      	ldr	r3, [pc, #524]	@ (8006754 <task_menu_update+0x1584>)
 8006546:	2201      	movs	r2, #1
 8006548:	701a      	strb	r2, [r3, #0]
                        current_list_index = 0;
 800654a:	4b83      	ldr	r3, [pc, #524]	@ (8006758 <task_menu_update+0x1588>)
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
                        while (current_list_index < MAX_VEHICLES && !vehicles[current_list_index].occupied){
 8006550:	e004      	b.n	800655c <task_menu_update+0x138c>
                            current_list_index++;
 8006552:	4b81      	ldr	r3, [pc, #516]	@ (8006758 <task_menu_update+0x1588>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	4a7f      	ldr	r2, [pc, #508]	@ (8006758 <task_menu_update+0x1588>)
 800655a:	6013      	str	r3, [r2, #0]
                        while (current_list_index < MAX_VEHICLES && !vehicles[current_list_index].occupied){
 800655c:	4b7e      	ldr	r3, [pc, #504]	@ (8006758 <task_menu_update+0x1588>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b31      	cmp	r3, #49	@ 0x31
 8006562:	dc0f      	bgt.n	8006584 <task_menu_update+0x13b4>
 8006564:	4b7c      	ldr	r3, [pc, #496]	@ (8006758 <task_menu_update+0x1588>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	497c      	ldr	r1, [pc, #496]	@ (800675c <task_menu_update+0x158c>)
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	4413      	add	r3, r2
 8006574:	440b      	add	r3, r1
 8006576:	330a      	adds	r3, #10
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	f083 0301 	eor.w	r3, r3, #1
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e6      	bne.n	8006552 <task_menu_update+0x1382>
                        }
                        showVehicleIndex(current_list_index);
 8006584:	4b74      	ldr	r3, [pc, #464]	@ (8006758 <task_menu_update+0x1588>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe fb21 	bl	8004bd0 <showVehicleIndex>
 800658e:	e02a      	b.n	80065e6 <task_menu_update+0x1416>
                    }
                    else if (key == '4') {
 8006590:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006594:	2b34      	cmp	r3, #52	@ 0x34
 8006596:	d126      	bne.n	80065e6 <task_menu_update+0x1416>
                        rtc_get_datetime(&ed_day,&ed_month,&ed_year,&ed_hour,&ed_minute);
 8006598:	4b71      	ldr	r3, [pc, #452]	@ (8006760 <task_menu_update+0x1590>)
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	4b71      	ldr	r3, [pc, #452]	@ (8006764 <task_menu_update+0x1594>)
 800659e:	4a72      	ldr	r2, [pc, #456]	@ (8006768 <task_menu_update+0x1598>)
 80065a0:	4972      	ldr	r1, [pc, #456]	@ (800676c <task_menu_update+0x159c>)
 80065a2:	4873      	ldr	r0, [pc, #460]	@ (8006770 <task_menu_update+0x15a0>)
 80065a4:	f7fe f918 	bl	80047d8 <rtc_get_datetime>
                        dt_edit_in_progress = true;
 80065a8:	4b72      	ldr	r3, [pc, #456]	@ (8006774 <task_menu_update+0x15a4>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]
                        dt_step = 0; dt_idx = 0; dt_buf[0] = '\0';
 80065ae:	4b72      	ldr	r3, [pc, #456]	@ (8006778 <task_menu_update+0x15a8>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	4b71      	ldr	r3, [pc, #452]	@ (800677c <task_menu_update+0x15ac>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	4b71      	ldr	r3, [pc, #452]	@ (8006780 <task_menu_update+0x15b0>)
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
                        setup_menu_active = false;
 80065c0:	4b56      	ldr	r3, [pc, #344]	@ (800671c <task_menu_update+0x154c>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]

                        displayClearFull();
 80065c6:	f7fd fd6f 	bl	80040a8 <displayClearFull>
                        displayCharPositionWrite(0, 0); displayStringWrite("Ajuste Fecha/Hr");
 80065ca:	2100      	movs	r1, #0
 80065cc:	2000      	movs	r0, #0
 80065ce:	f7fd fca9 	bl	8003f24 <displayCharPositionWrite>
 80065d2:	486c      	ldr	r0, [pc, #432]	@ (8006784 <task_menu_update+0x15b4>)
 80065d4:	f7fd fd18 	bl	8004008 <displayStringWrite>
                        displayCharPositionWrite(0, 1); displayStringWrite("DD:__");
 80065d8:	2101      	movs	r1, #1
 80065da:	2000      	movs	r0, #0
 80065dc:	f7fd fca2 	bl	8003f24 <displayCharPositionWrite>
 80065e0:	4869      	ldr	r0, [pc, #420]	@ (8006788 <task_menu_update+0x15b8>)
 80065e2:	f7fd fd11 	bl	8004008 <displayStringWrite>
                    }
                }
            }
        } 

        if (DEL_MEN_XX_MIN < p_task_menu_dta->tick){
 80065e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <task_menu_update+0x1430>
            p_task_menu_dta->tick--;
 80065f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	1e5a      	subs	r2, r3, #1
 80065f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e2c2      	b.n	8006b86 <task_menu_update+0x19b6>
        }
        else{
            p_task_menu_dta->tick = DEL_MEN_XX_MAX;
 8006600:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006604:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006608:	601a      	str	r2, [r3, #0]
            uint8_t d,m,y,h,min;
            rtc_get_datetime(&d,&m,&y,&h,&min);
 800660a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800660e:	f107 0231 	add.w	r2, r7, #49	@ 0x31
 8006612:	f107 0132 	add.w	r1, r7, #50	@ 0x32
 8006616:	f107 0033 	add.w	r0, r7, #51	@ 0x33
 800661a:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	4623      	mov	r3, r4
 8006622:	f7fe f8d9 	bl	80047d8 <rtc_get_datetime>

            char fechaStr[12];
            char hourStr[8];
            snprintf(fechaStr, sizeof(fechaStr), "%02u/%02u/%02u", d, m, y);
 8006626:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800662a:	4619      	mov	r1, r3
 800662c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006630:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8006634:	f107 0020 	add.w	r0, r7, #32
 8006638:	9201      	str	r2, [sp, #4]
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	460b      	mov	r3, r1
 800663e:	4a53      	ldr	r2, [pc, #332]	@ (800678c <task_menu_update+0x15bc>)
 8006640:	210c      	movs	r1, #12
 8006642:	f001 fa69 	bl	8007b18 <sniprintf>
            snprintf(hourStr,  sizeof(hourStr),  "%02u:%02u", h, min);
 8006646:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800664a:	461a      	mov	r2, r3
 800664c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006650:	f107 0018 	add.w	r0, r7, #24
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	4613      	mov	r3, r2
 8006658:	4a4d      	ldr	r2, [pc, #308]	@ (8006790 <task_menu_update+0x15c0>)
 800665a:	2108      	movs	r1, #8
 800665c:	f001 fa5c 	bl	8007b18 <sniprintf>

            if (!display_list_in_progress){
 8006660:	4b3c      	ldr	r3, [pc, #240]	@ (8006754 <task_menu_update+0x1584>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f083 0301 	eor.w	r3, r3, #1
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 8220 	beq.w	8006ab0 <task_menu_update+0x18e0>
                displayRowClear(0);
 8006670:	2000      	movs	r0, #0
 8006672:	f7fd fd05 	bl	8004080 <displayRowClear>
                displayCharPositionWrite(0, 0); displayStringWrite(fechaStr);
 8006676:	2100      	movs	r1, #0
 8006678:	2000      	movs	r0, #0
 800667a:	f7fd fc53 	bl	8003f24 <displayCharPositionWrite>
 800667e:	f107 0320 	add.w	r3, r7, #32
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd fcc0 	bl	8004008 <displayStringWrite>
                displayCharPositionWrite(11,0); displayStringWrite(hourStr);
 8006688:	2100      	movs	r1, #0
 800668a:	200b      	movs	r0, #11
 800668c:	f7fd fc4a 	bl	8003f24 <displayCharPositionWrite>
 8006690:	f107 0318 	add.w	r3, r7, #24
 8006694:	4618      	mov	r0, r3
 8006696:	f7fd fcb7 	bl	8004008 <displayStringWrite>

                if (type_selection_in_progress) {
 800669a:	4b3e      	ldr	r3, [pc, #248]	@ (8006794 <task_menu_update+0x15c4>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01a      	beq.n	80066d8 <task_menu_update+0x1508>
                    displayClearFull();
 80066a2:	f7fd fd01 	bl	80040a8 <displayClearFull>
                    displayCharPositionWrite(0, 0); displayStringWrite("Tipo Vehiculo:");
 80066a6:	2100      	movs	r1, #0
 80066a8:	2000      	movs	r0, #0
 80066aa:	f7fd fc3b 	bl	8003f24 <displayCharPositionWrite>
 80066ae:	483a      	ldr	r0, [pc, #232]	@ (8006798 <task_menu_update+0x15c8>)
 80066b0:	f7fd fcaa 	bl	8004008 <displayStringWrite>
                    displayCharPositionWrite(0, 1);
 80066b4:	2101      	movs	r1, #1
 80066b6:	2000      	movs	r0, #0
 80066b8:	f7fd fc34 	bl	8003f24 <displayCharPositionWrite>
                    displayStringWrite(!vehicle_type_page ? "1:Bici  2:Moto"
 80066bc:	4b37      	ldr	r3, [pc, #220]	@ (800679c <task_menu_update+0x15cc>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	f083 0301 	eor.w	r3, r3, #1
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <task_menu_update+0x14fe>
 80066ca:	4b35      	ldr	r3, [pc, #212]	@ (80067a0 <task_menu_update+0x15d0>)
 80066cc:	e000      	b.n	80066d0 <task_menu_update+0x1500>
 80066ce:	4b35      	ldr	r3, [pc, #212]	@ (80067a4 <task_menu_update+0x15d4>)
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fd fc99 	bl	8004008 <displayStringWrite>
 80066d6:	e1eb      	b.n	8006ab0 <task_menu_update+0x18e0>
                                                          : "3:Auto 4:Pick-Up");
                }
                else if (exit_type_selection_in_progress) {
 80066d8:	4b33      	ldr	r3, [pc, #204]	@ (80067a8 <task_menu_update+0x15d8>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d067      	beq.n	80067b0 <task_menu_update+0x15e0>
                    displayClearFull();
 80066e0:	f7fd fce2 	bl	80040a8 <displayClearFull>
                    displayCharPositionWrite(0, 0); displayStringWrite("Tipo Vehiculo:");
 80066e4:	2100      	movs	r1, #0
 80066e6:	2000      	movs	r0, #0
 80066e8:	f7fd fc1c 	bl	8003f24 <displayCharPositionWrite>
 80066ec:	482a      	ldr	r0, [pc, #168]	@ (8006798 <task_menu_update+0x15c8>)
 80066ee:	f7fd fc8b 	bl	8004008 <displayStringWrite>
                    displayCharPositionWrite(0, 1);
 80066f2:	2101      	movs	r1, #1
 80066f4:	2000      	movs	r0, #0
 80066f6:	f7fd fc15 	bl	8003f24 <displayCharPositionWrite>
                    displayStringWrite(!exit_vehicle_type_page ? "1:Bici  2:Moto"
 80066fa:	4b2c      	ldr	r3, [pc, #176]	@ (80067ac <task_menu_update+0x15dc>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f083 0301 	eor.w	r3, r3, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <task_menu_update+0x153c>
 8006708:	4b25      	ldr	r3, [pc, #148]	@ (80067a0 <task_menu_update+0x15d0>)
 800670a:	e000      	b.n	800670e <task_menu_update+0x153e>
 800670c:	4b25      	ldr	r3, [pc, #148]	@ (80067a4 <task_menu_update+0x15d4>)
 800670e:	4618      	mov	r0, r3
 8006710:	f7fd fc7a 	bl	8004008 <displayStringWrite>
 8006714:	e1cc      	b.n	8006ab0 <task_menu_update+0x18e0>
 8006716:	bf00      	nop
 8006718:	20000224 	.word	0x20000224
 800671c:	20000480 	.word	0x20000480
 8006720:	08009200 	.word	0x08009200
 8006724:	08009020 	.word	0x08009020
 8006728:	20000204 	.word	0x20000204
 800672c:	20000498 	.word	0x20000498
 8006730:	200004a5 	.word	0x200004a5
 8006734:	2000049c 	.word	0x2000049c
 8006738:	0800903c 	.word	0x0800903c
 800673c:	0800904c 	.word	0x0800904c
 8006740:	20000484 	.word	0x20000484
 8006744:	0800905c 	.word	0x0800905c
 8006748:	08009068 	.word	0x08009068
 800674c:	20000488 	.word	0x20000488
 8006750:	0800907c 	.word	0x0800907c
 8006754:	20000491 	.word	0x20000491
 8006758:	20000494 	.word	0x20000494
 800675c:	20000230 	.word	0x20000230
 8006760:	200004ac 	.word	0x200004ac
 8006764:	20000023 	.word	0x20000023
 8006768:	20000022 	.word	0x20000022
 800676c:	20000021 	.word	0x20000021
 8006770:	20000020 	.word	0x20000020
 8006774:	200004a6 	.word	0x200004a6
 8006778:	200004a7 	.word	0x200004a7
 800677c:	200004ab 	.word	0x200004ab
 8006780:	200004a8 	.word	0x200004a8
 8006784:	08009090 	.word	0x08009090
 8006788:	080090a0 	.word	0x080090a0
 800678c:	080090a8 	.word	0x080090a8
 8006790:	080090b8 	.word	0x080090b8
 8006794:	20000464 	.word	0x20000464
 8006798:	08008d70 	.word	0x08008d70
 800679c:	20000465 	.word	0x20000465
 80067a0:	08008d80 	.word	0x08008d80
 80067a4:	08008d90 	.word	0x08008d90
 80067a8:	2000046c 	.word	0x2000046c
 80067ac:	2000046d 	.word	0x2000046d
                                                               : "3:Auto 4:Pick-Up");
                }
                else if (password_entry_in_progress) {
 80067b0:	4b8f      	ldr	r3, [pc, #572]	@ (80069f0 <task_menu_update+0x1820>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01f      	beq.n	80067f8 <task_menu_update+0x1628>
                    displayClearFull();
 80067b8:	f7fd fc76 	bl	80040a8 <displayClearFull>
                    displayCharPositionWrite(0, 0); displayStringWrite("Ingrese clave:");
 80067bc:	2100      	movs	r1, #0
 80067be:	2000      	movs	r0, #0
 80067c0:	f7fd fbb0 	bl	8003f24 <displayCharPositionWrite>
 80067c4:	488b      	ldr	r0, [pc, #556]	@ (80069f4 <task_menu_update+0x1824>)
 80067c6:	f7fd fc1f 	bl	8004008 <displayStringWrite>
                    displayCharPositionWrite(0, 1);
 80067ca:	2101      	movs	r1, #1
 80067cc:	2000      	movs	r0, #0
 80067ce:	f7fd fba9 	bl	8003f24 <displayCharPositionWrite>
                    for (uint8_t i = 0; i < password_index; i++) displayStringWrite("*");
 80067d2:	2300      	movs	r3, #0
 80067d4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80067d8:	e007      	b.n	80067ea <task_menu_update+0x161a>
 80067da:	4887      	ldr	r0, [pc, #540]	@ (80069f8 <task_menu_update+0x1828>)
 80067dc:	f7fd fc14 	bl	8004008 <displayStringWrite>
 80067e0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80067e4:	3301      	adds	r3, #1
 80067e6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80067ea:	4b84      	ldr	r3, [pc, #528]	@ (80069fc <task_menu_update+0x182c>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d3f1      	bcc.n	80067da <task_menu_update+0x160a>
 80067f6:	e15b      	b.n	8006ab0 <task_menu_update+0x18e0>
                }
                else if (rate_change_in_progress) {
 80067f8:	4b81      	ldr	r3, [pc, #516]	@ (8006a00 <task_menu_update+0x1830>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d02f      	beq.n	8006860 <task_menu_update+0x1690>
                    displayClearFull();
 8006800:	f7fd fc52 	bl	80040a8 <displayClearFull>
                    displayCharPositionWrite(0, 0); displayStringWrite("Nueva tarifa:");
 8006804:	2100      	movs	r1, #0
 8006806:	2000      	movs	r0, #0
 8006808:	f7fd fb8c 	bl	8003f24 <displayCharPositionWrite>
 800680c:	487d      	ldr	r0, [pc, #500]	@ (8006a04 <task_menu_update+0x1834>)
 800680e:	f7fd fbfb 	bl	8004008 <displayStringWrite>
                    displayCharPositionWrite(0, 1);
 8006812:	2101      	movs	r1, #1
 8006814:	2000      	movs	r0, #0
 8006816:	f7fd fb85 	bl	8003f24 <displayCharPositionWrite>
                    if (current_rate_idx == 0)      displayStringWrite("Bicicleta: ");
 800681a:	4b7b      	ldr	r3, [pc, #492]	@ (8006a08 <task_menu_update+0x1838>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d103      	bne.n	800682a <task_menu_update+0x165a>
 8006822:	487a      	ldr	r0, [pc, #488]	@ (8006a0c <task_menu_update+0x183c>)
 8006824:	f7fd fbf0 	bl	8004008 <displayStringWrite>
 8006828:	e016      	b.n	8006858 <task_menu_update+0x1688>
                    else if (current_rate_idx == 1) displayStringWrite("Moto: ");
 800682a:	4b77      	ldr	r3, [pc, #476]	@ (8006a08 <task_menu_update+0x1838>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d103      	bne.n	800683a <task_menu_update+0x166a>
 8006832:	4877      	ldr	r0, [pc, #476]	@ (8006a10 <task_menu_update+0x1840>)
 8006834:	f7fd fbe8 	bl	8004008 <displayStringWrite>
 8006838:	e00e      	b.n	8006858 <task_menu_update+0x1688>
                    else if (current_rate_idx == 2) displayStringWrite("Auto: ");
 800683a:	4b73      	ldr	r3, [pc, #460]	@ (8006a08 <task_menu_update+0x1838>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d103      	bne.n	800684a <task_menu_update+0x167a>
 8006842:	4874      	ldr	r0, [pc, #464]	@ (8006a14 <task_menu_update+0x1844>)
 8006844:	f7fd fbe0 	bl	8004008 <displayStringWrite>
 8006848:	e006      	b.n	8006858 <task_menu_update+0x1688>
                    else if (current_rate_idx == 3) displayStringWrite("Camioneta: ");
 800684a:	4b6f      	ldr	r3, [pc, #444]	@ (8006a08 <task_menu_update+0x1838>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b03      	cmp	r3, #3
 8006850:	d102      	bne.n	8006858 <task_menu_update+0x1688>
 8006852:	4871      	ldr	r0, [pc, #452]	@ (8006a18 <task_menu_update+0x1848>)
 8006854:	f7fd fbd8 	bl	8004008 <displayStringWrite>
                    displayStringWrite(rate_buffer);
 8006858:	4870      	ldr	r0, [pc, #448]	@ (8006a1c <task_menu_update+0x184c>)
 800685a:	f7fd fbd5 	bl	8004008 <displayStringWrite>
 800685e:	e127      	b.n	8006ab0 <task_menu_update+0x18e0>
                }
                else if (dt_edit_in_progress) {
 8006860:	4b6f      	ldr	r3, [pc, #444]	@ (8006a20 <task_menu_update+0x1850>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d035      	beq.n	80068d4 <task_menu_update+0x1704>
                    displayClearFull();
 8006868:	f7fd fc1e 	bl	80040a8 <displayClearFull>
                    displayCharPositionWrite(0, 0); 
 800686c:	2100      	movs	r1, #0
 800686e:	2000      	movs	r0, #0
 8006870:	f7fd fb58 	bl	8003f24 <displayCharPositionWrite>
                    displayStringWrite("Ajuste Fecha/Hr");
 8006874:	486b      	ldr	r0, [pc, #428]	@ (8006a24 <task_menu_update+0x1854>)
 8006876:	f7fd fbc7 	bl	8004008 <displayStringWrite>
                    
                    displayCharPositionWrite(0, 1);
 800687a:	2101      	movs	r1, #1
 800687c:	2000      	movs	r0, #0
 800687e:	f7fd fb51 	bl	8003f24 <displayCharPositionWrite>
                    switch (dt_step) {
 8006882:	4b69      	ldr	r3, [pc, #420]	@ (8006a28 <task_menu_update+0x1858>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b04      	cmp	r3, #4
 8006888:	d820      	bhi.n	80068cc <task_menu_update+0x16fc>
 800688a:	a201      	add	r2, pc, #4	@ (adr r2, 8006890 <task_menu_update+0x16c0>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	080068a5 	.word	0x080068a5
 8006894:	080068ad 	.word	0x080068ad
 8006898:	080068b5 	.word	0x080068b5
 800689c:	080068bd 	.word	0x080068bd
 80068a0:	080068c5 	.word	0x080068c5
                        case 0: displayStringWrite("DD:"); break;
 80068a4:	4861      	ldr	r0, [pc, #388]	@ (8006a2c <task_menu_update+0x185c>)
 80068a6:	f7fd fbaf 	bl	8004008 <displayStringWrite>
 80068aa:	e00f      	b.n	80068cc <task_menu_update+0x16fc>
                        case 1: displayStringWrite("MM:"); break;
 80068ac:	4860      	ldr	r0, [pc, #384]	@ (8006a30 <task_menu_update+0x1860>)
 80068ae:	f7fd fbab 	bl	8004008 <displayStringWrite>
 80068b2:	e00b      	b.n	80068cc <task_menu_update+0x16fc>
                        case 2: displayStringWrite("YY:"); break;
 80068b4:	485f      	ldr	r0, [pc, #380]	@ (8006a34 <task_menu_update+0x1864>)
 80068b6:	f7fd fba7 	bl	8004008 <displayStringWrite>
 80068ba:	e007      	b.n	80068cc <task_menu_update+0x16fc>
                        case 3: displayStringWrite("HH:"); break;
 80068bc:	485e      	ldr	r0, [pc, #376]	@ (8006a38 <task_menu_update+0x1868>)
 80068be:	f7fd fba3 	bl	8004008 <displayStringWrite>
 80068c2:	e003      	b.n	80068cc <task_menu_update+0x16fc>
                        case 4: displayStringWrite("mm:"); break;
 80068c4:	485d      	ldr	r0, [pc, #372]	@ (8006a3c <task_menu_update+0x186c>)
 80068c6:	f7fd fb9f 	bl	8004008 <displayStringWrite>
 80068ca:	bf00      	nop
                    }
                    displayStringWrite(dt_buf);  
 80068cc:	485c      	ldr	r0, [pc, #368]	@ (8006a40 <task_menu_update+0x1870>)
 80068ce:	f7fd fb9b 	bl	8004008 <displayStringWrite>
 80068d2:	e0ed      	b.n	8006ab0 <task_menu_update+0x18e0>
                }
                else if (dt_msg_ticks > 0) {
 80068d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006a44 <task_menu_update+0x1874>)
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d006      	beq.n	80068ea <task_menu_update+0x171a>
                    dt_msg_ticks--;
 80068dc:	4b59      	ldr	r3, [pc, #356]	@ (8006a44 <task_menu_update+0x1874>)
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	4b57      	ldr	r3, [pc, #348]	@ (8006a44 <task_menu_update+0x1874>)
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	e0e2      	b.n	8006ab0 <task_menu_update+0x18e0>
                }
                else if (exit_display_ticks > 0) {
 80068ea:	4b57      	ldr	r3, [pc, #348]	@ (8006a48 <task_menu_update+0x1878>)
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01a      	beq.n	8006928 <task_menu_update+0x1758>
                    exit_display_ticks--;
 80068f2:	4b55      	ldr	r3, [pc, #340]	@ (8006a48 <task_menu_update+0x1878>)
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	4b53      	ldr	r3, [pc, #332]	@ (8006a48 <task_menu_update+0x1878>)
 80068fc:	801a      	strh	r2, [r3, #0]
                    if (exit_display_ticks == 0 && price_display_ticks > 0) {
 80068fe:	4b52      	ldr	r3, [pc, #328]	@ (8006a48 <task_menu_update+0x1878>)
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	f040 80d4 	bne.w	8006ab0 <task_menu_update+0x18e0>
 8006908:	4b50      	ldr	r3, [pc, #320]	@ (8006a4c <task_menu_update+0x187c>)
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80cf 	beq.w	8006ab0 <task_menu_update+0x18e0>
                        displayRowClear(1);
 8006912:	2001      	movs	r0, #1
 8006914:	f7fd fbb4 	bl	8004080 <displayRowClear>
                        displayCharPositionWrite(0, 1);
 8006918:	2101      	movs	r1, #1
 800691a:	2000      	movs	r0, #0
 800691c:	f7fd fb02 	bl	8003f24 <displayCharPositionWrite>
                        displayStringWrite(price_msg);
 8006920:	484b      	ldr	r0, [pc, #300]	@ (8006a50 <task_menu_update+0x1880>)
 8006922:	f7fd fb71 	bl	8004008 <displayStringWrite>
 8006926:	e0c3      	b.n	8006ab0 <task_menu_update+0x18e0>
                    }
                }
                else if (price_display_ticks > 0) {
 8006928:	4b48      	ldr	r3, [pc, #288]	@ (8006a4c <task_menu_update+0x187c>)
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d006      	beq.n	800693e <task_menu_update+0x176e>
                    price_display_ticks--;
 8006930:	4b46      	ldr	r3, [pc, #280]	@ (8006a4c <task_menu_update+0x187c>)
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	4b44      	ldr	r3, [pc, #272]	@ (8006a4c <task_menu_update+0x187c>)
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e0b8      	b.n	8006ab0 <task_menu_update+0x18e0>
                }
                else if (funds_display_ticks > 0) {
 800693e:	4b45      	ldr	r3, [pc, #276]	@ (8006a54 <task_menu_update+0x1884>)
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d006      	beq.n	8006954 <task_menu_update+0x1784>
                    funds_display_ticks--;
 8006946:	4b43      	ldr	r3, [pc, #268]	@ (8006a54 <task_menu_update+0x1884>)
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	4b41      	ldr	r3, [pc, #260]	@ (8006a54 <task_menu_update+0x1884>)
 8006950:	801a      	strh	r2, [r3, #0]
 8006952:	e0ad      	b.n	8006ab0 <task_menu_update+0x18e0>
                }
                else if (plate_index == 0 && plate_display_ticks == 0 && exit_display_ticks == 0) {
 8006954:	4b40      	ldr	r3, [pc, #256]	@ (8006a58 <task_menu_update+0x1888>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f040 80a9 	bne.w	8006ab0 <task_menu_update+0x18e0>
 800695e:	4b3f      	ldr	r3, [pc, #252]	@ (8006a5c <task_menu_update+0x188c>)
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f040 80a4 	bne.w	8006ab0 <task_menu_update+0x18e0>
 8006968:	4b37      	ldr	r3, [pc, #220]	@ (8006a48 <task_menu_update+0x1878>)
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f040 809f 	bne.w	8006ab0 <task_menu_update+0x18e0>
                    if (error_display_ticks > 0) {
 8006972:	4b3b      	ldr	r3, [pc, #236]	@ (8006a60 <task_menu_update+0x1890>)
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <task_menu_update+0x17c0>
                        displayRowClear(1);
 800697a:	2001      	movs	r0, #1
 800697c:	f7fd fb80 	bl	8004080 <displayRowClear>
                        displayCharPositionWrite(0, 1);
 8006980:	2101      	movs	r1, #1
 8006982:	2000      	movs	r0, #0
 8006984:	f7fd face 	bl	8003f24 <displayCharPositionWrite>
                        displayStringWrite("No hay mas lugar");
 8006988:	4836      	ldr	r0, [pc, #216]	@ (8006a64 <task_menu_update+0x1894>)
 800698a:	f7fd fb3d 	bl	8004008 <displayStringWrite>
 800698e:	e08f      	b.n	8006ab0 <task_menu_update+0x18e0>
                    }
                    else if (exit_in_progress && exit_plate_index < 3) {
 8006990:	4b35      	ldr	r3, [pc, #212]	@ (8006a68 <task_menu_update+0x1898>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d011      	beq.n	80069bc <task_menu_update+0x17ec>
 8006998:	4b34      	ldr	r3, [pc, #208]	@ (8006a6c <task_menu_update+0x189c>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d80d      	bhi.n	80069bc <task_menu_update+0x17ec>
                        displayRowClear(1);
 80069a0:	2001      	movs	r0, #1
 80069a2:	f7fd fb6d 	bl	8004080 <displayRowClear>
                        displayCharPositionWrite(0, 1);
 80069a6:	2101      	movs	r1, #1
 80069a8:	2000      	movs	r0, #0
 80069aa:	f7fd fabb 	bl	8003f24 <displayCharPositionWrite>
                        displayStringWrite("Egreso: ");
 80069ae:	4830      	ldr	r0, [pc, #192]	@ (8006a70 <task_menu_update+0x18a0>)
 80069b0:	f7fd fb2a 	bl	8004008 <displayStringWrite>
                        displayStringWrite(exit_plate_buffer);
 80069b4:	482f      	ldr	r0, [pc, #188]	@ (8006a74 <task_menu_update+0x18a4>)
 80069b6:	f7fd fb27 	bl	8004008 <displayStringWrite>
 80069ba:	e079      	b.n	8006ab0 <task_menu_update+0x18e0>
                    }
                    else {
                        displayRowClear(1);
 80069bc:	2001      	movs	r0, #1
 80069be:	f7fd fb5f 	bl	8004080 <displayRowClear>
                        displayCharPositionWrite(0, 1);
 80069c2:	2101      	movs	r1, #1
 80069c4:	2000      	movs	r0, #0
 80069c6:	f7fd faad 	bl	8003f24 <displayCharPositionWrite>
                        if (current_mode == NORMAL_MODE) {
 80069ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006a78 <task_menu_update+0x18a8>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d156      	bne.n	8006a80 <task_menu_update+0x18b0>
                            char msg[16];
                            snprintf(msg, sizeof(msg), "En playa: %u", countVehicles());
 80069d2:	f7fe f8d7 	bl	8004b84 <countVehicles>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f107 0008 	add.w	r0, r7, #8
 80069dc:	4a27      	ldr	r2, [pc, #156]	@ (8006a7c <task_menu_update+0x18ac>)
 80069de:	2110      	movs	r1, #16
 80069e0:	f001 f89a 	bl	8007b18 <sniprintf>
                            displayStringWrite(msg);
 80069e4:	f107 0308 	add.w	r3, r7, #8
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fd fb0d 	bl	8004008 <displayStringWrite>
 80069ee:	e05f      	b.n	8006ab0 <task_menu_update+0x18e0>
 80069f0:	20000498 	.word	0x20000498
 80069f4:	0800903c 	.word	0x0800903c
 80069f8:	08008e20 	.word	0x08008e20
 80069fc:	200004a5 	.word	0x200004a5
 8006a00:	2000048a 	.word	0x2000048a
 8006a04:	08008e30 	.word	0x08008e30
 8006a08:	2000048b 	.word	0x2000048b
 8006a0c:	08008e40 	.word	0x08008e40
 8006a10:	08008e9c 	.word	0x08008e9c
 8006a14:	08008ea4 	.word	0x08008ea4
 8006a18:	08008eac 	.word	0x08008eac
 8006a1c:	2000048c 	.word	0x2000048c
 8006a20:	200004a6 	.word	0x200004a6
 8006a24:	08009090 	.word	0x08009090
 8006a28:	200004a7 	.word	0x200004a7
 8006a2c:	08008eb8 	.word	0x08008eb8
 8006a30:	08008ebc 	.word	0x08008ebc
 8006a34:	08008ec0 	.word	0x08008ec0
 8006a38:	08008ec4 	.word	0x08008ec4
 8006a3c:	08008ec8 	.word	0x08008ec8
 8006a40:	200004a8 	.word	0x200004a8
 8006a44:	200004ae 	.word	0x200004ae
 8006a48:	20000460 	.word	0x20000460
 8006a4c:	2000046e 	.word	0x2000046e
 8006a50:	20000470 	.word	0x20000470
 8006a54:	20000488 	.word	0x20000488
 8006a58:	2000022c 	.word	0x2000022c
 8006a5c:	2000022e 	.word	0x2000022e
 8006a60:	20000462 	.word	0x20000462
 8006a64:	08008e0c 	.word	0x08008e0c
 8006a68:	2000045d 	.word	0x2000045d
 8006a6c:	2000045c 	.word	0x2000045c
 8006a70:	08009008 	.word	0x08009008
 8006a74:	20000458 	.word	0x20000458
 8006a78:	20000224 	.word	0x20000224
 8006a7c:	080090c4 	.word	0x080090c4
                        }
                        else if (current_mode == SETUP_MODE && setup_menu_active) {
 8006a80:	4b5a      	ldr	r3, [pc, #360]	@ (8006bec <task_menu_update+0x1a1c>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d113      	bne.n	8006ab0 <task_menu_update+0x18e0>
 8006a88:	4b59      	ldr	r3, [pc, #356]	@ (8006bf0 <task_menu_update+0x1a20>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00f      	beq.n	8006ab0 <task_menu_update+0x18e0>
                            displayClearFull();
 8006a90:	f7fd fb0a 	bl	80040a8 <displayClearFull>
                            displayCharPositionWrite(0, 0); displayStringWrite("Tarifas:1 Caja:2");
 8006a94:	2100      	movs	r1, #0
 8006a96:	2000      	movs	r0, #0
 8006a98:	f7fd fa44 	bl	8003f24 <displayCharPositionWrite>
 8006a9c:	4855      	ldr	r0, [pc, #340]	@ (8006bf4 <task_menu_update+0x1a24>)
 8006a9e:	f7fd fab3 	bl	8004008 <displayStringWrite>
                            displayCharPositionWrite(0, 1); displayStringWrite("Lista:3   Hora:4");
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	f7fd fa3d 	bl	8003f24 <displayCharPositionWrite>
 8006aaa:	4853      	ldr	r0, [pc, #332]	@ (8006bf8 <task_menu_update+0x1a28>)
 8006aac:	f7fd faac 	bl	8004008 <displayStringWrite>
                        }
                    }
                }
            }

            if (true == any_event_task_menu()){
 8006ab0:	f000 f91c 	bl	8006cec <any_event_task_menu>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <task_menu_update+0x1900>
                p_task_menu_dta->flag = true;
 8006aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006abe:	2201      	movs	r2, #1
 8006ac0:	729a      	strb	r2, [r3, #10]
                p_task_menu_dta->event = get_event_task_menu();
 8006ac2:	f000 f8ed 	bl	8006ca0 <get_event_task_menu>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ace:	725a      	strb	r2, [r3, #9]
            }

            if (plate_display_ticks > 0) plate_display_ticks--;
 8006ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8006bfc <task_menu_update+0x1a2c>)
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <task_menu_update+0x1914>
 8006ad8:	4b48      	ldr	r3, [pc, #288]	@ (8006bfc <task_menu_update+0x1a2c>)
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	4b46      	ldr	r3, [pc, #280]	@ (8006bfc <task_menu_update+0x1a2c>)
 8006ae2:	801a      	strh	r2, [r3, #0]
            if (error_display_ticks > 0) error_display_ticks--;
 8006ae4:	4b46      	ldr	r3, [pc, #280]	@ (8006c00 <task_menu_update+0x1a30>)
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <task_menu_update+0x1928>
 8006aec:	4b44      	ldr	r3, [pc, #272]	@ (8006c00 <task_menu_update+0x1a30>)
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	4b42      	ldr	r3, [pc, #264]	@ (8006c00 <task_menu_update+0x1a30>)
 8006af6:	801a      	strh	r2, [r3, #0]

            switch (p_task_menu_dta->state){
 8006af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006afc:	7a1b      	ldrb	r3, [r3, #8]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <task_menu_update+0x193a>
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d015      	beq.n	8006b34 <task_menu_update+0x1964>
 8006b08:	e029      	b.n	8006b5e <task_menu_update+0x198e>
                case ST_MEN_XX_IDLE:
                    if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event)){
 8006b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b0e:	7a9b      	ldrb	r3, [r3, #10]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d034      	beq.n	8006b80 <task_menu_update+0x19b0>
 8006b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b1a:	7a5b      	ldrb	r3, [r3, #9]
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d12e      	bne.n	8006b80 <task_menu_update+0x19b0>
                        p_task_menu_dta->flag = false;
 8006b22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b26:	2200      	movs	r2, #0
 8006b28:	729a      	strb	r2, [r3, #10]
                        p_task_menu_dta->state = ST_MEN_XX_ACTIVE;
 8006b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b2e:	2201      	movs	r2, #1
 8006b30:	721a      	strb	r2, [r3, #8]
                    }
                    break;
 8006b32:	e025      	b.n	8006b80 <task_menu_update+0x19b0>
                case ST_MEN_XX_ACTIVE:
                    if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_IDLE == p_task_menu_dta->event)){
 8006b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b38:	7a9b      	ldrb	r3, [r3, #10]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d021      	beq.n	8006b84 <task_menu_update+0x19b4>
 8006b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b44:	7a5b      	ldrb	r3, [r3, #9]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d11b      	bne.n	8006b84 <task_menu_update+0x19b4>
                        p_task_menu_dta->flag = false;
 8006b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b50:	2200      	movs	r2, #0
 8006b52:	729a      	strb	r2, [r3, #10]
                        p_task_menu_dta->state = ST_MEN_XX_IDLE;
 8006b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b58:	2200      	movs	r2, #0
 8006b5a:	721a      	strb	r2, [r3, #8]
                    }
                    break;
 8006b5c:	e012      	b.n	8006b84 <task_menu_update+0x19b4>
                default:
                    p_task_menu_dta->tick  = DEL_MEN_XX_MIN;
 8006b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
                    p_task_menu_dta->state = ST_MEN_XX_IDLE;
 8006b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	721a      	strb	r2, [r3, #8]
                    p_task_menu_dta->event = EV_MEN_ENT_IDLE;
 8006b6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b72:	2200      	movs	r2, #0
 8006b74:	725a      	strb	r2, [r3, #9]
                    p_task_menu_dta->flag  = false;
 8006b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	729a      	strb	r2, [r3, #10]
                    break;
 8006b7e:	e002      	b.n	8006b86 <task_menu_update+0x19b6>
                    break;
 8006b80:	bf00      	nop
 8006b82:	e000      	b.n	8006b86 <task_menu_update+0x19b6>
                    break;
 8006b84:	bf00      	nop
    while (b_time_update_required){
 8006b86:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f47e ab41 	bne.w	8005212 <task_menu_update+0x42>
            }
        } 
    } 
    
    uint32_t elapsed_cycles = cycle_counter_get() - start_cycles;
 8006b90:	4b1c      	ldr	r3, [pc, #112]	@ (8006c04 <task_menu_update+0x1a34>)
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    uint32_t elapsed_us = elapsed_cycles / (SystemCoreClock / 1000000U);
 8006b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006c08 <task_menu_update+0x1a38>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c0c <task_menu_update+0x1a3c>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	0c9b      	lsrs	r3, r3, #18
 8006baa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    if (elapsed_us > task_menu_dta.wcet_us) {
 8006bb6:	4b16      	ldr	r3, [pc, #88]	@ (8006c10 <task_menu_update+0x1a40>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d90f      	bls.n	8006be2 <task_menu_update+0x1a12>
        task_menu_dta.wcet_us = elapsed_us;
 8006bc2:	4a13      	ldr	r2, [pc, #76]	@ (8006c10 <task_menu_update+0x1a40>)
 8006bc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	e00a      	b.n	8006be2 <task_menu_update+0x1a12>
                return;
 8006bcc:	bf00      	nop
 8006bce:	e008      	b.n	8006be2 <task_menu_update+0x1a12>
                return;
 8006bd0:	bf00      	nop
 8006bd2:	e006      	b.n	8006be2 <task_menu_update+0x1a12>
                return;
 8006bd4:	bf00      	nop
 8006bd6:	e004      	b.n	8006be2 <task_menu_update+0x1a12>
                return;
 8006bd8:	bf00      	nop
 8006bda:	e002      	b.n	8006be2 <task_menu_update+0x1a12>
                return;
 8006bdc:	bf00      	nop
 8006bde:	e000      	b.n	8006be2 <task_menu_update+0x1a12>
                return;
 8006be0:	bf00      	nop
    }
}
 8006be2:	37b8      	adds	r7, #184	@ 0xb8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bea:	bf00      	nop
 8006bec:	20000224 	.word	0x20000224
 8006bf0:	20000480 	.word	0x20000480
 8006bf4:	08008e74 	.word	0x08008e74
 8006bf8:	08008e88 	.word	0x08008e88
 8006bfc:	2000022e 	.word	0x2000022e
 8006c00:	20000462 	.word	0x20000462
 8006c04:	e0001000 	.word	0xe0001000
 8006c08:	20000000 	.word	0x20000000
 8006c0c:	431bde83 	.word	0x431bde83
 8006c10:	20000210 	.word	0x20000210

08006c14 <init_queue_event_task_menu>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_menu(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 8006c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c58 <init_queue_event_task_menu+0x44>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 8006c20:	4b0d      	ldr	r3, [pc, #52]	@ (8006c58 <init_queue_event_task_menu+0x44>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8006c26:	4b0c      	ldr	r3, [pc, #48]	@ (8006c58 <init_queue_event_task_menu+0x44>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	607b      	str	r3, [r7, #4]
 8006c30:	e008      	b.n	8006c44 <init_queue_event_task_menu+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8006c32:	4a09      	ldr	r2, [pc, #36]	@ (8006c58 <init_queue_event_task_menu+0x44>)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4413      	add	r3, r2
 8006c38:	330c      	adds	r3, #12
 8006c3a:	22ff      	movs	r2, #255	@ 0xff
 8006c3c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3301      	adds	r3, #1
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d9f3      	bls.n	8006c32 <init_queue_event_task_menu+0x1e>
}
 8006c4a:	bf00      	nop
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	200004b8 	.word	0x200004b8

08006c5c <put_event_task_menu>:

void put_event_task_menu(task_menu_ev_t event)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8006c66:	4b0d      	ldr	r3, [pc, #52]	@ (8006c9c <put_event_task_menu+0x40>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c9c <put_event_task_menu+0x40>)
 8006c6e:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8006c70:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <put_event_task_menu+0x40>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	4909      	ldr	r1, [pc, #36]	@ (8006c9c <put_event_task_menu+0x40>)
 8006c78:	600a      	str	r2, [r1, #0]
 8006c7a:	4a08      	ldr	r2, [pc, #32]	@ (8006c9c <put_event_task_menu+0x40>)
 8006c7c:	4413      	add	r3, r2
 8006c7e:	79fa      	ldrb	r2, [r7, #7]
 8006c80:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8006c82:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <put_event_task_menu+0x40>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b10      	cmp	r3, #16
 8006c88:	d102      	bne.n	8006c90 <put_event_task_menu+0x34>
		queue_task_a.head = 0;
 8006c8a:	4b04      	ldr	r3, [pc, #16]	@ (8006c9c <put_event_task_menu+0x40>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	200004b8 	.word	0x200004b8

08006ca0 <get_event_task_menu>:

task_menu_ev_t get_event_task_menu(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
	task_menu_ev_t event;

	queue_task_a.count--;
 8006ca6:	4b10      	ldr	r3, [pc, #64]	@ (8006ce8 <get_event_task_menu+0x48>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	4a0e      	ldr	r2, [pc, #56]	@ (8006ce8 <get_event_task_menu+0x48>)
 8006cae:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8006cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <get_event_task_menu+0x48>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8006ce8 <get_event_task_menu+0x48>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	7b1b      	ldrb	r3, [r3, #12]
 8006cba:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce8 <get_event_task_menu+0x48>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	4909      	ldr	r1, [pc, #36]	@ (8006ce8 <get_event_task_menu+0x48>)
 8006cc4:	604a      	str	r2, [r1, #4]
 8006cc6:	4a08      	ldr	r2, [pc, #32]	@ (8006ce8 <get_event_task_menu+0x48>)
 8006cc8:	4413      	add	r3, r2
 8006cca:	22ff      	movs	r2, #255	@ 0xff
 8006ccc:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8006cce:	4b06      	ldr	r3, [pc, #24]	@ (8006ce8 <get_event_task_menu+0x48>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b10      	cmp	r3, #16
 8006cd4:	d102      	bne.n	8006cdc <get_event_task_menu+0x3c>
		queue_task_a.tail = 0;
 8006cd6:	4b04      	ldr	r3, [pc, #16]	@ (8006ce8 <get_event_task_menu+0x48>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	605a      	str	r2, [r3, #4]

	return event;
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr
 8006ce8:	200004b8 	.word	0x200004b8

08006cec <any_event_task_menu>:

bool any_event_task_menu(void)
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8006cf0:	4b06      	ldr	r3, [pc, #24]	@ (8006d0c <any_event_task_menu+0x20>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4b05      	ldr	r3, [pc, #20]	@ (8006d0c <any_event_task_menu+0x20>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	bf14      	ite	ne
 8006cfc:	2301      	movne	r3, #1
 8006cfe:	2300      	moveq	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	200004b8 	.word	0x200004b8

08006d10 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 8006d18:	b672      	cpsid	i
 8006d1a:	4b49      	ldr	r3, [pc, #292]	@ (8006e40 <task_sensor_init+0x130>)
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	4b49      	ldr	r3, [pc, #292]	@ (8006e44 <task_sensor_init+0x134>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	4b48      	ldr	r3, [pc, #288]	@ (8006e48 <task_sensor_init+0x138>)
 8006d26:	4a49      	ldr	r2, [pc, #292]	@ (8006e4c <task_sensor_init+0x13c>)
 8006d28:	213f      	movs	r1, #63	@ 0x3f
 8006d2a:	f000 fef5 	bl	8007b18 <sniprintf>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4a47      	ldr	r2, [pc, #284]	@ (8006e50 <task_sensor_init+0x140>)
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	4b42      	ldr	r3, [pc, #264]	@ (8006e40 <task_sensor_init+0x130>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fd fc4b 	bl	80045d4 <logger_log_print_>
 8006d3e:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 8006d40:	b672      	cpsid	i
 8006d42:	4b3f      	ldr	r3, [pc, #252]	@ (8006e40 <task_sensor_init+0x130>)
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	4b43      	ldr	r3, [pc, #268]	@ (8006e54 <task_sensor_init+0x144>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	4b42      	ldr	r3, [pc, #264]	@ (8006e58 <task_sensor_init+0x148>)
 8006d4e:	4a43      	ldr	r2, [pc, #268]	@ (8006e5c <task_sensor_init+0x14c>)
 8006d50:	213f      	movs	r1, #63	@ 0x3f
 8006d52:	f000 fee1 	bl	8007b18 <sniprintf>
 8006d56:	4603      	mov	r3, r0
 8006d58:	4a3d      	ldr	r2, [pc, #244]	@ (8006e50 <task_sensor_init+0x140>)
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	4b38      	ldr	r3, [pc, #224]	@ (8006e40 <task_sensor_init+0x130>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fd fc37 	bl	80045d4 <logger_log_print_>
 8006d66:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 8006d68:	4b3d      	ldr	r3, [pc, #244]	@ (8006e60 <task_sensor_init+0x150>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 8006d6e:	b672      	cpsid	i
 8006d70:	4b33      	ldr	r3, [pc, #204]	@ (8006e40 <task_sensor_init+0x130>)
 8006d72:	6818      	ldr	r0, [r3, #0]
 8006d74:	4b3a      	ldr	r3, [pc, #232]	@ (8006e60 <task_sensor_init+0x150>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e64 <task_sensor_init+0x154>)
 8006d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8006e68 <task_sensor_init+0x158>)
 8006d7e:	213f      	movs	r1, #63	@ 0x3f
 8006d80:	f000 feca 	bl	8007b18 <sniprintf>
 8006d84:	4603      	mov	r3, r0
 8006d86:	4a32      	ldr	r2, [pc, #200]	@ (8006e50 <task_sensor_init+0x140>)
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e40 <task_sensor_init+0x130>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fd fc20 	bl	80045d4 <logger_log_print_>
 8006d94:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8006d96:	2300      	movs	r3, #0
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	e046      	b.n	8006e2a <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	4a32      	ldr	r2, [pc, #200]	@ (8006e6c <task_sensor_init+0x15c>)
 8006da2:	4413      	add	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 8006da6:	b672      	cpsid	i
 8006da8:	4b25      	ldr	r3, [pc, #148]	@ (8006e40 <task_sensor_init+0x130>)
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	4b2f      	ldr	r3, [pc, #188]	@ (8006e70 <task_sensor_init+0x160>)
 8006db2:	4a30      	ldr	r2, [pc, #192]	@ (8006e74 <task_sensor_init+0x164>)
 8006db4:	213f      	movs	r1, #63	@ 0x3f
 8006db6:	f000 feaf 	bl	8007b18 <sniprintf>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	4a24      	ldr	r2, [pc, #144]	@ (8006e50 <task_sensor_init+0x140>)
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8006e40 <task_sensor_init+0x130>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd fc05 	bl	80045d4 <logger_log_print_>
 8006dca:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	791b      	ldrb	r3, [r3, #4]
 8006dd0:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8006dd2:	b672      	cpsid	i
 8006dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8006e40 <task_sensor_init+0x130>)
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	4b26      	ldr	r3, [pc, #152]	@ (8006e78 <task_sensor_init+0x168>)
 8006dde:	4a25      	ldr	r2, [pc, #148]	@ (8006e74 <task_sensor_init+0x164>)
 8006de0:	213f      	movs	r1, #63	@ 0x3f
 8006de2:	f000 fe99 	bl	8007b18 <sniprintf>
 8006de6:	4603      	mov	r3, r0
 8006de8:	4a19      	ldr	r2, [pc, #100]	@ (8006e50 <task_sensor_init+0x140>)
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	4b14      	ldr	r3, [pc, #80]	@ (8006e40 <task_sensor_init+0x130>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fd fbef 	bl	80045d4 <logger_log_print_>
 8006df6:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	795b      	ldrb	r3, [r3, #5]
 8006dfc:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 8006dfe:	b672      	cpsid	i
 8006e00:	4b0f      	ldr	r3, [pc, #60]	@ (8006e40 <task_sensor_init+0x130>)
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	4b1c      	ldr	r3, [pc, #112]	@ (8006e7c <task_sensor_init+0x16c>)
 8006e0a:	4a17      	ldr	r2, [pc, #92]	@ (8006e68 <task_sensor_init+0x158>)
 8006e0c:	213f      	movs	r1, #63	@ 0x3f
 8006e0e:	f000 fe83 	bl	8007b18 <sniprintf>
 8006e12:	4603      	mov	r3, r0
 8006e14:	4a0e      	ldr	r2, [pc, #56]	@ (8006e50 <task_sensor_init+0x140>)
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	4b09      	ldr	r3, [pc, #36]	@ (8006e40 <task_sensor_init+0x130>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fd fbd9 	bl	80045d4 <logger_log_print_>
 8006e22:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	3301      	adds	r3, #1
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d9b5      	bls.n	8006d9c <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 8006e30:	4b13      	ldr	r3, [pc, #76]	@ (8006e80 <task_sensor_init+0x170>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
}
 8006e36:	bf00      	nop
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	08009200 	.word	0x08009200
 8006e44:	20000024 	.word	0x20000024
 8006e48:	08009118 	.word	0x08009118
 8006e4c:	0800912c 	.word	0x0800912c
 8006e50:	20000204 	.word	0x20000204
 8006e54:	20000028 	.word	0x20000028
 8006e58:	08009144 	.word	0x08009144
 8006e5c:	08009150 	.word	0x08009150
 8006e60:	200004f4 	.word	0x200004f4
 8006e64:	08009160 	.word	0x08009160
 8006e68:	08009174 	.word	0x08009174
 8006e6c:	200004dc 	.word	0x200004dc
 8006e70:	08009184 	.word	0x08009184
 8006e74:	0800918c 	.word	0x0800918c
 8006e78:	08009198 	.word	0x08009198
 8006e7c:	080091a0 	.word	0x080091a0
 8006e80:	200004f8 	.word	0x200004f8

08006e84 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 8006e84:	b590      	push	{r4, r7, lr}
 8006e86:	b08b      	sub	sp, #44	@ 0x2c
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
	uint32_t start_cycles = cycle_counter_get();
 8006e8c:	4b73      	ldr	r3, [pc, #460]	@ (800705c <task_sensor_update+0x1d8>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	61fb      	str	r3, [r7, #28]

	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 8006e92:	2300      	movs	r3, #0
 8006e94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 8006e98:	4b71      	ldr	r3, [pc, #452]	@ (8007060 <task_sensor_update+0x1dc>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	4a70      	ldr	r2, [pc, #448]	@ (8007060 <task_sensor_update+0x1dc>)
 8006ea0:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8006ea2:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8006ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8007064 <task_sensor_update+0x1e0>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <task_sensor_update+0x38>
    {
    	g_task_sensor_tick_cnt--;
 8006eac:	4b6d      	ldr	r3, [pc, #436]	@ (8007064 <task_sensor_update+0x1e0>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	4a6c      	ldr	r2, [pc, #432]	@ (8007064 <task_sensor_update+0x1e0>)
 8006eb4:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8006ebc:	b662      	cpsie	i

    while (b_time_update_required)
 8006ebe:	e0a9      	b.n	8007014 <task_sensor_update+0x190>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8006ec0:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8006ec2:	4b68      	ldr	r3, [pc, #416]	@ (8007064 <task_sensor_update+0x1e0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d008      	beq.n	8006edc <task_sensor_update+0x58>
		{
			g_task_sensor_tick_cnt--;
 8006eca:	4b66      	ldr	r3, [pc, #408]	@ (8007064 <task_sensor_update+0x1e0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	4a64      	ldr	r2, [pc, #400]	@ (8007064 <task_sensor_update+0x1e0>)
 8006ed2:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eda:	e002      	b.n	8006ee2 <task_sensor_update+0x5e>
		}
		else
		{
			b_time_update_required = false;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8006ee2:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ee8:	e090      	b.n	800700c <task_sensor_update+0x188>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8006eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4a5c      	ldr	r2, [pc, #368]	@ (8007068 <task_sensor_update+0x1e4>)
 8006ef6:	4413      	add	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	4a5b      	ldr	r2, [pc, #364]	@ (800706c <task_sensor_update+0x1e8>)
 8006f00:	4413      	add	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	7a9c      	ldrb	r4, [r3, #10]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	891b      	ldrh	r3, [r3, #8]
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f7fa f82c 	bl	8000f70 <HAL_GPIO_ReadPin>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	429c      	cmp	r4, r3
 8006f1c:	d103      	bne.n	8006f26 <task_sensor_update+0xa2>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	715a      	strb	r2, [r3, #5]
 8006f24:	e002      	b.n	8006f2c <task_sensor_update+0xa8>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	791b      	ldrb	r3, [r3, #4]
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d857      	bhi.n	8006fe4 <task_sensor_update+0x160>
 8006f34:	a201      	add	r2, pc, #4	@ (adr r2, 8006f3c <task_sensor_update+0xb8>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006f4d 	.word	0x08006f4d
 8006f40:	08006f65 	.word	0x08006f65
 8006f44:	08006f99 	.word	0x08006f99
 8006f48:	08006fb1 	.word	0x08006fb1
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	795b      	ldrb	r3, [r3, #5]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d151      	bne.n	8006ff8 <task_sensor_update+0x174>
					{
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	601a      	str	r2, [r3, #0]
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	711a      	strb	r2, [r3, #4]
					}

					break;
 8006f62:	e049      	b.n	8006ff8 <task_sensor_update+0x174>

				case ST_BTN_XX_FALLING:

					p_task_sensor_dta->tick--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	1e5a      	subs	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d142      	bne.n	8006ffc <task_sensor_update+0x178>
					{
						if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	795b      	ldrb	r3, [r3, #5]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d108      	bne.n	8006f90 <task_sensor_update+0x10c>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_down);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	7c5b      	ldrb	r3, [r3, #17]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff fe6a 	bl	8006c5c <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_UP;
						}
					}

					break;
 8006f8e:	e035      	b.n	8006ffc <task_sensor_update+0x178>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	711a      	strb	r2, [r3, #4]
					break;
 8006f96:	e031      	b.n	8006ffc <task_sensor_update+0x178>

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	795b      	ldrb	r3, [r3, #5]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d12f      	bne.n	8007000 <task_sensor_update+0x17c>
					{
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	601a      	str	r2, [r3, #0]
					}

					break;
 8006fae:	e027      	b.n	8007000 <task_sensor_update+0x17c>

				case ST_BTN_XX_RISING:

					p_task_sensor_dta->tick--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	1e5a      	subs	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d120      	bne.n	8007004 <task_sensor_update+0x180>
					{
						if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	795b      	ldrb	r3, [r3, #5]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d108      	bne.n	8006fdc <task_sensor_update+0x158>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_up);
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	7c1b      	ldrb	r3, [r3, #16]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fe44 	bl	8006c5c <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
						}
					}

					break;
 8006fda:	e013      	b.n	8007004 <task_sensor_update+0x180>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	711a      	strb	r2, [r3, #4]
					break;
 8006fe2:	e00f      	b.n	8007004 <task_sensor_update+0x180>

				default:

					p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	711a      	strb	r2, [r3, #4]
					p_task_sensor_dta->event = EV_BTN_XX_UP;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	715a      	strb	r2, [r3, #5]

					break;
 8006ff6:	e006      	b.n	8007006 <task_sensor_update+0x182>
					break;
 8006ff8:	bf00      	nop
 8006ffa:	e004      	b.n	8007006 <task_sensor_update+0x182>
					break;
 8006ffc:	bf00      	nop
 8006ffe:	e002      	b.n	8007006 <task_sensor_update+0x182>
					break;
 8007000:	bf00      	nop
 8007002:	e000      	b.n	8007006 <task_sensor_update+0x182>
					break;
 8007004:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8007006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007008:	3301      	adds	r3, #1
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	2b02      	cmp	r3, #2
 8007010:	f67f af6b 	bls.w	8006eea <task_sensor_update+0x66>
    while (b_time_update_required)
 8007014:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007018:	2b00      	cmp	r3, #0
 800701a:	f47f af51 	bne.w	8006ec0 <task_sensor_update+0x3c>
			}
		}
    }
	uint32_t elapsed_cycles = cycle_counter_get() - start_cycles;
 800701e:	4b0f      	ldr	r3, [pc, #60]	@ (800705c <task_sensor_update+0x1d8>)
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	61bb      	str	r3, [r7, #24]
	uint32_t elapsed_us = elapsed_cycles / cycles_per_us; // conversión manual
 8007028:	4b11      	ldr	r3, [pc, #68]	@ (8007070 <task_sensor_update+0x1ec>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a11      	ldr	r2, [pc, #68]	@ (8007074 <task_sensor_update+0x1f0>)
 800702e:	fba2 2303 	umull	r2, r3, r2, r3
 8007032:	0c9b      	lsrs	r3, r3, #18
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	fbb2 f3f3 	udiv	r3, r2, r3
 800703a:	617b      	str	r3, [r7, #20]

	if (elapsed_us > wcet_task_sensor_us) {
 800703c:	4b0e      	ldr	r3, [pc, #56]	@ (8007078 <task_sensor_update+0x1f4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	429a      	cmp	r2, r3
 8007044:	d905      	bls.n	8007052 <task_sensor_update+0x1ce>
		wcet_task_sensor_us = elapsed_us;
 8007046:	4a0c      	ldr	r2, [pc, #48]	@ (8007078 <task_sensor_update+0x1f4>)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	6013      	str	r3, [r2, #0]
		wcet_task_sensor_cycles = elapsed_cycles;
 800704c:	4a0b      	ldr	r2, [pc, #44]	@ (800707c <task_sensor_update+0x1f8>)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	6013      	str	r3, [r2, #0]
	}
}
 8007052:	bf00      	nop
 8007054:	372c      	adds	r7, #44	@ 0x2c
 8007056:	46bd      	mov	sp, r7
 8007058:	bd90      	pop	{r4, r7, pc}
 800705a:	bf00      	nop
 800705c:	e0001000 	.word	0xe0001000
 8007060:	200004f4 	.word	0x200004f4
 8007064:	200004f8 	.word	0x200004f8
 8007068:	08009204 	.word	0x08009204
 800706c:	200004dc 	.word	0x200004dc
 8007070:	20000000 	.word	0x20000000
 8007074:	431bde83 	.word	0x431bde83
 8007078:	200004d8 	.word	0x200004d8
 800707c:	200004d4 	.word	0x200004d4

08007080 <keypadUpdate>:
static bool keyAvailable = false;

//=====[Implementations of private functions]==================================

//=====[Implementations of public functions]===================================
void keypadUpdate(void){
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
    if (keyAvailable){
 8007086:	4b39      	ldr	r3, [pc, #228]	@ (800716c <keypadUpdate+0xec>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d169      	bne.n	8007162 <keypadUpdate+0xe2>
        return;  // Wait until previous key is processed
    }

    for (int col = 0; col < 4; col++){
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	e062      	b.n	800715a <keypadUpdate+0xda>
        // Set current column low, others high
        for (int i = 0; i < 4; i++) {
 8007094:	2300      	movs	r3, #0
 8007096:	60bb      	str	r3, [r7, #8]
 8007098:	e00e      	b.n	80070b8 <keypadUpdate+0x38>
            HAL_GPIO_WritePin(col_ports[i], col_pins[i], GPIO_PIN_SET);  // Inactive
 800709a:	4a35      	ldr	r2, [pc, #212]	@ (8007170 <keypadUpdate+0xf0>)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80070a2:	4a34      	ldr	r2, [pc, #208]	@ (8007174 <keypadUpdate+0xf4>)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070aa:	2201      	movs	r2, #1
 80070ac:	4619      	mov	r1, r3
 80070ae:	f7f9 ff76 	bl	8000f9e <HAL_GPIO_WritePin>
        for (int i = 0; i < 4; i++) {
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	3301      	adds	r3, #1
 80070b6:	60bb      	str	r3, [r7, #8]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	dded      	ble.n	800709a <keypadUpdate+0x1a>
        }
        HAL_GPIO_WritePin(col_ports[col], col_pins[col], GPIO_PIN_RESET); // Active
 80070be:	4a2c      	ldr	r2, [pc, #176]	@ (8007170 <keypadUpdate+0xf0>)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80070c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007174 <keypadUpdate+0xf4>)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ce:	2200      	movs	r2, #0
 80070d0:	4619      	mov	r1, r3
 80070d2:	f7f9 ff64 	bl	8000f9e <HAL_GPIO_WritePin>

        for (volatile int d = 0; d < 1000; d++);
 80070d6:	2300      	movs	r3, #0
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	e002      	b.n	80070e2 <keypadUpdate+0x62>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	3301      	adds	r3, #1
 80070e0:	603b      	str	r3, [r7, #0]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070e8:	dbf8      	blt.n	80070dc <keypadUpdate+0x5c>

        // Read rows
        for (int row = 0; row < 4; row++){
 80070ea:	2300      	movs	r3, #0
 80070ec:	607b      	str	r3, [r7, #4]
 80070ee:	e02e      	b.n	800714e <keypadUpdate+0xce>
            if (HAL_GPIO_ReadPin(row_ports[row], row_pins[row]) == GPIO_PIN_RESET){
 80070f0:	4a21      	ldr	r2, [pc, #132]	@ (8007178 <keypadUpdate+0xf8>)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80070f8:	4920      	ldr	r1, [pc, #128]	@ (800717c <keypadUpdate+0xfc>)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007100:	4619      	mov	r1, r3
 8007102:	4610      	mov	r0, r2
 8007104:	f7f9 ff34 	bl	8000f70 <HAL_GPIO_ReadPin>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d11c      	bne.n	8007148 <keypadUpdate+0xc8>
                detectedKey = keypad_map[row][col];
 800710e:	4a1c      	ldr	r2, [pc, #112]	@ (8007180 <keypadUpdate+0x100>)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	441a      	add	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	781a      	ldrb	r2, [r3, #0]
 800711c:	4b19      	ldr	r3, [pc, #100]	@ (8007184 <keypadUpdate+0x104>)
 800711e:	701a      	strb	r2, [r3, #0]
                keyAvailable = true;
 8007120:	4b12      	ldr	r3, [pc, #72]	@ (800716c <keypadUpdate+0xec>)
 8007122:	2201      	movs	r2, #1
 8007124:	701a      	strb	r2, [r3, #0]

                // Debounce
                while (HAL_GPIO_ReadPin(row_ports[row], row_pins[row]) == GPIO_PIN_RESET);
 8007126:	bf00      	nop
 8007128:	4a13      	ldr	r2, [pc, #76]	@ (8007178 <keypadUpdate+0xf8>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007130:	4912      	ldr	r1, [pc, #72]	@ (800717c <keypadUpdate+0xfc>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f7f9 ff18 	bl	8000f70 <HAL_GPIO_ReadPin>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0f0      	beq.n	8007128 <keypadUpdate+0xa8>
                return;
 8007146:	e00d      	b.n	8007164 <keypadUpdate+0xe4>
        for (int row = 0; row < 4; row++){
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3301      	adds	r3, #1
 800714c:	607b      	str	r3, [r7, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b03      	cmp	r3, #3
 8007152:	ddcd      	ble.n	80070f0 <keypadUpdate+0x70>
    for (int col = 0; col < 4; col++){
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3301      	adds	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b03      	cmp	r3, #3
 800715e:	dd99      	ble.n	8007094 <keypadUpdate+0x14>
 8007160:	e000      	b.n	8007164 <keypadUpdate+0xe4>
        return;  // Wait until previous key is processed
 8007162:	bf00      	nop
            }
        }
    }
}
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	200004fd 	.word	0x200004fd
 8007170:	2000002c 	.word	0x2000002c
 8007174:	2000003c 	.word	0x2000003c
 8007178:	20000044 	.word	0x20000044
 800717c:	20000054 	.word	0x20000054
 8007180:	08009240 	.word	0x08009240
 8007184:	200004fc 	.word	0x200004fc

08007188 <keypadKeyAvailable>:

bool keypadKeyAvailable(void){
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
    return keyAvailable;
 800718c:	4b02      	ldr	r3, [pc, #8]	@ (8007198 <keypadKeyAvailable+0x10>)
 800718e:	781b      	ldrb	r3, [r3, #0]
}
 8007190:	4618      	mov	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	bc80      	pop	{r7}
 8007196:	4770      	bx	lr
 8007198:	200004fd 	.word	0x200004fd

0800719c <keypadReadKey>:

char keypadReadKey(void){
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
    keyAvailable = false;
 80071a0:	4b04      	ldr	r3, [pc, #16]	@ (80071b4 <keypadReadKey+0x18>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	701a      	strb	r2, [r3, #0]
    return detectedKey;
 80071a6:	4b04      	ldr	r3, [pc, #16]	@ (80071b8 <keypadReadKey+0x1c>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	200004fd 	.word	0x200004fd
 80071b8:	200004fc 	.word	0x200004fc

080071bc <findslot>:
 80071bc:	4b0a      	ldr	r3, [pc, #40]	@ (80071e8 <findslot+0x2c>)
 80071be:	b510      	push	{r4, lr}
 80071c0:	4604      	mov	r4, r0
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	b118      	cbz	r0, 80071ce <findslot+0x12>
 80071c6:	6a03      	ldr	r3, [r0, #32]
 80071c8:	b90b      	cbnz	r3, 80071ce <findslot+0x12>
 80071ca:	f000 fc5d 	bl	8007a88 <__sinit>
 80071ce:	2c13      	cmp	r4, #19
 80071d0:	d807      	bhi.n	80071e2 <findslot+0x26>
 80071d2:	4806      	ldr	r0, [pc, #24]	@ (80071ec <findslot+0x30>)
 80071d4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80071d8:	3201      	adds	r2, #1
 80071da:	d002      	beq.n	80071e2 <findslot+0x26>
 80071dc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80071e0:	bd10      	pop	{r4, pc}
 80071e2:	2000      	movs	r0, #0
 80071e4:	e7fc      	b.n	80071e0 <findslot+0x24>
 80071e6:	bf00      	nop
 80071e8:	20000070 	.word	0x20000070
 80071ec:	2000050c 	.word	0x2000050c

080071f0 <error>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	4604      	mov	r4, r0
 80071f4:	f000 fd68 	bl	8007cc8 <__errno>
 80071f8:	2613      	movs	r6, #19
 80071fa:	4605      	mov	r5, r0
 80071fc:	2700      	movs	r7, #0
 80071fe:	4630      	mov	r0, r6
 8007200:	4639      	mov	r1, r7
 8007202:	beab      	bkpt	0x00ab
 8007204:	4606      	mov	r6, r0
 8007206:	4620      	mov	r0, r4
 8007208:	602e      	str	r6, [r5, #0]
 800720a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800720c <checkerror>:
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d101      	bne.n	8007214 <checkerror+0x8>
 8007210:	f7ff bfee 	b.w	80071f0 <error>
 8007214:	4770      	bx	lr

08007216 <_swiread>:
 8007216:	b530      	push	{r4, r5, lr}
 8007218:	b085      	sub	sp, #20
 800721a:	2406      	movs	r4, #6
 800721c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007220:	9203      	str	r2, [sp, #12]
 8007222:	ad01      	add	r5, sp, #4
 8007224:	4620      	mov	r0, r4
 8007226:	4629      	mov	r1, r5
 8007228:	beab      	bkpt	0x00ab
 800722a:	4604      	mov	r4, r0
 800722c:	4620      	mov	r0, r4
 800722e:	f7ff ffed 	bl	800720c <checkerror>
 8007232:	b005      	add	sp, #20
 8007234:	bd30      	pop	{r4, r5, pc}

08007236 <_read>:
 8007236:	b570      	push	{r4, r5, r6, lr}
 8007238:	460e      	mov	r6, r1
 800723a:	4614      	mov	r4, r2
 800723c:	f7ff ffbe 	bl	80071bc <findslot>
 8007240:	4605      	mov	r5, r0
 8007242:	b930      	cbnz	r0, 8007252 <_read+0x1c>
 8007244:	f000 fd40 	bl	8007cc8 <__errno>
 8007248:	2309      	movs	r3, #9
 800724a:	6003      	str	r3, [r0, #0]
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	bd70      	pop	{r4, r5, r6, pc}
 8007252:	4622      	mov	r2, r4
 8007254:	4631      	mov	r1, r6
 8007256:	6800      	ldr	r0, [r0, #0]
 8007258:	f7ff ffdd 	bl	8007216 <_swiread>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d0f5      	beq.n	800724c <_read+0x16>
 8007260:	686b      	ldr	r3, [r5, #4]
 8007262:	1a20      	subs	r0, r4, r0
 8007264:	4403      	add	r3, r0
 8007266:	606b      	str	r3, [r5, #4]
 8007268:	e7f2      	b.n	8007250 <_read+0x1a>

0800726a <_swilseek>:
 800726a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800726c:	460c      	mov	r4, r1
 800726e:	4616      	mov	r6, r2
 8007270:	f7ff ffa4 	bl	80071bc <findslot>
 8007274:	4605      	mov	r5, r0
 8007276:	b940      	cbnz	r0, 800728a <_swilseek+0x20>
 8007278:	f000 fd26 	bl	8007cc8 <__errno>
 800727c:	2309      	movs	r3, #9
 800727e:	6003      	str	r3, [r0, #0]
 8007280:	f04f 34ff 	mov.w	r4, #4294967295
 8007284:	4620      	mov	r0, r4
 8007286:	b003      	add	sp, #12
 8007288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800728a:	2e02      	cmp	r6, #2
 800728c:	d903      	bls.n	8007296 <_swilseek+0x2c>
 800728e:	f000 fd1b 	bl	8007cc8 <__errno>
 8007292:	2316      	movs	r3, #22
 8007294:	e7f3      	b.n	800727e <_swilseek+0x14>
 8007296:	2e01      	cmp	r6, #1
 8007298:	d112      	bne.n	80072c0 <_swilseek+0x56>
 800729a:	6843      	ldr	r3, [r0, #4]
 800729c:	18e4      	adds	r4, r4, r3
 800729e:	d4f6      	bmi.n	800728e <_swilseek+0x24>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	260a      	movs	r6, #10
 80072a4:	466f      	mov	r7, sp
 80072a6:	e9cd 3400 	strd	r3, r4, [sp]
 80072aa:	4630      	mov	r0, r6
 80072ac:	4639      	mov	r1, r7
 80072ae:	beab      	bkpt	0x00ab
 80072b0:	4606      	mov	r6, r0
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ffaa 	bl	800720c <checkerror>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	dbe1      	blt.n	8007280 <_swilseek+0x16>
 80072bc:	606c      	str	r4, [r5, #4]
 80072be:	e7e1      	b.n	8007284 <_swilseek+0x1a>
 80072c0:	2e02      	cmp	r6, #2
 80072c2:	6803      	ldr	r3, [r0, #0]
 80072c4:	d1ec      	bne.n	80072a0 <_swilseek+0x36>
 80072c6:	260c      	movs	r6, #12
 80072c8:	466f      	mov	r7, sp
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4630      	mov	r0, r6
 80072ce:	4639      	mov	r1, r7
 80072d0:	beab      	bkpt	0x00ab
 80072d2:	4606      	mov	r6, r0
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7ff ff99 	bl	800720c <checkerror>
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	d0d0      	beq.n	8007280 <_swilseek+0x16>
 80072de:	4404      	add	r4, r0
 80072e0:	e7de      	b.n	80072a0 <_swilseek+0x36>

080072e2 <_lseek>:
 80072e2:	f7ff bfc2 	b.w	800726a <_swilseek>

080072e6 <_swiwrite>:
 80072e6:	b530      	push	{r4, r5, lr}
 80072e8:	b085      	sub	sp, #20
 80072ea:	2405      	movs	r4, #5
 80072ec:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80072f0:	9203      	str	r2, [sp, #12]
 80072f2:	ad01      	add	r5, sp, #4
 80072f4:	4620      	mov	r0, r4
 80072f6:	4629      	mov	r1, r5
 80072f8:	beab      	bkpt	0x00ab
 80072fa:	4604      	mov	r4, r0
 80072fc:	4620      	mov	r0, r4
 80072fe:	f7ff ff85 	bl	800720c <checkerror>
 8007302:	b005      	add	sp, #20
 8007304:	bd30      	pop	{r4, r5, pc}

08007306 <_write>:
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	460e      	mov	r6, r1
 800730a:	4615      	mov	r5, r2
 800730c:	f7ff ff56 	bl	80071bc <findslot>
 8007310:	4604      	mov	r4, r0
 8007312:	b930      	cbnz	r0, 8007322 <_write+0x1c>
 8007314:	f000 fcd8 	bl	8007cc8 <__errno>
 8007318:	2309      	movs	r3, #9
 800731a:	6003      	str	r3, [r0, #0]
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	bd70      	pop	{r4, r5, r6, pc}
 8007322:	462a      	mov	r2, r5
 8007324:	4631      	mov	r1, r6
 8007326:	6800      	ldr	r0, [r0, #0]
 8007328:	f7ff ffdd 	bl	80072e6 <_swiwrite>
 800732c:	1e03      	subs	r3, r0, #0
 800732e:	dbf5      	blt.n	800731c <_write+0x16>
 8007330:	6862      	ldr	r2, [r4, #4]
 8007332:	1ae8      	subs	r0, r5, r3
 8007334:	4402      	add	r2, r0
 8007336:	42ab      	cmp	r3, r5
 8007338:	6062      	str	r2, [r4, #4]
 800733a:	d1f1      	bne.n	8007320 <_write+0x1a>
 800733c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007340:	2000      	movs	r0, #0
 8007342:	f7ff bf55 	b.w	80071f0 <error>

08007346 <_swiclose>:
 8007346:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007348:	2402      	movs	r4, #2
 800734a:	9001      	str	r0, [sp, #4]
 800734c:	ad01      	add	r5, sp, #4
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	beab      	bkpt	0x00ab
 8007354:	4604      	mov	r4, r0
 8007356:	4620      	mov	r0, r4
 8007358:	f7ff ff58 	bl	800720c <checkerror>
 800735c:	b003      	add	sp, #12
 800735e:	bd30      	pop	{r4, r5, pc}

08007360 <_close>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4605      	mov	r5, r0
 8007364:	f7ff ff2a 	bl	80071bc <findslot>
 8007368:	4604      	mov	r4, r0
 800736a:	b930      	cbnz	r0, 800737a <_close+0x1a>
 800736c:	f000 fcac 	bl	8007cc8 <__errno>
 8007370:	2309      	movs	r3, #9
 8007372:	6003      	str	r3, [r0, #0]
 8007374:	f04f 30ff 	mov.w	r0, #4294967295
 8007378:	bd38      	pop	{r3, r4, r5, pc}
 800737a:	3d01      	subs	r5, #1
 800737c:	2d01      	cmp	r5, #1
 800737e:	d809      	bhi.n	8007394 <_close+0x34>
 8007380:	4b07      	ldr	r3, [pc, #28]	@ (80073a0 <_close+0x40>)
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	429a      	cmp	r2, r3
 8007388:	d104      	bne.n	8007394 <_close+0x34>
 800738a:	f04f 33ff 	mov.w	r3, #4294967295
 800738e:	2000      	movs	r0, #0
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	e7f1      	b.n	8007378 <_close+0x18>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	f7ff ffd6 	bl	8007346 <_swiclose>
 800739a:	2800      	cmp	r0, #0
 800739c:	d0f5      	beq.n	800738a <_close+0x2a>
 800739e:	e7eb      	b.n	8007378 <_close+0x18>
 80073a0:	2000050c 	.word	0x2000050c

080073a4 <_swistat>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	460c      	mov	r4, r1
 80073a8:	f7ff ff08 	bl	80071bc <findslot>
 80073ac:	4605      	mov	r5, r0
 80073ae:	b930      	cbnz	r0, 80073be <_swistat+0x1a>
 80073b0:	f000 fc8a 	bl	8007cc8 <__errno>
 80073b4:	2309      	movs	r3, #9
 80073b6:	6003      	str	r3, [r0, #0]
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
 80073be:	6863      	ldr	r3, [r4, #4]
 80073c0:	260c      	movs	r6, #12
 80073c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073cc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80073ce:	4630      	mov	r0, r6
 80073d0:	4629      	mov	r1, r5
 80073d2:	beab      	bkpt	0x00ab
 80073d4:	4605      	mov	r5, r0
 80073d6:	4628      	mov	r0, r5
 80073d8:	f7ff ff18 	bl	800720c <checkerror>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d0eb      	beq.n	80073b8 <_swistat+0x14>
 80073e0:	6120      	str	r0, [r4, #16]
 80073e2:	2000      	movs	r0, #0
 80073e4:	e7ea      	b.n	80073bc <_swistat+0x18>

080073e6 <_fstat>:
 80073e6:	460b      	mov	r3, r1
 80073e8:	b510      	push	{r4, lr}
 80073ea:	2100      	movs	r1, #0
 80073ec:	4604      	mov	r4, r0
 80073ee:	2258      	movs	r2, #88	@ 0x58
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fc08 	bl	8007c06 <memset>
 80073f6:	4601      	mov	r1, r0
 80073f8:	4620      	mov	r0, r4
 80073fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073fe:	f7ff bfd1 	b.w	80073a4 <_swistat>

08007402 <_stat>:
 8007402:	b538      	push	{r3, r4, r5, lr}
 8007404:	460d      	mov	r5, r1
 8007406:	4604      	mov	r4, r0
 8007408:	2258      	movs	r2, #88	@ 0x58
 800740a:	2100      	movs	r1, #0
 800740c:	4628      	mov	r0, r5
 800740e:	f000 fbfa 	bl	8007c06 <memset>
 8007412:	4620      	mov	r0, r4
 8007414:	2100      	movs	r1, #0
 8007416:	f000 f811 	bl	800743c <_swiopen>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	4604      	mov	r4, r0
 800741e:	d00b      	beq.n	8007438 <_stat+0x36>
 8007420:	686b      	ldr	r3, [r5, #4]
 8007422:	4629      	mov	r1, r5
 8007424:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007428:	606b      	str	r3, [r5, #4]
 800742a:	f7ff ffbb 	bl	80073a4 <_swistat>
 800742e:	4605      	mov	r5, r0
 8007430:	4620      	mov	r0, r4
 8007432:	f7ff ff95 	bl	8007360 <_close>
 8007436:	462c      	mov	r4, r5
 8007438:	4620      	mov	r0, r4
 800743a:	bd38      	pop	{r3, r4, r5, pc}

0800743c <_swiopen>:
 800743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	4682      	mov	sl, r0
 8007442:	460e      	mov	r6, r1
 8007444:	2400      	movs	r4, #0
 8007446:	4f28      	ldr	r7, [pc, #160]	@ (80074e8 <_swiopen+0xac>)
 8007448:	b096      	sub	sp, #88	@ 0x58
 800744a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800744e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007452:	3301      	adds	r3, #1
 8007454:	d00c      	beq.n	8007470 <_swiopen+0x34>
 8007456:	3401      	adds	r4, #1
 8007458:	2c14      	cmp	r4, #20
 800745a:	d1f6      	bne.n	800744a <_swiopen+0xe>
 800745c:	f000 fc34 	bl	8007cc8 <__errno>
 8007460:	2318      	movs	r3, #24
 8007462:	f04f 34ff 	mov.w	r4, #4294967295
 8007466:	6003      	str	r3, [r0, #0]
 8007468:	4620      	mov	r0, r4
 800746a:	b016      	add	sp, #88	@ 0x58
 800746c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007470:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8007474:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007478:	46e9      	mov	r9, sp
 800747a:	d109      	bne.n	8007490 <_swiopen+0x54>
 800747c:	4649      	mov	r1, r9
 800747e:	4650      	mov	r0, sl
 8007480:	f7ff ffbf 	bl	8007402 <_stat>
 8007484:	3001      	adds	r0, #1
 8007486:	d003      	beq.n	8007490 <_swiopen+0x54>
 8007488:	f000 fc1e 	bl	8007cc8 <__errno>
 800748c:	2311      	movs	r3, #17
 800748e:	e7e8      	b.n	8007462 <_swiopen+0x26>
 8007490:	f240 6301 	movw	r3, #1537	@ 0x601
 8007494:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007498:	07b2      	lsls	r2, r6, #30
 800749a:	bf48      	it	mi
 800749c:	f045 0502 	orrmi.w	r5, r5, #2
 80074a0:	421e      	tst	r6, r3
 80074a2:	bf18      	it	ne
 80074a4:	f045 0504 	orrne.w	r5, r5, #4
 80074a8:	0733      	lsls	r3, r6, #28
 80074aa:	bf48      	it	mi
 80074ac:	f025 0504 	bicmi.w	r5, r5, #4
 80074b0:	4650      	mov	r0, sl
 80074b2:	bf48      	it	mi
 80074b4:	f045 0508 	orrmi.w	r5, r5, #8
 80074b8:	f8cd a000 	str.w	sl, [sp]
 80074bc:	f7f8 fe50 	bl	8000160 <strlen>
 80074c0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80074c4:	2501      	movs	r5, #1
 80074c6:	4628      	mov	r0, r5
 80074c8:	4649      	mov	r1, r9
 80074ca:	beab      	bkpt	0x00ab
 80074cc:	4605      	mov	r5, r0
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	db05      	blt.n	80074de <_swiopen+0xa2>
 80074d2:	2300      	movs	r3, #0
 80074d4:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80074d8:	4447      	add	r7, r8
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	e7c4      	b.n	8007468 <_swiopen+0x2c>
 80074de:	4628      	mov	r0, r5
 80074e0:	f7ff fe86 	bl	80071f0 <error>
 80074e4:	4604      	mov	r4, r0
 80074e6:	e7bf      	b.n	8007468 <_swiopen+0x2c>
 80074e8:	2000050c 	.word	0x2000050c

080074ec <_get_semihosting_exts>:
 80074ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074f0:	4606      	mov	r6, r0
 80074f2:	460f      	mov	r7, r1
 80074f4:	4829      	ldr	r0, [pc, #164]	@ (800759c <_get_semihosting_exts+0xb0>)
 80074f6:	2100      	movs	r1, #0
 80074f8:	4615      	mov	r5, r2
 80074fa:	f7ff ff9f 	bl	800743c <_swiopen>
 80074fe:	4604      	mov	r4, r0
 8007500:	462a      	mov	r2, r5
 8007502:	2100      	movs	r1, #0
 8007504:	4630      	mov	r0, r6
 8007506:	f000 fb7e 	bl	8007c06 <memset>
 800750a:	1c63      	adds	r3, r4, #1
 800750c:	d014      	beq.n	8007538 <_get_semihosting_exts+0x4c>
 800750e:	4620      	mov	r0, r4
 8007510:	f7ff fe54 	bl	80071bc <findslot>
 8007514:	f04f 080c 	mov.w	r8, #12
 8007518:	4681      	mov	r9, r0
 800751a:	4640      	mov	r0, r8
 800751c:	4649      	mov	r1, r9
 800751e:	beab      	bkpt	0x00ab
 8007520:	4680      	mov	r8, r0
 8007522:	4640      	mov	r0, r8
 8007524:	f7ff fe72 	bl	800720c <checkerror>
 8007528:	2803      	cmp	r0, #3
 800752a:	dd02      	ble.n	8007532 <_get_semihosting_exts+0x46>
 800752c:	1ec3      	subs	r3, r0, #3
 800752e:	42ab      	cmp	r3, r5
 8007530:	dc07      	bgt.n	8007542 <_get_semihosting_exts+0x56>
 8007532:	4620      	mov	r0, r4
 8007534:	f7ff ff14 	bl	8007360 <_close>
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	b003      	add	sp, #12
 800753e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007542:	2204      	movs	r2, #4
 8007544:	4620      	mov	r0, r4
 8007546:	eb0d 0102 	add.w	r1, sp, r2
 800754a:	f7ff fe74 	bl	8007236 <_read>
 800754e:	2803      	cmp	r0, #3
 8007550:	ddef      	ble.n	8007532 <_get_semihosting_exts+0x46>
 8007552:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007556:	2b53      	cmp	r3, #83	@ 0x53
 8007558:	d1eb      	bne.n	8007532 <_get_semihosting_exts+0x46>
 800755a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800755e:	2b48      	cmp	r3, #72	@ 0x48
 8007560:	d1e7      	bne.n	8007532 <_get_semihosting_exts+0x46>
 8007562:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007566:	2b46      	cmp	r3, #70	@ 0x46
 8007568:	d1e3      	bne.n	8007532 <_get_semihosting_exts+0x46>
 800756a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800756e:	2b42      	cmp	r3, #66	@ 0x42
 8007570:	d1df      	bne.n	8007532 <_get_semihosting_exts+0x46>
 8007572:	2201      	movs	r2, #1
 8007574:	4639      	mov	r1, r7
 8007576:	4620      	mov	r0, r4
 8007578:	f7ff fe77 	bl	800726a <_swilseek>
 800757c:	2800      	cmp	r0, #0
 800757e:	dbd8      	blt.n	8007532 <_get_semihosting_exts+0x46>
 8007580:	462a      	mov	r2, r5
 8007582:	4631      	mov	r1, r6
 8007584:	4620      	mov	r0, r4
 8007586:	f7ff fe56 	bl	8007236 <_read>
 800758a:	4605      	mov	r5, r0
 800758c:	4620      	mov	r0, r4
 800758e:	f7ff fee7 	bl	8007360 <_close>
 8007592:	4628      	mov	r0, r5
 8007594:	f7ff fe3a 	bl	800720c <checkerror>
 8007598:	e7d0      	b.n	800753c <_get_semihosting_exts+0x50>
 800759a:	bf00      	nop
 800759c:	08009250 	.word	0x08009250

080075a0 <initialise_semihosting_exts>:
 80075a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a2:	2100      	movs	r1, #0
 80075a4:	2201      	movs	r2, #1
 80075a6:	4d09      	ldr	r5, [pc, #36]	@ (80075cc <initialise_semihosting_exts+0x2c>)
 80075a8:	4c09      	ldr	r4, [pc, #36]	@ (80075d0 <initialise_semihosting_exts+0x30>)
 80075aa:	a801      	add	r0, sp, #4
 80075ac:	6029      	str	r1, [r5, #0]
 80075ae:	6022      	str	r2, [r4, #0]
 80075b0:	f7ff ff9c 	bl	80074ec <_get_semihosting_exts>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	dd07      	ble.n	80075c8 <initialise_semihosting_exts+0x28>
 80075b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80075bc:	f003 0201 	and.w	r2, r3, #1
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	602a      	str	r2, [r5, #0]
 80075c6:	6023      	str	r3, [r4, #0]
 80075c8:	b003      	add	sp, #12
 80075ca:	bd30      	pop	{r4, r5, pc}
 80075cc:	20000060 	.word	0x20000060
 80075d0:	2000005c 	.word	0x2000005c

080075d4 <_has_ext_stdout_stderr>:
 80075d4:	b510      	push	{r4, lr}
 80075d6:	4c04      	ldr	r4, [pc, #16]	@ (80075e8 <_has_ext_stdout_stderr+0x14>)
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	da01      	bge.n	80075e2 <_has_ext_stdout_stderr+0xe>
 80075de:	f7ff ffdf 	bl	80075a0 <initialise_semihosting_exts>
 80075e2:	6820      	ldr	r0, [r4, #0]
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	bf00      	nop
 80075e8:	2000005c 	.word	0x2000005c

080075ec <initialise_monitor_handles>:
 80075ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f0:	2303      	movs	r3, #3
 80075f2:	2400      	movs	r4, #0
 80075f4:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8007698 <initialise_monitor_handles+0xac>
 80075f8:	b085      	sub	sp, #20
 80075fa:	f8cd 9004 	str.w	r9, [sp, #4]
 80075fe:	af01      	add	r7, sp, #4
 8007600:	9303      	str	r3, [sp, #12]
 8007602:	2501      	movs	r5, #1
 8007604:	9402      	str	r4, [sp, #8]
 8007606:	4628      	mov	r0, r5
 8007608:	4639      	mov	r1, r7
 800760a:	beab      	bkpt	0x00ab
 800760c:	4605      	mov	r5, r0
 800760e:	f04f 32ff 	mov.w	r2, #4294967295
 8007612:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800769c <initialise_monitor_handles+0xb0>
 8007616:	4623      	mov	r3, r4
 8007618:	4c21      	ldr	r4, [pc, #132]	@ (80076a0 <initialise_monitor_handles+0xb4>)
 800761a:	f8c8 5000 	str.w	r5, [r8]
 800761e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007622:	3301      	adds	r3, #1
 8007624:	2b14      	cmp	r3, #20
 8007626:	d1fa      	bne.n	800761e <initialise_monitor_handles+0x32>
 8007628:	f7ff ffd4 	bl	80075d4 <_has_ext_stdout_stderr>
 800762c:	4d1d      	ldr	r5, [pc, #116]	@ (80076a4 <initialise_monitor_handles+0xb8>)
 800762e:	b1d0      	cbz	r0, 8007666 <initialise_monitor_handles+0x7a>
 8007630:	f04f 0a03 	mov.w	sl, #3
 8007634:	2304      	movs	r3, #4
 8007636:	f8cd 9004 	str.w	r9, [sp, #4]
 800763a:	2601      	movs	r6, #1
 800763c:	f8cd a00c 	str.w	sl, [sp, #12]
 8007640:	9302      	str	r3, [sp, #8]
 8007642:	4630      	mov	r0, r6
 8007644:	4639      	mov	r1, r7
 8007646:	beab      	bkpt	0x00ab
 8007648:	4683      	mov	fp, r0
 800764a:	4b17      	ldr	r3, [pc, #92]	@ (80076a8 <initialise_monitor_handles+0xbc>)
 800764c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007650:	f8c3 b000 	str.w	fp, [r3]
 8007654:	2308      	movs	r3, #8
 8007656:	f8cd a00c 	str.w	sl, [sp, #12]
 800765a:	9302      	str	r3, [sp, #8]
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	beab      	bkpt	0x00ab
 8007662:	4606      	mov	r6, r0
 8007664:	602e      	str	r6, [r5, #0]
 8007666:	2600      	movs	r6, #0
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	6066      	str	r6, [r4, #4]
 800766c:	3301      	adds	r3, #1
 800766e:	bf02      	ittt	eq
 8007670:	4b0d      	ldreq	r3, [pc, #52]	@ (80076a8 <initialise_monitor_handles+0xbc>)
 8007672:	681b      	ldreq	r3, [r3, #0]
 8007674:	602b      	streq	r3, [r5, #0]
 8007676:	f8d8 3000 	ldr.w	r3, [r8]
 800767a:	6023      	str	r3, [r4, #0]
 800767c:	f7ff ffaa 	bl	80075d4 <_has_ext_stdout_stderr>
 8007680:	b130      	cbz	r0, 8007690 <initialise_monitor_handles+0xa4>
 8007682:	4b09      	ldr	r3, [pc, #36]	@ (80076a8 <initialise_monitor_handles+0xbc>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800768a:	682b      	ldr	r3, [r5, #0]
 800768c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007690:	b005      	add	sp, #20
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	bf00      	nop
 8007698:	08009266 	.word	0x08009266
 800769c:	20000508 	.word	0x20000508
 80076a0:	2000050c 	.word	0x2000050c
 80076a4:	20000500 	.word	0x20000500
 80076a8:	20000504 	.word	0x20000504

080076ac <_isatty>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	f7ff fd85 	bl	80071bc <findslot>
 80076b2:	2409      	movs	r4, #9
 80076b4:	4605      	mov	r5, r0
 80076b6:	b920      	cbnz	r0, 80076c2 <_isatty+0x16>
 80076b8:	f000 fb06 	bl	8007cc8 <__errno>
 80076bc:	6004      	str	r4, [r0, #0]
 80076be:	2000      	movs	r0, #0
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
 80076c2:	4620      	mov	r0, r4
 80076c4:	4629      	mov	r1, r5
 80076c6:	beab      	bkpt	0x00ab
 80076c8:	4604      	mov	r4, r0
 80076ca:	2c01      	cmp	r4, #1
 80076cc:	4620      	mov	r0, r4
 80076ce:	d0f7      	beq.n	80076c0 <_isatty+0x14>
 80076d0:	f000 fafa 	bl	8007cc8 <__errno>
 80076d4:	2513      	movs	r5, #19
 80076d6:	4604      	mov	r4, r0
 80076d8:	2600      	movs	r6, #0
 80076da:	4628      	mov	r0, r5
 80076dc:	4631      	mov	r1, r6
 80076de:	beab      	bkpt	0x00ab
 80076e0:	4605      	mov	r5, r0
 80076e2:	6025      	str	r5, [r4, #0]
 80076e4:	e7eb      	b.n	80076be <_isatty+0x12>

080076e6 <atoi>:
 80076e6:	220a      	movs	r2, #10
 80076e8:	2100      	movs	r1, #0
 80076ea:	f000 b87b 	b.w	80077e4 <strtol>
	...

080076f0 <_strtol_l.constprop.0>:
 80076f0:	2b24      	cmp	r3, #36	@ 0x24
 80076f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f6:	4686      	mov	lr, r0
 80076f8:	4690      	mov	r8, r2
 80076fa:	d801      	bhi.n	8007700 <_strtol_l.constprop.0+0x10>
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d106      	bne.n	800770e <_strtol_l.constprop.0+0x1e>
 8007700:	f000 fae2 	bl	8007cc8 <__errno>
 8007704:	2316      	movs	r3, #22
 8007706:	6003      	str	r3, [r0, #0]
 8007708:	2000      	movs	r0, #0
 800770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770e:	460d      	mov	r5, r1
 8007710:	4833      	ldr	r0, [pc, #204]	@ (80077e0 <_strtol_l.constprop.0+0xf0>)
 8007712:	462a      	mov	r2, r5
 8007714:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007718:	5d06      	ldrb	r6, [r0, r4]
 800771a:	f016 0608 	ands.w	r6, r6, #8
 800771e:	d1f8      	bne.n	8007712 <_strtol_l.constprop.0+0x22>
 8007720:	2c2d      	cmp	r4, #45	@ 0x2d
 8007722:	d12d      	bne.n	8007780 <_strtol_l.constprop.0+0x90>
 8007724:	2601      	movs	r6, #1
 8007726:	782c      	ldrb	r4, [r5, #0]
 8007728:	1c95      	adds	r5, r2, #2
 800772a:	f033 0210 	bics.w	r2, r3, #16
 800772e:	d109      	bne.n	8007744 <_strtol_l.constprop.0+0x54>
 8007730:	2c30      	cmp	r4, #48	@ 0x30
 8007732:	d12a      	bne.n	800778a <_strtol_l.constprop.0+0x9a>
 8007734:	782a      	ldrb	r2, [r5, #0]
 8007736:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800773a:	2a58      	cmp	r2, #88	@ 0x58
 800773c:	d125      	bne.n	800778a <_strtol_l.constprop.0+0x9a>
 800773e:	2310      	movs	r3, #16
 8007740:	786c      	ldrb	r4, [r5, #1]
 8007742:	3502      	adds	r5, #2
 8007744:	2200      	movs	r2, #0
 8007746:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800774a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800774e:	fbbc f9f3 	udiv	r9, ip, r3
 8007752:	4610      	mov	r0, r2
 8007754:	fb03 ca19 	mls	sl, r3, r9, ip
 8007758:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800775c:	2f09      	cmp	r7, #9
 800775e:	d81b      	bhi.n	8007798 <_strtol_l.constprop.0+0xa8>
 8007760:	463c      	mov	r4, r7
 8007762:	42a3      	cmp	r3, r4
 8007764:	dd27      	ble.n	80077b6 <_strtol_l.constprop.0+0xc6>
 8007766:	1c57      	adds	r7, r2, #1
 8007768:	d007      	beq.n	800777a <_strtol_l.constprop.0+0x8a>
 800776a:	4581      	cmp	r9, r0
 800776c:	d320      	bcc.n	80077b0 <_strtol_l.constprop.0+0xc0>
 800776e:	d101      	bne.n	8007774 <_strtol_l.constprop.0+0x84>
 8007770:	45a2      	cmp	sl, r4
 8007772:	db1d      	blt.n	80077b0 <_strtol_l.constprop.0+0xc0>
 8007774:	2201      	movs	r2, #1
 8007776:	fb00 4003 	mla	r0, r0, r3, r4
 800777a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800777e:	e7eb      	b.n	8007758 <_strtol_l.constprop.0+0x68>
 8007780:	2c2b      	cmp	r4, #43	@ 0x2b
 8007782:	bf04      	itt	eq
 8007784:	782c      	ldrbeq	r4, [r5, #0]
 8007786:	1c95      	addeq	r5, r2, #2
 8007788:	e7cf      	b.n	800772a <_strtol_l.constprop.0+0x3a>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1da      	bne.n	8007744 <_strtol_l.constprop.0+0x54>
 800778e:	2c30      	cmp	r4, #48	@ 0x30
 8007790:	bf0c      	ite	eq
 8007792:	2308      	moveq	r3, #8
 8007794:	230a      	movne	r3, #10
 8007796:	e7d5      	b.n	8007744 <_strtol_l.constprop.0+0x54>
 8007798:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800779c:	2f19      	cmp	r7, #25
 800779e:	d801      	bhi.n	80077a4 <_strtol_l.constprop.0+0xb4>
 80077a0:	3c37      	subs	r4, #55	@ 0x37
 80077a2:	e7de      	b.n	8007762 <_strtol_l.constprop.0+0x72>
 80077a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80077a8:	2f19      	cmp	r7, #25
 80077aa:	d804      	bhi.n	80077b6 <_strtol_l.constprop.0+0xc6>
 80077ac:	3c57      	subs	r4, #87	@ 0x57
 80077ae:	e7d8      	b.n	8007762 <_strtol_l.constprop.0+0x72>
 80077b0:	f04f 32ff 	mov.w	r2, #4294967295
 80077b4:	e7e1      	b.n	800777a <_strtol_l.constprop.0+0x8a>
 80077b6:	1c53      	adds	r3, r2, #1
 80077b8:	d108      	bne.n	80077cc <_strtol_l.constprop.0+0xdc>
 80077ba:	2322      	movs	r3, #34	@ 0x22
 80077bc:	4660      	mov	r0, ip
 80077be:	f8ce 3000 	str.w	r3, [lr]
 80077c2:	f1b8 0f00 	cmp.w	r8, #0
 80077c6:	d0a0      	beq.n	800770a <_strtol_l.constprop.0+0x1a>
 80077c8:	1e69      	subs	r1, r5, #1
 80077ca:	e006      	b.n	80077da <_strtol_l.constprop.0+0xea>
 80077cc:	b106      	cbz	r6, 80077d0 <_strtol_l.constprop.0+0xe0>
 80077ce:	4240      	negs	r0, r0
 80077d0:	f1b8 0f00 	cmp.w	r8, #0
 80077d4:	d099      	beq.n	800770a <_strtol_l.constprop.0+0x1a>
 80077d6:	2a00      	cmp	r2, #0
 80077d8:	d1f6      	bne.n	80077c8 <_strtol_l.constprop.0+0xd8>
 80077da:	f8c8 1000 	str.w	r1, [r8]
 80077de:	e794      	b.n	800770a <_strtol_l.constprop.0+0x1a>
 80077e0:	0800926b 	.word	0x0800926b

080077e4 <strtol>:
 80077e4:	4613      	mov	r3, r2
 80077e6:	460a      	mov	r2, r1
 80077e8:	4601      	mov	r1, r0
 80077ea:	4802      	ldr	r0, [pc, #8]	@ (80077f4 <strtol+0x10>)
 80077ec:	6800      	ldr	r0, [r0, #0]
 80077ee:	f7ff bf7f 	b.w	80076f0 <_strtol_l.constprop.0>
 80077f2:	bf00      	nop
 80077f4:	20000070 	.word	0x20000070

080077f8 <__sflush_r>:
 80077f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	0716      	lsls	r6, r2, #28
 8007800:	4605      	mov	r5, r0
 8007802:	460c      	mov	r4, r1
 8007804:	d454      	bmi.n	80078b0 <__sflush_r+0xb8>
 8007806:	684b      	ldr	r3, [r1, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	dc02      	bgt.n	8007812 <__sflush_r+0x1a>
 800780c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	dd48      	ble.n	80078a4 <__sflush_r+0xac>
 8007812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007814:	2e00      	cmp	r6, #0
 8007816:	d045      	beq.n	80078a4 <__sflush_r+0xac>
 8007818:	2300      	movs	r3, #0
 800781a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800781e:	682f      	ldr	r7, [r5, #0]
 8007820:	6a21      	ldr	r1, [r4, #32]
 8007822:	602b      	str	r3, [r5, #0]
 8007824:	d030      	beq.n	8007888 <__sflush_r+0x90>
 8007826:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	0759      	lsls	r1, r3, #29
 800782c:	d505      	bpl.n	800783a <__sflush_r+0x42>
 800782e:	6863      	ldr	r3, [r4, #4]
 8007830:	1ad2      	subs	r2, r2, r3
 8007832:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007834:	b10b      	cbz	r3, 800783a <__sflush_r+0x42>
 8007836:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007838:	1ad2      	subs	r2, r2, r3
 800783a:	2300      	movs	r3, #0
 800783c:	4628      	mov	r0, r5
 800783e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007840:	6a21      	ldr	r1, [r4, #32]
 8007842:	47b0      	blx	r6
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	d106      	bne.n	8007858 <__sflush_r+0x60>
 800784a:	6829      	ldr	r1, [r5, #0]
 800784c:	291d      	cmp	r1, #29
 800784e:	d82b      	bhi.n	80078a8 <__sflush_r+0xb0>
 8007850:	4a28      	ldr	r2, [pc, #160]	@ (80078f4 <__sflush_r+0xfc>)
 8007852:	410a      	asrs	r2, r1
 8007854:	07d6      	lsls	r6, r2, #31
 8007856:	d427      	bmi.n	80078a8 <__sflush_r+0xb0>
 8007858:	2200      	movs	r2, #0
 800785a:	6062      	str	r2, [r4, #4]
 800785c:	6922      	ldr	r2, [r4, #16]
 800785e:	04d9      	lsls	r1, r3, #19
 8007860:	6022      	str	r2, [r4, #0]
 8007862:	d504      	bpl.n	800786e <__sflush_r+0x76>
 8007864:	1c42      	adds	r2, r0, #1
 8007866:	d101      	bne.n	800786c <__sflush_r+0x74>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b903      	cbnz	r3, 800786e <__sflush_r+0x76>
 800786c:	6560      	str	r0, [r4, #84]	@ 0x54
 800786e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007870:	602f      	str	r7, [r5, #0]
 8007872:	b1b9      	cbz	r1, 80078a4 <__sflush_r+0xac>
 8007874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007878:	4299      	cmp	r1, r3
 800787a:	d002      	beq.n	8007882 <__sflush_r+0x8a>
 800787c:	4628      	mov	r0, r5
 800787e:	f000 fa59 	bl	8007d34 <_free_r>
 8007882:	2300      	movs	r3, #0
 8007884:	6363      	str	r3, [r4, #52]	@ 0x34
 8007886:	e00d      	b.n	80078a4 <__sflush_r+0xac>
 8007888:	2301      	movs	r3, #1
 800788a:	4628      	mov	r0, r5
 800788c:	47b0      	blx	r6
 800788e:	4602      	mov	r2, r0
 8007890:	1c50      	adds	r0, r2, #1
 8007892:	d1c9      	bne.n	8007828 <__sflush_r+0x30>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0c6      	beq.n	8007828 <__sflush_r+0x30>
 800789a:	2b1d      	cmp	r3, #29
 800789c:	d001      	beq.n	80078a2 <__sflush_r+0xaa>
 800789e:	2b16      	cmp	r3, #22
 80078a0:	d11d      	bne.n	80078de <__sflush_r+0xe6>
 80078a2:	602f      	str	r7, [r5, #0]
 80078a4:	2000      	movs	r0, #0
 80078a6:	e021      	b.n	80078ec <__sflush_r+0xf4>
 80078a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ac:	b21b      	sxth	r3, r3
 80078ae:	e01a      	b.n	80078e6 <__sflush_r+0xee>
 80078b0:	690f      	ldr	r7, [r1, #16]
 80078b2:	2f00      	cmp	r7, #0
 80078b4:	d0f6      	beq.n	80078a4 <__sflush_r+0xac>
 80078b6:	0793      	lsls	r3, r2, #30
 80078b8:	bf18      	it	ne
 80078ba:	2300      	movne	r3, #0
 80078bc:	680e      	ldr	r6, [r1, #0]
 80078be:	bf08      	it	eq
 80078c0:	694b      	ldreq	r3, [r1, #20]
 80078c2:	1bf6      	subs	r6, r6, r7
 80078c4:	600f      	str	r7, [r1, #0]
 80078c6:	608b      	str	r3, [r1, #8]
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	ddeb      	ble.n	80078a4 <__sflush_r+0xac>
 80078cc:	4633      	mov	r3, r6
 80078ce:	463a      	mov	r2, r7
 80078d0:	4628      	mov	r0, r5
 80078d2:	6a21      	ldr	r1, [r4, #32]
 80078d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80078d8:	47e0      	blx	ip
 80078da:	2800      	cmp	r0, #0
 80078dc:	dc07      	bgt.n	80078ee <__sflush_r+0xf6>
 80078de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078e6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ea:	81a3      	strh	r3, [r4, #12]
 80078ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ee:	4407      	add	r7, r0
 80078f0:	1a36      	subs	r6, r6, r0
 80078f2:	e7e9      	b.n	80078c8 <__sflush_r+0xd0>
 80078f4:	dfbffffe 	.word	0xdfbffffe

080078f8 <_fflush_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	690b      	ldr	r3, [r1, #16]
 80078fc:	4605      	mov	r5, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	b913      	cbnz	r3, 8007908 <_fflush_r+0x10>
 8007902:	2500      	movs	r5, #0
 8007904:	4628      	mov	r0, r5
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	b118      	cbz	r0, 8007912 <_fflush_r+0x1a>
 800790a:	6a03      	ldr	r3, [r0, #32]
 800790c:	b90b      	cbnz	r3, 8007912 <_fflush_r+0x1a>
 800790e:	f000 f8bb 	bl	8007a88 <__sinit>
 8007912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0f3      	beq.n	8007902 <_fflush_r+0xa>
 800791a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800791c:	07d0      	lsls	r0, r2, #31
 800791e:	d404      	bmi.n	800792a <_fflush_r+0x32>
 8007920:	0599      	lsls	r1, r3, #22
 8007922:	d402      	bmi.n	800792a <_fflush_r+0x32>
 8007924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007926:	f000 f9fa 	bl	8007d1e <__retarget_lock_acquire_recursive>
 800792a:	4628      	mov	r0, r5
 800792c:	4621      	mov	r1, r4
 800792e:	f7ff ff63 	bl	80077f8 <__sflush_r>
 8007932:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007934:	4605      	mov	r5, r0
 8007936:	07da      	lsls	r2, r3, #31
 8007938:	d4e4      	bmi.n	8007904 <_fflush_r+0xc>
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	059b      	lsls	r3, r3, #22
 800793e:	d4e1      	bmi.n	8007904 <_fflush_r+0xc>
 8007940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007942:	f000 f9ed 	bl	8007d20 <__retarget_lock_release_recursive>
 8007946:	e7dd      	b.n	8007904 <_fflush_r+0xc>

08007948 <fflush>:
 8007948:	4601      	mov	r1, r0
 800794a:	b920      	cbnz	r0, 8007956 <fflush+0xe>
 800794c:	4a04      	ldr	r2, [pc, #16]	@ (8007960 <fflush+0x18>)
 800794e:	4905      	ldr	r1, [pc, #20]	@ (8007964 <fflush+0x1c>)
 8007950:	4805      	ldr	r0, [pc, #20]	@ (8007968 <fflush+0x20>)
 8007952:	f000 b8b1 	b.w	8007ab8 <_fwalk_sglue>
 8007956:	4b05      	ldr	r3, [pc, #20]	@ (800796c <fflush+0x24>)
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	f7ff bfcd 	b.w	80078f8 <_fflush_r>
 800795e:	bf00      	nop
 8007960:	20000064 	.word	0x20000064
 8007964:	080078f9 	.word	0x080078f9
 8007968:	20000074 	.word	0x20000074
 800796c:	20000070 	.word	0x20000070

08007970 <std>:
 8007970:	2300      	movs	r3, #0
 8007972:	b510      	push	{r4, lr}
 8007974:	4604      	mov	r4, r0
 8007976:	e9c0 3300 	strd	r3, r3, [r0]
 800797a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800797e:	6083      	str	r3, [r0, #8]
 8007980:	8181      	strh	r1, [r0, #12]
 8007982:	6643      	str	r3, [r0, #100]	@ 0x64
 8007984:	81c2      	strh	r2, [r0, #14]
 8007986:	6183      	str	r3, [r0, #24]
 8007988:	4619      	mov	r1, r3
 800798a:	2208      	movs	r2, #8
 800798c:	305c      	adds	r0, #92	@ 0x5c
 800798e:	f000 f93a 	bl	8007c06 <memset>
 8007992:	4b0d      	ldr	r3, [pc, #52]	@ (80079c8 <std+0x58>)
 8007994:	6224      	str	r4, [r4, #32]
 8007996:	6263      	str	r3, [r4, #36]	@ 0x24
 8007998:	4b0c      	ldr	r3, [pc, #48]	@ (80079cc <std+0x5c>)
 800799a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800799c:	4b0c      	ldr	r3, [pc, #48]	@ (80079d0 <std+0x60>)
 800799e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079a0:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <std+0x64>)
 80079a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80079a4:	4b0c      	ldr	r3, [pc, #48]	@ (80079d8 <std+0x68>)
 80079a6:	429c      	cmp	r4, r3
 80079a8:	d006      	beq.n	80079b8 <std+0x48>
 80079aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079ae:	4294      	cmp	r4, r2
 80079b0:	d002      	beq.n	80079b8 <std+0x48>
 80079b2:	33d0      	adds	r3, #208	@ 0xd0
 80079b4:	429c      	cmp	r4, r3
 80079b6:	d105      	bne.n	80079c4 <std+0x54>
 80079b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c0:	f000 b9ac 	b.w	8007d1c <__retarget_lock_init_recursive>
 80079c4:	bd10      	pop	{r4, pc}
 80079c6:	bf00      	nop
 80079c8:	08007b81 	.word	0x08007b81
 80079cc:	08007ba3 	.word	0x08007ba3
 80079d0:	08007bdb 	.word	0x08007bdb
 80079d4:	08007bff 	.word	0x08007bff
 80079d8:	200005ac 	.word	0x200005ac

080079dc <stdio_exit_handler>:
 80079dc:	4a02      	ldr	r2, [pc, #8]	@ (80079e8 <stdio_exit_handler+0xc>)
 80079de:	4903      	ldr	r1, [pc, #12]	@ (80079ec <stdio_exit_handler+0x10>)
 80079e0:	4803      	ldr	r0, [pc, #12]	@ (80079f0 <stdio_exit_handler+0x14>)
 80079e2:	f000 b869 	b.w	8007ab8 <_fwalk_sglue>
 80079e6:	bf00      	nop
 80079e8:	20000064 	.word	0x20000064
 80079ec:	080078f9 	.word	0x080078f9
 80079f0:	20000074 	.word	0x20000074

080079f4 <cleanup_stdio>:
 80079f4:	6841      	ldr	r1, [r0, #4]
 80079f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a28 <cleanup_stdio+0x34>)
 80079f8:	b510      	push	{r4, lr}
 80079fa:	4299      	cmp	r1, r3
 80079fc:	4604      	mov	r4, r0
 80079fe:	d001      	beq.n	8007a04 <cleanup_stdio+0x10>
 8007a00:	f7ff ff7a 	bl	80078f8 <_fflush_r>
 8007a04:	68a1      	ldr	r1, [r4, #8]
 8007a06:	4b09      	ldr	r3, [pc, #36]	@ (8007a2c <cleanup_stdio+0x38>)
 8007a08:	4299      	cmp	r1, r3
 8007a0a:	d002      	beq.n	8007a12 <cleanup_stdio+0x1e>
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f7ff ff73 	bl	80078f8 <_fflush_r>
 8007a12:	68e1      	ldr	r1, [r4, #12]
 8007a14:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <cleanup_stdio+0x3c>)
 8007a16:	4299      	cmp	r1, r3
 8007a18:	d004      	beq.n	8007a24 <cleanup_stdio+0x30>
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a20:	f7ff bf6a 	b.w	80078f8 <_fflush_r>
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	bf00      	nop
 8007a28:	200005ac 	.word	0x200005ac
 8007a2c:	20000614 	.word	0x20000614
 8007a30:	2000067c 	.word	0x2000067c

08007a34 <global_stdio_init.part.0>:
 8007a34:	b510      	push	{r4, lr}
 8007a36:	4b0b      	ldr	r3, [pc, #44]	@ (8007a64 <global_stdio_init.part.0+0x30>)
 8007a38:	4c0b      	ldr	r4, [pc, #44]	@ (8007a68 <global_stdio_init.part.0+0x34>)
 8007a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a6c <global_stdio_init.part.0+0x38>)
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	2104      	movs	r1, #4
 8007a42:	2200      	movs	r2, #0
 8007a44:	f7ff ff94 	bl	8007970 <std>
 8007a48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	2109      	movs	r1, #9
 8007a50:	f7ff ff8e 	bl	8007970 <std>
 8007a54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a58:	2202      	movs	r2, #2
 8007a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a5e:	2112      	movs	r1, #18
 8007a60:	f7ff bf86 	b.w	8007970 <std>
 8007a64:	200006e4 	.word	0x200006e4
 8007a68:	200005ac 	.word	0x200005ac
 8007a6c:	080079dd 	.word	0x080079dd

08007a70 <__sfp_lock_acquire>:
 8007a70:	4801      	ldr	r0, [pc, #4]	@ (8007a78 <__sfp_lock_acquire+0x8>)
 8007a72:	f000 b954 	b.w	8007d1e <__retarget_lock_acquire_recursive>
 8007a76:	bf00      	nop
 8007a78:	200006ed 	.word	0x200006ed

08007a7c <__sfp_lock_release>:
 8007a7c:	4801      	ldr	r0, [pc, #4]	@ (8007a84 <__sfp_lock_release+0x8>)
 8007a7e:	f000 b94f 	b.w	8007d20 <__retarget_lock_release_recursive>
 8007a82:	bf00      	nop
 8007a84:	200006ed 	.word	0x200006ed

08007a88 <__sinit>:
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	f7ff fff0 	bl	8007a70 <__sfp_lock_acquire>
 8007a90:	6a23      	ldr	r3, [r4, #32]
 8007a92:	b11b      	cbz	r3, 8007a9c <__sinit+0x14>
 8007a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a98:	f7ff bff0 	b.w	8007a7c <__sfp_lock_release>
 8007a9c:	4b04      	ldr	r3, [pc, #16]	@ (8007ab0 <__sinit+0x28>)
 8007a9e:	6223      	str	r3, [r4, #32]
 8007aa0:	4b04      	ldr	r3, [pc, #16]	@ (8007ab4 <__sinit+0x2c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1f5      	bne.n	8007a94 <__sinit+0xc>
 8007aa8:	f7ff ffc4 	bl	8007a34 <global_stdio_init.part.0>
 8007aac:	e7f2      	b.n	8007a94 <__sinit+0xc>
 8007aae:	bf00      	nop
 8007ab0:	080079f5 	.word	0x080079f5
 8007ab4:	200006e4 	.word	0x200006e4

08007ab8 <_fwalk_sglue>:
 8007ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007abc:	4607      	mov	r7, r0
 8007abe:	4688      	mov	r8, r1
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	2600      	movs	r6, #0
 8007ac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ac8:	f1b9 0901 	subs.w	r9, r9, #1
 8007acc:	d505      	bpl.n	8007ada <_fwalk_sglue+0x22>
 8007ace:	6824      	ldr	r4, [r4, #0]
 8007ad0:	2c00      	cmp	r4, #0
 8007ad2:	d1f7      	bne.n	8007ac4 <_fwalk_sglue+0xc>
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ada:	89ab      	ldrh	r3, [r5, #12]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d907      	bls.n	8007af0 <_fwalk_sglue+0x38>
 8007ae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	d003      	beq.n	8007af0 <_fwalk_sglue+0x38>
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4638      	mov	r0, r7
 8007aec:	47c0      	blx	r8
 8007aee:	4306      	orrs	r6, r0
 8007af0:	3568      	adds	r5, #104	@ 0x68
 8007af2:	e7e9      	b.n	8007ac8 <_fwalk_sglue+0x10>

08007af4 <iprintf>:
 8007af4:	b40f      	push	{r0, r1, r2, r3}
 8007af6:	b507      	push	{r0, r1, r2, lr}
 8007af8:	4906      	ldr	r1, [pc, #24]	@ (8007b14 <iprintf+0x20>)
 8007afa:	ab04      	add	r3, sp, #16
 8007afc:	6808      	ldr	r0, [r1, #0]
 8007afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b02:	6881      	ldr	r1, [r0, #8]
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	f000 fb8b 	bl	8008220 <_vfiprintf_r>
 8007b0a:	b003      	add	sp, #12
 8007b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b10:	b004      	add	sp, #16
 8007b12:	4770      	bx	lr
 8007b14:	20000070 	.word	0x20000070

08007b18 <sniprintf>:
 8007b18:	b40c      	push	{r2, r3}
 8007b1a:	b530      	push	{r4, r5, lr}
 8007b1c:	4b17      	ldr	r3, [pc, #92]	@ (8007b7c <sniprintf+0x64>)
 8007b1e:	1e0c      	subs	r4, r1, #0
 8007b20:	681d      	ldr	r5, [r3, #0]
 8007b22:	b09d      	sub	sp, #116	@ 0x74
 8007b24:	da08      	bge.n	8007b38 <sniprintf+0x20>
 8007b26:	238b      	movs	r3, #139	@ 0x8b
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	602b      	str	r3, [r5, #0]
 8007b2e:	b01d      	add	sp, #116	@ 0x74
 8007b30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b34:	b002      	add	sp, #8
 8007b36:	4770      	bx	lr
 8007b38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007b3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b40:	bf0c      	ite	eq
 8007b42:	4623      	moveq	r3, r4
 8007b44:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	9307      	str	r3, [sp, #28]
 8007b4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b50:	9002      	str	r0, [sp, #8]
 8007b52:	9006      	str	r0, [sp, #24]
 8007b54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b58:	4628      	mov	r0, r5
 8007b5a:	ab21      	add	r3, sp, #132	@ 0x84
 8007b5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b5e:	a902      	add	r1, sp, #8
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	f000 fa39 	bl	8007fd8 <_svfiprintf_r>
 8007b66:	1c43      	adds	r3, r0, #1
 8007b68:	bfbc      	itt	lt
 8007b6a:	238b      	movlt	r3, #139	@ 0x8b
 8007b6c:	602b      	strlt	r3, [r5, #0]
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	d0dd      	beq.n	8007b2e <sniprintf+0x16>
 8007b72:	2200      	movs	r2, #0
 8007b74:	9b02      	ldr	r3, [sp, #8]
 8007b76:	701a      	strb	r2, [r3, #0]
 8007b78:	e7d9      	b.n	8007b2e <sniprintf+0x16>
 8007b7a:	bf00      	nop
 8007b7c:	20000070 	.word	0x20000070

08007b80 <__sread>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	460c      	mov	r4, r1
 8007b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b88:	f000 f87a 	bl	8007c80 <_read_r>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	bfab      	itete	ge
 8007b90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b92:	89a3      	ldrhlt	r3, [r4, #12]
 8007b94:	181b      	addge	r3, r3, r0
 8007b96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b9a:	bfac      	ite	ge
 8007b9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b9e:	81a3      	strhlt	r3, [r4, #12]
 8007ba0:	bd10      	pop	{r4, pc}

08007ba2 <__swrite>:
 8007ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba6:	461f      	mov	r7, r3
 8007ba8:	898b      	ldrh	r3, [r1, #12]
 8007baa:	4605      	mov	r5, r0
 8007bac:	05db      	lsls	r3, r3, #23
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	d505      	bpl.n	8007bc0 <__swrite+0x1e>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bbc:	f000 f84e 	bl	8007c5c <_lseek_r>
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	4632      	mov	r2, r6
 8007bc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	4628      	mov	r0, r5
 8007bcc:	463b      	mov	r3, r7
 8007bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	f000 b865 	b.w	8007ca4 <_write_r>

08007bda <__sseek>:
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	460c      	mov	r4, r1
 8007bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be2:	f000 f83b 	bl	8007c5c <_lseek_r>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	bf15      	itete	ne
 8007bec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bf6:	81a3      	strheq	r3, [r4, #12]
 8007bf8:	bf18      	it	ne
 8007bfa:	81a3      	strhne	r3, [r4, #12]
 8007bfc:	bd10      	pop	{r4, pc}

08007bfe <__sclose>:
 8007bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c02:	f000 b81b 	b.w	8007c3c <_close_r>

08007c06 <memset>:
 8007c06:	4603      	mov	r3, r0
 8007c08:	4402      	add	r2, r0
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d100      	bne.n	8007c10 <memset+0xa>
 8007c0e:	4770      	bx	lr
 8007c10:	f803 1b01 	strb.w	r1, [r3], #1
 8007c14:	e7f9      	b.n	8007c0a <memset+0x4>

08007c16 <strncpy>:
 8007c16:	4603      	mov	r3, r0
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	3901      	subs	r1, #1
 8007c1c:	b132      	cbz	r2, 8007c2c <strncpy+0x16>
 8007c1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c22:	3a01      	subs	r2, #1
 8007c24:	f803 4b01 	strb.w	r4, [r3], #1
 8007c28:	2c00      	cmp	r4, #0
 8007c2a:	d1f7      	bne.n	8007c1c <strncpy+0x6>
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	441a      	add	r2, r3
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d100      	bne.n	8007c36 <strncpy+0x20>
 8007c34:	bd10      	pop	{r4, pc}
 8007c36:	f803 1b01 	strb.w	r1, [r3], #1
 8007c3a:	e7f9      	b.n	8007c30 <strncpy+0x1a>

08007c3c <_close_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	2300      	movs	r3, #0
 8007c40:	4d05      	ldr	r5, [pc, #20]	@ (8007c58 <_close_r+0x1c>)
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7ff fb8a 	bl	8007360 <_close>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_close_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_close_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200006e8 	.word	0x200006e8

08007c5c <_lseek_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	2200      	movs	r2, #0
 8007c66:	4d05      	ldr	r5, [pc, #20]	@ (8007c7c <_lseek_r+0x20>)
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7ff fb39 	bl	80072e2 <_lseek>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_lseek_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_lseek_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	200006e8 	.word	0x200006e8

08007c80 <_read_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	4611      	mov	r1, r2
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4d05      	ldr	r5, [pc, #20]	@ (8007ca0 <_read_r+0x20>)
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7ff fad1 	bl	8007236 <_read>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_read_r+0x1e>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_read_r+0x1e>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	200006e8 	.word	0x200006e8

08007ca4 <_write_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	2200      	movs	r2, #0
 8007cae:	4d05      	ldr	r5, [pc, #20]	@ (8007cc4 <_write_r+0x20>)
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f7ff fb27 	bl	8007306 <_write>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_write_r+0x1e>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_write_r+0x1e>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	200006e8 	.word	0x200006e8

08007cc8 <__errno>:
 8007cc8:	4b01      	ldr	r3, [pc, #4]	@ (8007cd0 <__errno+0x8>)
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	20000070 	.word	0x20000070

08007cd4 <__libc_init_array>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	2600      	movs	r6, #0
 8007cd8:	4d0c      	ldr	r5, [pc, #48]	@ (8007d0c <__libc_init_array+0x38>)
 8007cda:	4c0d      	ldr	r4, [pc, #52]	@ (8007d10 <__libc_init_array+0x3c>)
 8007cdc:	1b64      	subs	r4, r4, r5
 8007cde:	10a4      	asrs	r4, r4, #2
 8007ce0:	42a6      	cmp	r6, r4
 8007ce2:	d109      	bne.n	8007cf8 <__libc_init_array+0x24>
 8007ce4:	f000 feda 	bl	8008a9c <_init>
 8007ce8:	2600      	movs	r6, #0
 8007cea:	4d0a      	ldr	r5, [pc, #40]	@ (8007d14 <__libc_init_array+0x40>)
 8007cec:	4c0a      	ldr	r4, [pc, #40]	@ (8007d18 <__libc_init_array+0x44>)
 8007cee:	1b64      	subs	r4, r4, r5
 8007cf0:	10a4      	asrs	r4, r4, #2
 8007cf2:	42a6      	cmp	r6, r4
 8007cf4:	d105      	bne.n	8007d02 <__libc_init_array+0x2e>
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfc:	4798      	blx	r3
 8007cfe:	3601      	adds	r6, #1
 8007d00:	e7ee      	b.n	8007ce0 <__libc_init_array+0xc>
 8007d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d06:	4798      	blx	r3
 8007d08:	3601      	adds	r6, #1
 8007d0a:	e7f2      	b.n	8007cf2 <__libc_init_array+0x1e>
 8007d0c:	080093a8 	.word	0x080093a8
 8007d10:	080093a8 	.word	0x080093a8
 8007d14:	080093a8 	.word	0x080093a8
 8007d18:	080093ac 	.word	0x080093ac

08007d1c <__retarget_lock_init_recursive>:
 8007d1c:	4770      	bx	lr

08007d1e <__retarget_lock_acquire_recursive>:
 8007d1e:	4770      	bx	lr

08007d20 <__retarget_lock_release_recursive>:
 8007d20:	4770      	bx	lr

08007d22 <strcpy>:
 8007d22:	4603      	mov	r3, r0
 8007d24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d28:	f803 2b01 	strb.w	r2, [r3], #1
 8007d2c:	2a00      	cmp	r2, #0
 8007d2e:	d1f9      	bne.n	8007d24 <strcpy+0x2>
 8007d30:	4770      	bx	lr
	...

08007d34 <_free_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4605      	mov	r5, r0
 8007d38:	2900      	cmp	r1, #0
 8007d3a:	d040      	beq.n	8007dbe <_free_r+0x8a>
 8007d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d40:	1f0c      	subs	r4, r1, #4
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	bfb8      	it	lt
 8007d46:	18e4      	addlt	r4, r4, r3
 8007d48:	f000 f8de 	bl	8007f08 <__malloc_lock>
 8007d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc0 <_free_r+0x8c>)
 8007d4e:	6813      	ldr	r3, [r2, #0]
 8007d50:	b933      	cbnz	r3, 8007d60 <_free_r+0x2c>
 8007d52:	6063      	str	r3, [r4, #4]
 8007d54:	6014      	str	r4, [r2, #0]
 8007d56:	4628      	mov	r0, r5
 8007d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d5c:	f000 b8da 	b.w	8007f14 <__malloc_unlock>
 8007d60:	42a3      	cmp	r3, r4
 8007d62:	d908      	bls.n	8007d76 <_free_r+0x42>
 8007d64:	6820      	ldr	r0, [r4, #0]
 8007d66:	1821      	adds	r1, r4, r0
 8007d68:	428b      	cmp	r3, r1
 8007d6a:	bf01      	itttt	eq
 8007d6c:	6819      	ldreq	r1, [r3, #0]
 8007d6e:	685b      	ldreq	r3, [r3, #4]
 8007d70:	1809      	addeq	r1, r1, r0
 8007d72:	6021      	streq	r1, [r4, #0]
 8007d74:	e7ed      	b.n	8007d52 <_free_r+0x1e>
 8007d76:	461a      	mov	r2, r3
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	b10b      	cbz	r3, 8007d80 <_free_r+0x4c>
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	d9fa      	bls.n	8007d76 <_free_r+0x42>
 8007d80:	6811      	ldr	r1, [r2, #0]
 8007d82:	1850      	adds	r0, r2, r1
 8007d84:	42a0      	cmp	r0, r4
 8007d86:	d10b      	bne.n	8007da0 <_free_r+0x6c>
 8007d88:	6820      	ldr	r0, [r4, #0]
 8007d8a:	4401      	add	r1, r0
 8007d8c:	1850      	adds	r0, r2, r1
 8007d8e:	4283      	cmp	r3, r0
 8007d90:	6011      	str	r1, [r2, #0]
 8007d92:	d1e0      	bne.n	8007d56 <_free_r+0x22>
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	4408      	add	r0, r1
 8007d9a:	6010      	str	r0, [r2, #0]
 8007d9c:	6053      	str	r3, [r2, #4]
 8007d9e:	e7da      	b.n	8007d56 <_free_r+0x22>
 8007da0:	d902      	bls.n	8007da8 <_free_r+0x74>
 8007da2:	230c      	movs	r3, #12
 8007da4:	602b      	str	r3, [r5, #0]
 8007da6:	e7d6      	b.n	8007d56 <_free_r+0x22>
 8007da8:	6820      	ldr	r0, [r4, #0]
 8007daa:	1821      	adds	r1, r4, r0
 8007dac:	428b      	cmp	r3, r1
 8007dae:	bf01      	itttt	eq
 8007db0:	6819      	ldreq	r1, [r3, #0]
 8007db2:	685b      	ldreq	r3, [r3, #4]
 8007db4:	1809      	addeq	r1, r1, r0
 8007db6:	6021      	streq	r1, [r4, #0]
 8007db8:	6063      	str	r3, [r4, #4]
 8007dba:	6054      	str	r4, [r2, #4]
 8007dbc:	e7cb      	b.n	8007d56 <_free_r+0x22>
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	200006f4 	.word	0x200006f4

08007dc4 <sbrk_aligned>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e04 <sbrk_aligned+0x40>)
 8007dc8:	460c      	mov	r4, r1
 8007dca:	6831      	ldr	r1, [r6, #0]
 8007dcc:	4605      	mov	r5, r0
 8007dce:	b911      	cbnz	r1, 8007dd6 <sbrk_aligned+0x12>
 8007dd0:	f000 fd7e 	bl	80088d0 <_sbrk_r>
 8007dd4:	6030      	str	r0, [r6, #0]
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 fd79 	bl	80088d0 <_sbrk_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d103      	bne.n	8007dea <sbrk_aligned+0x26>
 8007de2:	f04f 34ff 	mov.w	r4, #4294967295
 8007de6:	4620      	mov	r0, r4
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	1cc4      	adds	r4, r0, #3
 8007dec:	f024 0403 	bic.w	r4, r4, #3
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d0f8      	beq.n	8007de6 <sbrk_aligned+0x22>
 8007df4:	1a21      	subs	r1, r4, r0
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 fd6a 	bl	80088d0 <_sbrk_r>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d1f2      	bne.n	8007de6 <sbrk_aligned+0x22>
 8007e00:	e7ef      	b.n	8007de2 <sbrk_aligned+0x1e>
 8007e02:	bf00      	nop
 8007e04:	200006f0 	.word	0x200006f0

08007e08 <_malloc_r>:
 8007e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e0c:	1ccd      	adds	r5, r1, #3
 8007e0e:	f025 0503 	bic.w	r5, r5, #3
 8007e12:	3508      	adds	r5, #8
 8007e14:	2d0c      	cmp	r5, #12
 8007e16:	bf38      	it	cc
 8007e18:	250c      	movcc	r5, #12
 8007e1a:	2d00      	cmp	r5, #0
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	db01      	blt.n	8007e24 <_malloc_r+0x1c>
 8007e20:	42a9      	cmp	r1, r5
 8007e22:	d904      	bls.n	8007e2e <_malloc_r+0x26>
 8007e24:	230c      	movs	r3, #12
 8007e26:	6033      	str	r3, [r6, #0]
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f04 <_malloc_r+0xfc>
 8007e32:	f000 f869 	bl	8007f08 <__malloc_lock>
 8007e36:	f8d8 3000 	ldr.w	r3, [r8]
 8007e3a:	461c      	mov	r4, r3
 8007e3c:	bb44      	cbnz	r4, 8007e90 <_malloc_r+0x88>
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4630      	mov	r0, r6
 8007e42:	f7ff ffbf 	bl	8007dc4 <sbrk_aligned>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	4604      	mov	r4, r0
 8007e4a:	d158      	bne.n	8007efe <_malloc_r+0xf6>
 8007e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e50:	4627      	mov	r7, r4
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	d143      	bne.n	8007ede <_malloc_r+0xd6>
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	d04b      	beq.n	8007ef2 <_malloc_r+0xea>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4630      	mov	r0, r6
 8007e60:	eb04 0903 	add.w	r9, r4, r3
 8007e64:	f000 fd34 	bl	80088d0 <_sbrk_r>
 8007e68:	4581      	cmp	r9, r0
 8007e6a:	d142      	bne.n	8007ef2 <_malloc_r+0xea>
 8007e6c:	6821      	ldr	r1, [r4, #0]
 8007e6e:	4630      	mov	r0, r6
 8007e70:	1a6d      	subs	r5, r5, r1
 8007e72:	4629      	mov	r1, r5
 8007e74:	f7ff ffa6 	bl	8007dc4 <sbrk_aligned>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d03a      	beq.n	8007ef2 <_malloc_r+0xea>
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	442b      	add	r3, r5
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	f8d8 3000 	ldr.w	r3, [r8]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	bb62      	cbnz	r2, 8007ee4 <_malloc_r+0xdc>
 8007e8a:	f8c8 7000 	str.w	r7, [r8]
 8007e8e:	e00f      	b.n	8007eb0 <_malloc_r+0xa8>
 8007e90:	6822      	ldr	r2, [r4, #0]
 8007e92:	1b52      	subs	r2, r2, r5
 8007e94:	d420      	bmi.n	8007ed8 <_malloc_r+0xd0>
 8007e96:	2a0b      	cmp	r2, #11
 8007e98:	d917      	bls.n	8007eca <_malloc_r+0xc2>
 8007e9a:	1961      	adds	r1, r4, r5
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	6025      	str	r5, [r4, #0]
 8007ea0:	bf18      	it	ne
 8007ea2:	6059      	strne	r1, [r3, #4]
 8007ea4:	6863      	ldr	r3, [r4, #4]
 8007ea6:	bf08      	it	eq
 8007ea8:	f8c8 1000 	streq.w	r1, [r8]
 8007eac:	5162      	str	r2, [r4, r5]
 8007eae:	604b      	str	r3, [r1, #4]
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f000 f82f 	bl	8007f14 <__malloc_unlock>
 8007eb6:	f104 000b 	add.w	r0, r4, #11
 8007eba:	1d23      	adds	r3, r4, #4
 8007ebc:	f020 0007 	bic.w	r0, r0, #7
 8007ec0:	1ac2      	subs	r2, r0, r3
 8007ec2:	bf1c      	itt	ne
 8007ec4:	1a1b      	subne	r3, r3, r0
 8007ec6:	50a3      	strne	r3, [r4, r2]
 8007ec8:	e7af      	b.n	8007e2a <_malloc_r+0x22>
 8007eca:	6862      	ldr	r2, [r4, #4]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	bf0c      	ite	eq
 8007ed0:	f8c8 2000 	streq.w	r2, [r8]
 8007ed4:	605a      	strne	r2, [r3, #4]
 8007ed6:	e7eb      	b.n	8007eb0 <_malloc_r+0xa8>
 8007ed8:	4623      	mov	r3, r4
 8007eda:	6864      	ldr	r4, [r4, #4]
 8007edc:	e7ae      	b.n	8007e3c <_malloc_r+0x34>
 8007ede:	463c      	mov	r4, r7
 8007ee0:	687f      	ldr	r7, [r7, #4]
 8007ee2:	e7b6      	b.n	8007e52 <_malloc_r+0x4a>
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d1fb      	bne.n	8007ee4 <_malloc_r+0xdc>
 8007eec:	2300      	movs	r3, #0
 8007eee:	6053      	str	r3, [r2, #4]
 8007ef0:	e7de      	b.n	8007eb0 <_malloc_r+0xa8>
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	6033      	str	r3, [r6, #0]
 8007ef8:	f000 f80c 	bl	8007f14 <__malloc_unlock>
 8007efc:	e794      	b.n	8007e28 <_malloc_r+0x20>
 8007efe:	6005      	str	r5, [r0, #0]
 8007f00:	e7d6      	b.n	8007eb0 <_malloc_r+0xa8>
 8007f02:	bf00      	nop
 8007f04:	200006f4 	.word	0x200006f4

08007f08 <__malloc_lock>:
 8007f08:	4801      	ldr	r0, [pc, #4]	@ (8007f10 <__malloc_lock+0x8>)
 8007f0a:	f7ff bf08 	b.w	8007d1e <__retarget_lock_acquire_recursive>
 8007f0e:	bf00      	nop
 8007f10:	200006ec 	.word	0x200006ec

08007f14 <__malloc_unlock>:
 8007f14:	4801      	ldr	r0, [pc, #4]	@ (8007f1c <__malloc_unlock+0x8>)
 8007f16:	f7ff bf03 	b.w	8007d20 <__retarget_lock_release_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	200006ec 	.word	0x200006ec

08007f20 <__ssputs_r>:
 8007f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f24:	461f      	mov	r7, r3
 8007f26:	688e      	ldr	r6, [r1, #8]
 8007f28:	4682      	mov	sl, r0
 8007f2a:	42be      	cmp	r6, r7
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	4690      	mov	r8, r2
 8007f30:	680b      	ldr	r3, [r1, #0]
 8007f32:	d82d      	bhi.n	8007f90 <__ssputs_r+0x70>
 8007f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f3c:	d026      	beq.n	8007f8c <__ssputs_r+0x6c>
 8007f3e:	6965      	ldr	r5, [r4, #20]
 8007f40:	6909      	ldr	r1, [r1, #16]
 8007f42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f46:	eba3 0901 	sub.w	r9, r3, r1
 8007f4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f4e:	1c7b      	adds	r3, r7, #1
 8007f50:	444b      	add	r3, r9
 8007f52:	106d      	asrs	r5, r5, #1
 8007f54:	429d      	cmp	r5, r3
 8007f56:	bf38      	it	cc
 8007f58:	461d      	movcc	r5, r3
 8007f5a:	0553      	lsls	r3, r2, #21
 8007f5c:	d527      	bpl.n	8007fae <__ssputs_r+0x8e>
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f7ff ff52 	bl	8007e08 <_malloc_r>
 8007f64:	4606      	mov	r6, r0
 8007f66:	b360      	cbz	r0, 8007fc2 <__ssputs_r+0xa2>
 8007f68:	464a      	mov	r2, r9
 8007f6a:	6921      	ldr	r1, [r4, #16]
 8007f6c:	f000 fcce 	bl	800890c <memcpy>
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	6126      	str	r6, [r4, #16]
 8007f7e:	444e      	add	r6, r9
 8007f80:	6026      	str	r6, [r4, #0]
 8007f82:	463e      	mov	r6, r7
 8007f84:	6165      	str	r5, [r4, #20]
 8007f86:	eba5 0509 	sub.w	r5, r5, r9
 8007f8a:	60a5      	str	r5, [r4, #8]
 8007f8c:	42be      	cmp	r6, r7
 8007f8e:	d900      	bls.n	8007f92 <__ssputs_r+0x72>
 8007f90:	463e      	mov	r6, r7
 8007f92:	4632      	mov	r2, r6
 8007f94:	4641      	mov	r1, r8
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	f000 fc80 	bl	800889c <memmove>
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	68a3      	ldr	r3, [r4, #8]
 8007fa0:	1b9b      	subs	r3, r3, r6
 8007fa2:	60a3      	str	r3, [r4, #8]
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	4433      	add	r3, r6
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fae:	462a      	mov	r2, r5
 8007fb0:	f000 fcba 	bl	8008928 <_realloc_r>
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d1e0      	bne.n	8007f7c <__ssputs_r+0x5c>
 8007fba:	4650      	mov	r0, sl
 8007fbc:	6921      	ldr	r1, [r4, #16]
 8007fbe:	f7ff feb9 	bl	8007d34 <_free_r>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	f8ca 3000 	str.w	r3, [sl]
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295
 8007fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	e7e9      	b.n	8007faa <__ssputs_r+0x8a>
	...

08007fd8 <_svfiprintf_r>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	4698      	mov	r8, r3
 8007fde:	898b      	ldrh	r3, [r1, #12]
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	061b      	lsls	r3, r3, #24
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	4614      	mov	r4, r2
 8007fe8:	b09d      	sub	sp, #116	@ 0x74
 8007fea:	d510      	bpl.n	800800e <_svfiprintf_r+0x36>
 8007fec:	690b      	ldr	r3, [r1, #16]
 8007fee:	b973      	cbnz	r3, 800800e <_svfiprintf_r+0x36>
 8007ff0:	2140      	movs	r1, #64	@ 0x40
 8007ff2:	f7ff ff09 	bl	8007e08 <_malloc_r>
 8007ff6:	6028      	str	r0, [r5, #0]
 8007ff8:	6128      	str	r0, [r5, #16]
 8007ffa:	b930      	cbnz	r0, 800800a <_svfiprintf_r+0x32>
 8007ffc:	230c      	movs	r3, #12
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	f04f 30ff 	mov.w	r0, #4294967295
 8008004:	b01d      	add	sp, #116	@ 0x74
 8008006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800a:	2340      	movs	r3, #64	@ 0x40
 800800c:	616b      	str	r3, [r5, #20]
 800800e:	2300      	movs	r3, #0
 8008010:	9309      	str	r3, [sp, #36]	@ 0x24
 8008012:	2320      	movs	r3, #32
 8008014:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008018:	2330      	movs	r3, #48	@ 0x30
 800801a:	f04f 0901 	mov.w	r9, #1
 800801e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008022:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80081bc <_svfiprintf_r+0x1e4>
 8008026:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800802a:	4623      	mov	r3, r4
 800802c:	469a      	mov	sl, r3
 800802e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008032:	b10a      	cbz	r2, 8008038 <_svfiprintf_r+0x60>
 8008034:	2a25      	cmp	r2, #37	@ 0x25
 8008036:	d1f9      	bne.n	800802c <_svfiprintf_r+0x54>
 8008038:	ebba 0b04 	subs.w	fp, sl, r4
 800803c:	d00b      	beq.n	8008056 <_svfiprintf_r+0x7e>
 800803e:	465b      	mov	r3, fp
 8008040:	4622      	mov	r2, r4
 8008042:	4629      	mov	r1, r5
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff ff6b 	bl	8007f20 <__ssputs_r>
 800804a:	3001      	adds	r0, #1
 800804c:	f000 80a7 	beq.w	800819e <_svfiprintf_r+0x1c6>
 8008050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008052:	445a      	add	r2, fp
 8008054:	9209      	str	r2, [sp, #36]	@ 0x24
 8008056:	f89a 3000 	ldrb.w	r3, [sl]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 809f 	beq.w	800819e <_svfiprintf_r+0x1c6>
 8008060:	2300      	movs	r3, #0
 8008062:	f04f 32ff 	mov.w	r2, #4294967295
 8008066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800806a:	f10a 0a01 	add.w	sl, sl, #1
 800806e:	9304      	str	r3, [sp, #16]
 8008070:	9307      	str	r3, [sp, #28]
 8008072:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008076:	931a      	str	r3, [sp, #104]	@ 0x68
 8008078:	4654      	mov	r4, sl
 800807a:	2205      	movs	r2, #5
 800807c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008080:	484e      	ldr	r0, [pc, #312]	@ (80081bc <_svfiprintf_r+0x1e4>)
 8008082:	f000 fc35 	bl	80088f0 <memchr>
 8008086:	9a04      	ldr	r2, [sp, #16]
 8008088:	b9d8      	cbnz	r0, 80080c2 <_svfiprintf_r+0xea>
 800808a:	06d0      	lsls	r0, r2, #27
 800808c:	bf44      	itt	mi
 800808e:	2320      	movmi	r3, #32
 8008090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008094:	0711      	lsls	r1, r2, #28
 8008096:	bf44      	itt	mi
 8008098:	232b      	movmi	r3, #43	@ 0x2b
 800809a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800809e:	f89a 3000 	ldrb.w	r3, [sl]
 80080a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80080a4:	d015      	beq.n	80080d2 <_svfiprintf_r+0xfa>
 80080a6:	4654      	mov	r4, sl
 80080a8:	2000      	movs	r0, #0
 80080aa:	f04f 0c0a 	mov.w	ip, #10
 80080ae:	9a07      	ldr	r2, [sp, #28]
 80080b0:	4621      	mov	r1, r4
 80080b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b6:	3b30      	subs	r3, #48	@ 0x30
 80080b8:	2b09      	cmp	r3, #9
 80080ba:	d94b      	bls.n	8008154 <_svfiprintf_r+0x17c>
 80080bc:	b1b0      	cbz	r0, 80080ec <_svfiprintf_r+0x114>
 80080be:	9207      	str	r2, [sp, #28]
 80080c0:	e014      	b.n	80080ec <_svfiprintf_r+0x114>
 80080c2:	eba0 0308 	sub.w	r3, r0, r8
 80080c6:	fa09 f303 	lsl.w	r3, r9, r3
 80080ca:	4313      	orrs	r3, r2
 80080cc:	46a2      	mov	sl, r4
 80080ce:	9304      	str	r3, [sp, #16]
 80080d0:	e7d2      	b.n	8008078 <_svfiprintf_r+0xa0>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	1d19      	adds	r1, r3, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	9103      	str	r1, [sp, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bfbb      	ittet	lt
 80080de:	425b      	neglt	r3, r3
 80080e0:	f042 0202 	orrlt.w	r2, r2, #2
 80080e4:	9307      	strge	r3, [sp, #28]
 80080e6:	9307      	strlt	r3, [sp, #28]
 80080e8:	bfb8      	it	lt
 80080ea:	9204      	strlt	r2, [sp, #16]
 80080ec:	7823      	ldrb	r3, [r4, #0]
 80080ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80080f0:	d10a      	bne.n	8008108 <_svfiprintf_r+0x130>
 80080f2:	7863      	ldrb	r3, [r4, #1]
 80080f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080f6:	d132      	bne.n	800815e <_svfiprintf_r+0x186>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	3402      	adds	r4, #2
 80080fc:	1d1a      	adds	r2, r3, #4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	9203      	str	r2, [sp, #12]
 8008102:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008106:	9305      	str	r3, [sp, #20]
 8008108:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80081c0 <_svfiprintf_r+0x1e8>
 800810c:	2203      	movs	r2, #3
 800810e:	4650      	mov	r0, sl
 8008110:	7821      	ldrb	r1, [r4, #0]
 8008112:	f000 fbed 	bl	80088f0 <memchr>
 8008116:	b138      	cbz	r0, 8008128 <_svfiprintf_r+0x150>
 8008118:	2240      	movs	r2, #64	@ 0x40
 800811a:	9b04      	ldr	r3, [sp, #16]
 800811c:	eba0 000a 	sub.w	r0, r0, sl
 8008120:	4082      	lsls	r2, r0
 8008122:	4313      	orrs	r3, r2
 8008124:	3401      	adds	r4, #1
 8008126:	9304      	str	r3, [sp, #16]
 8008128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812c:	2206      	movs	r2, #6
 800812e:	4825      	ldr	r0, [pc, #148]	@ (80081c4 <_svfiprintf_r+0x1ec>)
 8008130:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008134:	f000 fbdc 	bl	80088f0 <memchr>
 8008138:	2800      	cmp	r0, #0
 800813a:	d036      	beq.n	80081aa <_svfiprintf_r+0x1d2>
 800813c:	4b22      	ldr	r3, [pc, #136]	@ (80081c8 <_svfiprintf_r+0x1f0>)
 800813e:	bb1b      	cbnz	r3, 8008188 <_svfiprintf_r+0x1b0>
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	3307      	adds	r3, #7
 8008144:	f023 0307 	bic.w	r3, r3, #7
 8008148:	3308      	adds	r3, #8
 800814a:	9303      	str	r3, [sp, #12]
 800814c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800814e:	4433      	add	r3, r6
 8008150:	9309      	str	r3, [sp, #36]	@ 0x24
 8008152:	e76a      	b.n	800802a <_svfiprintf_r+0x52>
 8008154:	460c      	mov	r4, r1
 8008156:	2001      	movs	r0, #1
 8008158:	fb0c 3202 	mla	r2, ip, r2, r3
 800815c:	e7a8      	b.n	80080b0 <_svfiprintf_r+0xd8>
 800815e:	2300      	movs	r3, #0
 8008160:	f04f 0c0a 	mov.w	ip, #10
 8008164:	4619      	mov	r1, r3
 8008166:	3401      	adds	r4, #1
 8008168:	9305      	str	r3, [sp, #20]
 800816a:	4620      	mov	r0, r4
 800816c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008170:	3a30      	subs	r2, #48	@ 0x30
 8008172:	2a09      	cmp	r2, #9
 8008174:	d903      	bls.n	800817e <_svfiprintf_r+0x1a6>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0c6      	beq.n	8008108 <_svfiprintf_r+0x130>
 800817a:	9105      	str	r1, [sp, #20]
 800817c:	e7c4      	b.n	8008108 <_svfiprintf_r+0x130>
 800817e:	4604      	mov	r4, r0
 8008180:	2301      	movs	r3, #1
 8008182:	fb0c 2101 	mla	r1, ip, r1, r2
 8008186:	e7f0      	b.n	800816a <_svfiprintf_r+0x192>
 8008188:	ab03      	add	r3, sp, #12
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	462a      	mov	r2, r5
 800818e:	4638      	mov	r0, r7
 8008190:	4b0e      	ldr	r3, [pc, #56]	@ (80081cc <_svfiprintf_r+0x1f4>)
 8008192:	a904      	add	r1, sp, #16
 8008194:	f3af 8000 	nop.w
 8008198:	1c42      	adds	r2, r0, #1
 800819a:	4606      	mov	r6, r0
 800819c:	d1d6      	bne.n	800814c <_svfiprintf_r+0x174>
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	065b      	lsls	r3, r3, #25
 80081a2:	f53f af2d 	bmi.w	8008000 <_svfiprintf_r+0x28>
 80081a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081a8:	e72c      	b.n	8008004 <_svfiprintf_r+0x2c>
 80081aa:	ab03      	add	r3, sp, #12
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	462a      	mov	r2, r5
 80081b0:	4638      	mov	r0, r7
 80081b2:	4b06      	ldr	r3, [pc, #24]	@ (80081cc <_svfiprintf_r+0x1f4>)
 80081b4:	a904      	add	r1, sp, #16
 80081b6:	f000 f9bd 	bl	8008534 <_printf_i>
 80081ba:	e7ed      	b.n	8008198 <_svfiprintf_r+0x1c0>
 80081bc:	0800936b 	.word	0x0800936b
 80081c0:	08009371 	.word	0x08009371
 80081c4:	08009375 	.word	0x08009375
 80081c8:	00000000 	.word	0x00000000
 80081cc:	08007f21 	.word	0x08007f21

080081d0 <__sfputc_r>:
 80081d0:	6893      	ldr	r3, [r2, #8]
 80081d2:	b410      	push	{r4}
 80081d4:	3b01      	subs	r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	6093      	str	r3, [r2, #8]
 80081da:	da07      	bge.n	80081ec <__sfputc_r+0x1c>
 80081dc:	6994      	ldr	r4, [r2, #24]
 80081de:	42a3      	cmp	r3, r4
 80081e0:	db01      	blt.n	80081e6 <__sfputc_r+0x16>
 80081e2:	290a      	cmp	r1, #10
 80081e4:	d102      	bne.n	80081ec <__sfputc_r+0x1c>
 80081e6:	bc10      	pop	{r4}
 80081e8:	f000 bac4 	b.w	8008774 <__swbuf_r>
 80081ec:	6813      	ldr	r3, [r2, #0]
 80081ee:	1c58      	adds	r0, r3, #1
 80081f0:	6010      	str	r0, [r2, #0]
 80081f2:	7019      	strb	r1, [r3, #0]
 80081f4:	4608      	mov	r0, r1
 80081f6:	bc10      	pop	{r4}
 80081f8:	4770      	bx	lr

080081fa <__sfputs_r>:
 80081fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fc:	4606      	mov	r6, r0
 80081fe:	460f      	mov	r7, r1
 8008200:	4614      	mov	r4, r2
 8008202:	18d5      	adds	r5, r2, r3
 8008204:	42ac      	cmp	r4, r5
 8008206:	d101      	bne.n	800820c <__sfputs_r+0x12>
 8008208:	2000      	movs	r0, #0
 800820a:	e007      	b.n	800821c <__sfputs_r+0x22>
 800820c:	463a      	mov	r2, r7
 800820e:	4630      	mov	r0, r6
 8008210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008214:	f7ff ffdc 	bl	80081d0 <__sfputc_r>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d1f3      	bne.n	8008204 <__sfputs_r+0xa>
 800821c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008220 <_vfiprintf_r>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	460d      	mov	r5, r1
 8008226:	4614      	mov	r4, r2
 8008228:	4698      	mov	r8, r3
 800822a:	4606      	mov	r6, r0
 800822c:	b09d      	sub	sp, #116	@ 0x74
 800822e:	b118      	cbz	r0, 8008238 <_vfiprintf_r+0x18>
 8008230:	6a03      	ldr	r3, [r0, #32]
 8008232:	b90b      	cbnz	r3, 8008238 <_vfiprintf_r+0x18>
 8008234:	f7ff fc28 	bl	8007a88 <__sinit>
 8008238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800823a:	07d9      	lsls	r1, r3, #31
 800823c:	d405      	bmi.n	800824a <_vfiprintf_r+0x2a>
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	059a      	lsls	r2, r3, #22
 8008242:	d402      	bmi.n	800824a <_vfiprintf_r+0x2a>
 8008244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008246:	f7ff fd6a 	bl	8007d1e <__retarget_lock_acquire_recursive>
 800824a:	89ab      	ldrh	r3, [r5, #12]
 800824c:	071b      	lsls	r3, r3, #28
 800824e:	d501      	bpl.n	8008254 <_vfiprintf_r+0x34>
 8008250:	692b      	ldr	r3, [r5, #16]
 8008252:	b99b      	cbnz	r3, 800827c <_vfiprintf_r+0x5c>
 8008254:	4629      	mov	r1, r5
 8008256:	4630      	mov	r0, r6
 8008258:	f000 faca 	bl	80087f0 <__swsetup_r>
 800825c:	b170      	cbz	r0, 800827c <_vfiprintf_r+0x5c>
 800825e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008260:	07dc      	lsls	r4, r3, #31
 8008262:	d504      	bpl.n	800826e <_vfiprintf_r+0x4e>
 8008264:	f04f 30ff 	mov.w	r0, #4294967295
 8008268:	b01d      	add	sp, #116	@ 0x74
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826e:	89ab      	ldrh	r3, [r5, #12]
 8008270:	0598      	lsls	r0, r3, #22
 8008272:	d4f7      	bmi.n	8008264 <_vfiprintf_r+0x44>
 8008274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008276:	f7ff fd53 	bl	8007d20 <__retarget_lock_release_recursive>
 800827a:	e7f3      	b.n	8008264 <_vfiprintf_r+0x44>
 800827c:	2300      	movs	r3, #0
 800827e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008280:	2320      	movs	r3, #32
 8008282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008286:	2330      	movs	r3, #48	@ 0x30
 8008288:	f04f 0901 	mov.w	r9, #1
 800828c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008290:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800843c <_vfiprintf_r+0x21c>
 8008294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008298:	4623      	mov	r3, r4
 800829a:	469a      	mov	sl, r3
 800829c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082a0:	b10a      	cbz	r2, 80082a6 <_vfiprintf_r+0x86>
 80082a2:	2a25      	cmp	r2, #37	@ 0x25
 80082a4:	d1f9      	bne.n	800829a <_vfiprintf_r+0x7a>
 80082a6:	ebba 0b04 	subs.w	fp, sl, r4
 80082aa:	d00b      	beq.n	80082c4 <_vfiprintf_r+0xa4>
 80082ac:	465b      	mov	r3, fp
 80082ae:	4622      	mov	r2, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff ffa1 	bl	80081fa <__sfputs_r>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f000 80a7 	beq.w	800840c <_vfiprintf_r+0x1ec>
 80082be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082c0:	445a      	add	r2, fp
 80082c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80082c4:	f89a 3000 	ldrb.w	r3, [sl]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 809f 	beq.w	800840c <_vfiprintf_r+0x1ec>
 80082ce:	2300      	movs	r3, #0
 80082d0:	f04f 32ff 	mov.w	r2, #4294967295
 80082d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d8:	f10a 0a01 	add.w	sl, sl, #1
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	9307      	str	r3, [sp, #28]
 80082e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80082e6:	4654      	mov	r4, sl
 80082e8:	2205      	movs	r2, #5
 80082ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ee:	4853      	ldr	r0, [pc, #332]	@ (800843c <_vfiprintf_r+0x21c>)
 80082f0:	f000 fafe 	bl	80088f0 <memchr>
 80082f4:	9a04      	ldr	r2, [sp, #16]
 80082f6:	b9d8      	cbnz	r0, 8008330 <_vfiprintf_r+0x110>
 80082f8:	06d1      	lsls	r1, r2, #27
 80082fa:	bf44      	itt	mi
 80082fc:	2320      	movmi	r3, #32
 80082fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008302:	0713      	lsls	r3, r2, #28
 8008304:	bf44      	itt	mi
 8008306:	232b      	movmi	r3, #43	@ 0x2b
 8008308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800830c:	f89a 3000 	ldrb.w	r3, [sl]
 8008310:	2b2a      	cmp	r3, #42	@ 0x2a
 8008312:	d015      	beq.n	8008340 <_vfiprintf_r+0x120>
 8008314:	4654      	mov	r4, sl
 8008316:	2000      	movs	r0, #0
 8008318:	f04f 0c0a 	mov.w	ip, #10
 800831c:	9a07      	ldr	r2, [sp, #28]
 800831e:	4621      	mov	r1, r4
 8008320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008324:	3b30      	subs	r3, #48	@ 0x30
 8008326:	2b09      	cmp	r3, #9
 8008328:	d94b      	bls.n	80083c2 <_vfiprintf_r+0x1a2>
 800832a:	b1b0      	cbz	r0, 800835a <_vfiprintf_r+0x13a>
 800832c:	9207      	str	r2, [sp, #28]
 800832e:	e014      	b.n	800835a <_vfiprintf_r+0x13a>
 8008330:	eba0 0308 	sub.w	r3, r0, r8
 8008334:	fa09 f303 	lsl.w	r3, r9, r3
 8008338:	4313      	orrs	r3, r2
 800833a:	46a2      	mov	sl, r4
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	e7d2      	b.n	80082e6 <_vfiprintf_r+0xc6>
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	1d19      	adds	r1, r3, #4
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	9103      	str	r1, [sp, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfbb      	ittet	lt
 800834c:	425b      	neglt	r3, r3
 800834e:	f042 0202 	orrlt.w	r2, r2, #2
 8008352:	9307      	strge	r3, [sp, #28]
 8008354:	9307      	strlt	r3, [sp, #28]
 8008356:	bfb8      	it	lt
 8008358:	9204      	strlt	r2, [sp, #16]
 800835a:	7823      	ldrb	r3, [r4, #0]
 800835c:	2b2e      	cmp	r3, #46	@ 0x2e
 800835e:	d10a      	bne.n	8008376 <_vfiprintf_r+0x156>
 8008360:	7863      	ldrb	r3, [r4, #1]
 8008362:	2b2a      	cmp	r3, #42	@ 0x2a
 8008364:	d132      	bne.n	80083cc <_vfiprintf_r+0x1ac>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	3402      	adds	r4, #2
 800836a:	1d1a      	adds	r2, r3, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	9203      	str	r2, [sp, #12]
 8008370:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008440 <_vfiprintf_r+0x220>
 800837a:	2203      	movs	r2, #3
 800837c:	4650      	mov	r0, sl
 800837e:	7821      	ldrb	r1, [r4, #0]
 8008380:	f000 fab6 	bl	80088f0 <memchr>
 8008384:	b138      	cbz	r0, 8008396 <_vfiprintf_r+0x176>
 8008386:	2240      	movs	r2, #64	@ 0x40
 8008388:	9b04      	ldr	r3, [sp, #16]
 800838a:	eba0 000a 	sub.w	r0, r0, sl
 800838e:	4082      	lsls	r2, r0
 8008390:	4313      	orrs	r3, r2
 8008392:	3401      	adds	r4, #1
 8008394:	9304      	str	r3, [sp, #16]
 8008396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839a:	2206      	movs	r2, #6
 800839c:	4829      	ldr	r0, [pc, #164]	@ (8008444 <_vfiprintf_r+0x224>)
 800839e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083a2:	f000 faa5 	bl	80088f0 <memchr>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d03f      	beq.n	800842a <_vfiprintf_r+0x20a>
 80083aa:	4b27      	ldr	r3, [pc, #156]	@ (8008448 <_vfiprintf_r+0x228>)
 80083ac:	bb1b      	cbnz	r3, 80083f6 <_vfiprintf_r+0x1d6>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	3307      	adds	r3, #7
 80083b2:	f023 0307 	bic.w	r3, r3, #7
 80083b6:	3308      	adds	r3, #8
 80083b8:	9303      	str	r3, [sp, #12]
 80083ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083bc:	443b      	add	r3, r7
 80083be:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c0:	e76a      	b.n	8008298 <_vfiprintf_r+0x78>
 80083c2:	460c      	mov	r4, r1
 80083c4:	2001      	movs	r0, #1
 80083c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ca:	e7a8      	b.n	800831e <_vfiprintf_r+0xfe>
 80083cc:	2300      	movs	r3, #0
 80083ce:	f04f 0c0a 	mov.w	ip, #10
 80083d2:	4619      	mov	r1, r3
 80083d4:	3401      	adds	r4, #1
 80083d6:	9305      	str	r3, [sp, #20]
 80083d8:	4620      	mov	r0, r4
 80083da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083de:	3a30      	subs	r2, #48	@ 0x30
 80083e0:	2a09      	cmp	r2, #9
 80083e2:	d903      	bls.n	80083ec <_vfiprintf_r+0x1cc>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0c6      	beq.n	8008376 <_vfiprintf_r+0x156>
 80083e8:	9105      	str	r1, [sp, #20]
 80083ea:	e7c4      	b.n	8008376 <_vfiprintf_r+0x156>
 80083ec:	4604      	mov	r4, r0
 80083ee:	2301      	movs	r3, #1
 80083f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f4:	e7f0      	b.n	80083d8 <_vfiprintf_r+0x1b8>
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	462a      	mov	r2, r5
 80083fc:	4630      	mov	r0, r6
 80083fe:	4b13      	ldr	r3, [pc, #76]	@ (800844c <_vfiprintf_r+0x22c>)
 8008400:	a904      	add	r1, sp, #16
 8008402:	f3af 8000 	nop.w
 8008406:	4607      	mov	r7, r0
 8008408:	1c78      	adds	r0, r7, #1
 800840a:	d1d6      	bne.n	80083ba <_vfiprintf_r+0x19a>
 800840c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800840e:	07d9      	lsls	r1, r3, #31
 8008410:	d405      	bmi.n	800841e <_vfiprintf_r+0x1fe>
 8008412:	89ab      	ldrh	r3, [r5, #12]
 8008414:	059a      	lsls	r2, r3, #22
 8008416:	d402      	bmi.n	800841e <_vfiprintf_r+0x1fe>
 8008418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800841a:	f7ff fc81 	bl	8007d20 <__retarget_lock_release_recursive>
 800841e:	89ab      	ldrh	r3, [r5, #12]
 8008420:	065b      	lsls	r3, r3, #25
 8008422:	f53f af1f 	bmi.w	8008264 <_vfiprintf_r+0x44>
 8008426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008428:	e71e      	b.n	8008268 <_vfiprintf_r+0x48>
 800842a:	ab03      	add	r3, sp, #12
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	462a      	mov	r2, r5
 8008430:	4630      	mov	r0, r6
 8008432:	4b06      	ldr	r3, [pc, #24]	@ (800844c <_vfiprintf_r+0x22c>)
 8008434:	a904      	add	r1, sp, #16
 8008436:	f000 f87d 	bl	8008534 <_printf_i>
 800843a:	e7e4      	b.n	8008406 <_vfiprintf_r+0x1e6>
 800843c:	0800936b 	.word	0x0800936b
 8008440:	08009371 	.word	0x08009371
 8008444:	08009375 	.word	0x08009375
 8008448:	00000000 	.word	0x00000000
 800844c:	080081fb 	.word	0x080081fb

08008450 <_printf_common>:
 8008450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	4616      	mov	r6, r2
 8008456:	4698      	mov	r8, r3
 8008458:	688a      	ldr	r2, [r1, #8]
 800845a:	690b      	ldr	r3, [r1, #16]
 800845c:	4607      	mov	r7, r0
 800845e:	4293      	cmp	r3, r2
 8008460:	bfb8      	it	lt
 8008462:	4613      	movlt	r3, r2
 8008464:	6033      	str	r3, [r6, #0]
 8008466:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800846a:	460c      	mov	r4, r1
 800846c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008470:	b10a      	cbz	r2, 8008476 <_printf_common+0x26>
 8008472:	3301      	adds	r3, #1
 8008474:	6033      	str	r3, [r6, #0]
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	0699      	lsls	r1, r3, #26
 800847a:	bf42      	ittt	mi
 800847c:	6833      	ldrmi	r3, [r6, #0]
 800847e:	3302      	addmi	r3, #2
 8008480:	6033      	strmi	r3, [r6, #0]
 8008482:	6825      	ldr	r5, [r4, #0]
 8008484:	f015 0506 	ands.w	r5, r5, #6
 8008488:	d106      	bne.n	8008498 <_printf_common+0x48>
 800848a:	f104 0a19 	add.w	sl, r4, #25
 800848e:	68e3      	ldr	r3, [r4, #12]
 8008490:	6832      	ldr	r2, [r6, #0]
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	42ab      	cmp	r3, r5
 8008496:	dc2b      	bgt.n	80084f0 <_printf_common+0xa0>
 8008498:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800849c:	6822      	ldr	r2, [r4, #0]
 800849e:	3b00      	subs	r3, #0
 80084a0:	bf18      	it	ne
 80084a2:	2301      	movne	r3, #1
 80084a4:	0692      	lsls	r2, r2, #26
 80084a6:	d430      	bmi.n	800850a <_printf_common+0xba>
 80084a8:	4641      	mov	r1, r8
 80084aa:	4638      	mov	r0, r7
 80084ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084b0:	47c8      	blx	r9
 80084b2:	3001      	adds	r0, #1
 80084b4:	d023      	beq.n	80084fe <_printf_common+0xae>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	6922      	ldr	r2, [r4, #16]
 80084ba:	f003 0306 	and.w	r3, r3, #6
 80084be:	2b04      	cmp	r3, #4
 80084c0:	bf14      	ite	ne
 80084c2:	2500      	movne	r5, #0
 80084c4:	6833      	ldreq	r3, [r6, #0]
 80084c6:	f04f 0600 	mov.w	r6, #0
 80084ca:	bf08      	it	eq
 80084cc:	68e5      	ldreq	r5, [r4, #12]
 80084ce:	f104 041a 	add.w	r4, r4, #26
 80084d2:	bf08      	it	eq
 80084d4:	1aed      	subeq	r5, r5, r3
 80084d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80084da:	bf08      	it	eq
 80084dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084e0:	4293      	cmp	r3, r2
 80084e2:	bfc4      	itt	gt
 80084e4:	1a9b      	subgt	r3, r3, r2
 80084e6:	18ed      	addgt	r5, r5, r3
 80084e8:	42b5      	cmp	r5, r6
 80084ea:	d11a      	bne.n	8008522 <_printf_common+0xd2>
 80084ec:	2000      	movs	r0, #0
 80084ee:	e008      	b.n	8008502 <_printf_common+0xb2>
 80084f0:	2301      	movs	r3, #1
 80084f2:	4652      	mov	r2, sl
 80084f4:	4641      	mov	r1, r8
 80084f6:	4638      	mov	r0, r7
 80084f8:	47c8      	blx	r9
 80084fa:	3001      	adds	r0, #1
 80084fc:	d103      	bne.n	8008506 <_printf_common+0xb6>
 80084fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	3501      	adds	r5, #1
 8008508:	e7c1      	b.n	800848e <_printf_common+0x3e>
 800850a:	2030      	movs	r0, #48	@ 0x30
 800850c:	18e1      	adds	r1, r4, r3
 800850e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008518:	4422      	add	r2, r4
 800851a:	3302      	adds	r3, #2
 800851c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008520:	e7c2      	b.n	80084a8 <_printf_common+0x58>
 8008522:	2301      	movs	r3, #1
 8008524:	4622      	mov	r2, r4
 8008526:	4641      	mov	r1, r8
 8008528:	4638      	mov	r0, r7
 800852a:	47c8      	blx	r9
 800852c:	3001      	adds	r0, #1
 800852e:	d0e6      	beq.n	80084fe <_printf_common+0xae>
 8008530:	3601      	adds	r6, #1
 8008532:	e7d9      	b.n	80084e8 <_printf_common+0x98>

08008534 <_printf_i>:
 8008534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	7e0f      	ldrb	r7, [r1, #24]
 800853a:	4691      	mov	r9, r2
 800853c:	2f78      	cmp	r7, #120	@ 0x78
 800853e:	4680      	mov	r8, r0
 8008540:	460c      	mov	r4, r1
 8008542:	469a      	mov	sl, r3
 8008544:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008546:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800854a:	d807      	bhi.n	800855c <_printf_i+0x28>
 800854c:	2f62      	cmp	r7, #98	@ 0x62
 800854e:	d80a      	bhi.n	8008566 <_printf_i+0x32>
 8008550:	2f00      	cmp	r7, #0
 8008552:	f000 80d3 	beq.w	80086fc <_printf_i+0x1c8>
 8008556:	2f58      	cmp	r7, #88	@ 0x58
 8008558:	f000 80ba 	beq.w	80086d0 <_printf_i+0x19c>
 800855c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008560:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008564:	e03a      	b.n	80085dc <_printf_i+0xa8>
 8008566:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800856a:	2b15      	cmp	r3, #21
 800856c:	d8f6      	bhi.n	800855c <_printf_i+0x28>
 800856e:	a101      	add	r1, pc, #4	@ (adr r1, 8008574 <_printf_i+0x40>)
 8008570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008574:	080085cd 	.word	0x080085cd
 8008578:	080085e1 	.word	0x080085e1
 800857c:	0800855d 	.word	0x0800855d
 8008580:	0800855d 	.word	0x0800855d
 8008584:	0800855d 	.word	0x0800855d
 8008588:	0800855d 	.word	0x0800855d
 800858c:	080085e1 	.word	0x080085e1
 8008590:	0800855d 	.word	0x0800855d
 8008594:	0800855d 	.word	0x0800855d
 8008598:	0800855d 	.word	0x0800855d
 800859c:	0800855d 	.word	0x0800855d
 80085a0:	080086e3 	.word	0x080086e3
 80085a4:	0800860b 	.word	0x0800860b
 80085a8:	0800869d 	.word	0x0800869d
 80085ac:	0800855d 	.word	0x0800855d
 80085b0:	0800855d 	.word	0x0800855d
 80085b4:	08008705 	.word	0x08008705
 80085b8:	0800855d 	.word	0x0800855d
 80085bc:	0800860b 	.word	0x0800860b
 80085c0:	0800855d 	.word	0x0800855d
 80085c4:	0800855d 	.word	0x0800855d
 80085c8:	080086a5 	.word	0x080086a5
 80085cc:	6833      	ldr	r3, [r6, #0]
 80085ce:	1d1a      	adds	r2, r3, #4
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6032      	str	r2, [r6, #0]
 80085d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085dc:	2301      	movs	r3, #1
 80085de:	e09e      	b.n	800871e <_printf_i+0x1ea>
 80085e0:	6833      	ldr	r3, [r6, #0]
 80085e2:	6820      	ldr	r0, [r4, #0]
 80085e4:	1d19      	adds	r1, r3, #4
 80085e6:	6031      	str	r1, [r6, #0]
 80085e8:	0606      	lsls	r6, r0, #24
 80085ea:	d501      	bpl.n	80085f0 <_printf_i+0xbc>
 80085ec:	681d      	ldr	r5, [r3, #0]
 80085ee:	e003      	b.n	80085f8 <_printf_i+0xc4>
 80085f0:	0645      	lsls	r5, r0, #25
 80085f2:	d5fb      	bpl.n	80085ec <_printf_i+0xb8>
 80085f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	da03      	bge.n	8008604 <_printf_i+0xd0>
 80085fc:	232d      	movs	r3, #45	@ 0x2d
 80085fe:	426d      	negs	r5, r5
 8008600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008604:	230a      	movs	r3, #10
 8008606:	4859      	ldr	r0, [pc, #356]	@ (800876c <_printf_i+0x238>)
 8008608:	e011      	b.n	800862e <_printf_i+0xfa>
 800860a:	6821      	ldr	r1, [r4, #0]
 800860c:	6833      	ldr	r3, [r6, #0]
 800860e:	0608      	lsls	r0, r1, #24
 8008610:	f853 5b04 	ldr.w	r5, [r3], #4
 8008614:	d402      	bmi.n	800861c <_printf_i+0xe8>
 8008616:	0649      	lsls	r1, r1, #25
 8008618:	bf48      	it	mi
 800861a:	b2ad      	uxthmi	r5, r5
 800861c:	2f6f      	cmp	r7, #111	@ 0x6f
 800861e:	6033      	str	r3, [r6, #0]
 8008620:	bf14      	ite	ne
 8008622:	230a      	movne	r3, #10
 8008624:	2308      	moveq	r3, #8
 8008626:	4851      	ldr	r0, [pc, #324]	@ (800876c <_printf_i+0x238>)
 8008628:	2100      	movs	r1, #0
 800862a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800862e:	6866      	ldr	r6, [r4, #4]
 8008630:	2e00      	cmp	r6, #0
 8008632:	bfa8      	it	ge
 8008634:	6821      	ldrge	r1, [r4, #0]
 8008636:	60a6      	str	r6, [r4, #8]
 8008638:	bfa4      	itt	ge
 800863a:	f021 0104 	bicge.w	r1, r1, #4
 800863e:	6021      	strge	r1, [r4, #0]
 8008640:	b90d      	cbnz	r5, 8008646 <_printf_i+0x112>
 8008642:	2e00      	cmp	r6, #0
 8008644:	d04b      	beq.n	80086de <_printf_i+0x1aa>
 8008646:	4616      	mov	r6, r2
 8008648:	fbb5 f1f3 	udiv	r1, r5, r3
 800864c:	fb03 5711 	mls	r7, r3, r1, r5
 8008650:	5dc7      	ldrb	r7, [r0, r7]
 8008652:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008656:	462f      	mov	r7, r5
 8008658:	42bb      	cmp	r3, r7
 800865a:	460d      	mov	r5, r1
 800865c:	d9f4      	bls.n	8008648 <_printf_i+0x114>
 800865e:	2b08      	cmp	r3, #8
 8008660:	d10b      	bne.n	800867a <_printf_i+0x146>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	07df      	lsls	r7, r3, #31
 8008666:	d508      	bpl.n	800867a <_printf_i+0x146>
 8008668:	6923      	ldr	r3, [r4, #16]
 800866a:	6861      	ldr	r1, [r4, #4]
 800866c:	4299      	cmp	r1, r3
 800866e:	bfde      	ittt	le
 8008670:	2330      	movle	r3, #48	@ 0x30
 8008672:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008676:	f106 36ff 	addle.w	r6, r6, #4294967295
 800867a:	1b92      	subs	r2, r2, r6
 800867c:	6122      	str	r2, [r4, #16]
 800867e:	464b      	mov	r3, r9
 8008680:	4621      	mov	r1, r4
 8008682:	4640      	mov	r0, r8
 8008684:	f8cd a000 	str.w	sl, [sp]
 8008688:	aa03      	add	r2, sp, #12
 800868a:	f7ff fee1 	bl	8008450 <_printf_common>
 800868e:	3001      	adds	r0, #1
 8008690:	d14a      	bne.n	8008728 <_printf_i+0x1f4>
 8008692:	f04f 30ff 	mov.w	r0, #4294967295
 8008696:	b004      	add	sp, #16
 8008698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	f043 0320 	orr.w	r3, r3, #32
 80086a2:	6023      	str	r3, [r4, #0]
 80086a4:	2778      	movs	r7, #120	@ 0x78
 80086a6:	4832      	ldr	r0, [pc, #200]	@ (8008770 <_printf_i+0x23c>)
 80086a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	6831      	ldr	r1, [r6, #0]
 80086b0:	061f      	lsls	r7, r3, #24
 80086b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80086b6:	d402      	bmi.n	80086be <_printf_i+0x18a>
 80086b8:	065f      	lsls	r7, r3, #25
 80086ba:	bf48      	it	mi
 80086bc:	b2ad      	uxthmi	r5, r5
 80086be:	6031      	str	r1, [r6, #0]
 80086c0:	07d9      	lsls	r1, r3, #31
 80086c2:	bf44      	itt	mi
 80086c4:	f043 0320 	orrmi.w	r3, r3, #32
 80086c8:	6023      	strmi	r3, [r4, #0]
 80086ca:	b11d      	cbz	r5, 80086d4 <_printf_i+0x1a0>
 80086cc:	2310      	movs	r3, #16
 80086ce:	e7ab      	b.n	8008628 <_printf_i+0xf4>
 80086d0:	4826      	ldr	r0, [pc, #152]	@ (800876c <_printf_i+0x238>)
 80086d2:	e7e9      	b.n	80086a8 <_printf_i+0x174>
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	f023 0320 	bic.w	r3, r3, #32
 80086da:	6023      	str	r3, [r4, #0]
 80086dc:	e7f6      	b.n	80086cc <_printf_i+0x198>
 80086de:	4616      	mov	r6, r2
 80086e0:	e7bd      	b.n	800865e <_printf_i+0x12a>
 80086e2:	6833      	ldr	r3, [r6, #0]
 80086e4:	6825      	ldr	r5, [r4, #0]
 80086e6:	1d18      	adds	r0, r3, #4
 80086e8:	6961      	ldr	r1, [r4, #20]
 80086ea:	6030      	str	r0, [r6, #0]
 80086ec:	062e      	lsls	r6, r5, #24
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	d501      	bpl.n	80086f6 <_printf_i+0x1c2>
 80086f2:	6019      	str	r1, [r3, #0]
 80086f4:	e002      	b.n	80086fc <_printf_i+0x1c8>
 80086f6:	0668      	lsls	r0, r5, #25
 80086f8:	d5fb      	bpl.n	80086f2 <_printf_i+0x1be>
 80086fa:	8019      	strh	r1, [r3, #0]
 80086fc:	2300      	movs	r3, #0
 80086fe:	4616      	mov	r6, r2
 8008700:	6123      	str	r3, [r4, #16]
 8008702:	e7bc      	b.n	800867e <_printf_i+0x14a>
 8008704:	6833      	ldr	r3, [r6, #0]
 8008706:	2100      	movs	r1, #0
 8008708:	1d1a      	adds	r2, r3, #4
 800870a:	6032      	str	r2, [r6, #0]
 800870c:	681e      	ldr	r6, [r3, #0]
 800870e:	6862      	ldr	r2, [r4, #4]
 8008710:	4630      	mov	r0, r6
 8008712:	f000 f8ed 	bl	80088f0 <memchr>
 8008716:	b108      	cbz	r0, 800871c <_printf_i+0x1e8>
 8008718:	1b80      	subs	r0, r0, r6
 800871a:	6060      	str	r0, [r4, #4]
 800871c:	6863      	ldr	r3, [r4, #4]
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	2300      	movs	r3, #0
 8008722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008726:	e7aa      	b.n	800867e <_printf_i+0x14a>
 8008728:	4632      	mov	r2, r6
 800872a:	4649      	mov	r1, r9
 800872c:	4640      	mov	r0, r8
 800872e:	6923      	ldr	r3, [r4, #16]
 8008730:	47d0      	blx	sl
 8008732:	3001      	adds	r0, #1
 8008734:	d0ad      	beq.n	8008692 <_printf_i+0x15e>
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	079b      	lsls	r3, r3, #30
 800873a:	d413      	bmi.n	8008764 <_printf_i+0x230>
 800873c:	68e0      	ldr	r0, [r4, #12]
 800873e:	9b03      	ldr	r3, [sp, #12]
 8008740:	4298      	cmp	r0, r3
 8008742:	bfb8      	it	lt
 8008744:	4618      	movlt	r0, r3
 8008746:	e7a6      	b.n	8008696 <_printf_i+0x162>
 8008748:	2301      	movs	r3, #1
 800874a:	4632      	mov	r2, r6
 800874c:	4649      	mov	r1, r9
 800874e:	4640      	mov	r0, r8
 8008750:	47d0      	blx	sl
 8008752:	3001      	adds	r0, #1
 8008754:	d09d      	beq.n	8008692 <_printf_i+0x15e>
 8008756:	3501      	adds	r5, #1
 8008758:	68e3      	ldr	r3, [r4, #12]
 800875a:	9903      	ldr	r1, [sp, #12]
 800875c:	1a5b      	subs	r3, r3, r1
 800875e:	42ab      	cmp	r3, r5
 8008760:	dcf2      	bgt.n	8008748 <_printf_i+0x214>
 8008762:	e7eb      	b.n	800873c <_printf_i+0x208>
 8008764:	2500      	movs	r5, #0
 8008766:	f104 0619 	add.w	r6, r4, #25
 800876a:	e7f5      	b.n	8008758 <_printf_i+0x224>
 800876c:	0800937c 	.word	0x0800937c
 8008770:	0800938d 	.word	0x0800938d

08008774 <__swbuf_r>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	460e      	mov	r6, r1
 8008778:	4614      	mov	r4, r2
 800877a:	4605      	mov	r5, r0
 800877c:	b118      	cbz	r0, 8008786 <__swbuf_r+0x12>
 800877e:	6a03      	ldr	r3, [r0, #32]
 8008780:	b90b      	cbnz	r3, 8008786 <__swbuf_r+0x12>
 8008782:	f7ff f981 	bl	8007a88 <__sinit>
 8008786:	69a3      	ldr	r3, [r4, #24]
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	071a      	lsls	r2, r3, #28
 800878e:	d501      	bpl.n	8008794 <__swbuf_r+0x20>
 8008790:	6923      	ldr	r3, [r4, #16]
 8008792:	b943      	cbnz	r3, 80087a6 <__swbuf_r+0x32>
 8008794:	4621      	mov	r1, r4
 8008796:	4628      	mov	r0, r5
 8008798:	f000 f82a 	bl	80087f0 <__swsetup_r>
 800879c:	b118      	cbz	r0, 80087a6 <__swbuf_r+0x32>
 800879e:	f04f 37ff 	mov.w	r7, #4294967295
 80087a2:	4638      	mov	r0, r7
 80087a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	6922      	ldr	r2, [r4, #16]
 80087aa:	b2f6      	uxtb	r6, r6
 80087ac:	1a98      	subs	r0, r3, r2
 80087ae:	6963      	ldr	r3, [r4, #20]
 80087b0:	4637      	mov	r7, r6
 80087b2:	4283      	cmp	r3, r0
 80087b4:	dc05      	bgt.n	80087c2 <__swbuf_r+0x4e>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f7ff f89d 	bl	80078f8 <_fflush_r>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d1ed      	bne.n	800879e <__swbuf_r+0x2a>
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	60a3      	str	r3, [r4, #8]
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	6022      	str	r2, [r4, #0]
 80087ce:	701e      	strb	r6, [r3, #0]
 80087d0:	6962      	ldr	r2, [r4, #20]
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d004      	beq.n	80087e2 <__swbuf_r+0x6e>
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	07db      	lsls	r3, r3, #31
 80087dc:	d5e1      	bpl.n	80087a2 <__swbuf_r+0x2e>
 80087de:	2e0a      	cmp	r6, #10
 80087e0:	d1df      	bne.n	80087a2 <__swbuf_r+0x2e>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f7ff f887 	bl	80078f8 <_fflush_r>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d0d9      	beq.n	80087a2 <__swbuf_r+0x2e>
 80087ee:	e7d6      	b.n	800879e <__swbuf_r+0x2a>

080087f0 <__swsetup_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4b29      	ldr	r3, [pc, #164]	@ (8008898 <__swsetup_r+0xa8>)
 80087f4:	4605      	mov	r5, r0
 80087f6:	6818      	ldr	r0, [r3, #0]
 80087f8:	460c      	mov	r4, r1
 80087fa:	b118      	cbz	r0, 8008804 <__swsetup_r+0x14>
 80087fc:	6a03      	ldr	r3, [r0, #32]
 80087fe:	b90b      	cbnz	r3, 8008804 <__swsetup_r+0x14>
 8008800:	f7ff f942 	bl	8007a88 <__sinit>
 8008804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008808:	0719      	lsls	r1, r3, #28
 800880a:	d422      	bmi.n	8008852 <__swsetup_r+0x62>
 800880c:	06da      	lsls	r2, r3, #27
 800880e:	d407      	bmi.n	8008820 <__swsetup_r+0x30>
 8008810:	2209      	movs	r2, #9
 8008812:	602a      	str	r2, [r5, #0]
 8008814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	e033      	b.n	8008888 <__swsetup_r+0x98>
 8008820:	0758      	lsls	r0, r3, #29
 8008822:	d512      	bpl.n	800884a <__swsetup_r+0x5a>
 8008824:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008826:	b141      	cbz	r1, 800883a <__swsetup_r+0x4a>
 8008828:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800882c:	4299      	cmp	r1, r3
 800882e:	d002      	beq.n	8008836 <__swsetup_r+0x46>
 8008830:	4628      	mov	r0, r5
 8008832:	f7ff fa7f 	bl	8007d34 <_free_r>
 8008836:	2300      	movs	r3, #0
 8008838:	6363      	str	r3, [r4, #52]	@ 0x34
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	2300      	movs	r3, #0
 8008844:	6063      	str	r3, [r4, #4]
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f043 0308 	orr.w	r3, r3, #8
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	b94b      	cbnz	r3, 800886a <__swsetup_r+0x7a>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800885c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008860:	d003      	beq.n	800886a <__swsetup_r+0x7a>
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f000 f8b2 	bl	80089ce <__smakebuf_r>
 800886a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886e:	f013 0201 	ands.w	r2, r3, #1
 8008872:	d00a      	beq.n	800888a <__swsetup_r+0x9a>
 8008874:	2200      	movs	r2, #0
 8008876:	60a2      	str	r2, [r4, #8]
 8008878:	6962      	ldr	r2, [r4, #20]
 800887a:	4252      	negs	r2, r2
 800887c:	61a2      	str	r2, [r4, #24]
 800887e:	6922      	ldr	r2, [r4, #16]
 8008880:	b942      	cbnz	r2, 8008894 <__swsetup_r+0xa4>
 8008882:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008886:	d1c5      	bne.n	8008814 <__swsetup_r+0x24>
 8008888:	bd38      	pop	{r3, r4, r5, pc}
 800888a:	0799      	lsls	r1, r3, #30
 800888c:	bf58      	it	pl
 800888e:	6962      	ldrpl	r2, [r4, #20]
 8008890:	60a2      	str	r2, [r4, #8]
 8008892:	e7f4      	b.n	800887e <__swsetup_r+0x8e>
 8008894:	2000      	movs	r0, #0
 8008896:	e7f7      	b.n	8008888 <__swsetup_r+0x98>
 8008898:	20000070 	.word	0x20000070

0800889c <memmove>:
 800889c:	4288      	cmp	r0, r1
 800889e:	b510      	push	{r4, lr}
 80088a0:	eb01 0402 	add.w	r4, r1, r2
 80088a4:	d902      	bls.n	80088ac <memmove+0x10>
 80088a6:	4284      	cmp	r4, r0
 80088a8:	4623      	mov	r3, r4
 80088aa:	d807      	bhi.n	80088bc <memmove+0x20>
 80088ac:	1e43      	subs	r3, r0, #1
 80088ae:	42a1      	cmp	r1, r4
 80088b0:	d008      	beq.n	80088c4 <memmove+0x28>
 80088b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088ba:	e7f8      	b.n	80088ae <memmove+0x12>
 80088bc:	4601      	mov	r1, r0
 80088be:	4402      	add	r2, r0
 80088c0:	428a      	cmp	r2, r1
 80088c2:	d100      	bne.n	80088c6 <memmove+0x2a>
 80088c4:	bd10      	pop	{r4, pc}
 80088c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ce:	e7f7      	b.n	80088c0 <memmove+0x24>

080088d0 <_sbrk_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	2300      	movs	r3, #0
 80088d4:	4d05      	ldr	r5, [pc, #20]	@ (80088ec <_sbrk_r+0x1c>)
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7f7 ff60 	bl	80007a0 <_sbrk>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_sbrk_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_sbrk_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	200006e8 	.word	0x200006e8

080088f0 <memchr>:
 80088f0:	4603      	mov	r3, r0
 80088f2:	b510      	push	{r4, lr}
 80088f4:	b2c9      	uxtb	r1, r1
 80088f6:	4402      	add	r2, r0
 80088f8:	4293      	cmp	r3, r2
 80088fa:	4618      	mov	r0, r3
 80088fc:	d101      	bne.n	8008902 <memchr+0x12>
 80088fe:	2000      	movs	r0, #0
 8008900:	e003      	b.n	800890a <memchr+0x1a>
 8008902:	7804      	ldrb	r4, [r0, #0]
 8008904:	3301      	adds	r3, #1
 8008906:	428c      	cmp	r4, r1
 8008908:	d1f6      	bne.n	80088f8 <memchr+0x8>
 800890a:	bd10      	pop	{r4, pc}

0800890c <memcpy>:
 800890c:	440a      	add	r2, r1
 800890e:	4291      	cmp	r1, r2
 8008910:	f100 33ff 	add.w	r3, r0, #4294967295
 8008914:	d100      	bne.n	8008918 <memcpy+0xc>
 8008916:	4770      	bx	lr
 8008918:	b510      	push	{r4, lr}
 800891a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800891e:	4291      	cmp	r1, r2
 8008920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008924:	d1f9      	bne.n	800891a <memcpy+0xe>
 8008926:	bd10      	pop	{r4, pc}

08008928 <_realloc_r>:
 8008928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800892c:	4680      	mov	r8, r0
 800892e:	4615      	mov	r5, r2
 8008930:	460c      	mov	r4, r1
 8008932:	b921      	cbnz	r1, 800893e <_realloc_r+0x16>
 8008934:	4611      	mov	r1, r2
 8008936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800893a:	f7ff ba65 	b.w	8007e08 <_malloc_r>
 800893e:	b92a      	cbnz	r2, 800894c <_realloc_r+0x24>
 8008940:	f7ff f9f8 	bl	8007d34 <_free_r>
 8008944:	2400      	movs	r4, #0
 8008946:	4620      	mov	r0, r4
 8008948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800894c:	f000 f89e 	bl	8008a8c <_malloc_usable_size_r>
 8008950:	4285      	cmp	r5, r0
 8008952:	4606      	mov	r6, r0
 8008954:	d802      	bhi.n	800895c <_realloc_r+0x34>
 8008956:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800895a:	d8f4      	bhi.n	8008946 <_realloc_r+0x1e>
 800895c:	4629      	mov	r1, r5
 800895e:	4640      	mov	r0, r8
 8008960:	f7ff fa52 	bl	8007e08 <_malloc_r>
 8008964:	4607      	mov	r7, r0
 8008966:	2800      	cmp	r0, #0
 8008968:	d0ec      	beq.n	8008944 <_realloc_r+0x1c>
 800896a:	42b5      	cmp	r5, r6
 800896c:	462a      	mov	r2, r5
 800896e:	4621      	mov	r1, r4
 8008970:	bf28      	it	cs
 8008972:	4632      	movcs	r2, r6
 8008974:	f7ff ffca 	bl	800890c <memcpy>
 8008978:	4621      	mov	r1, r4
 800897a:	4640      	mov	r0, r8
 800897c:	f7ff f9da 	bl	8007d34 <_free_r>
 8008980:	463c      	mov	r4, r7
 8008982:	e7e0      	b.n	8008946 <_realloc_r+0x1e>

08008984 <__swhatbuf_r>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	460c      	mov	r4, r1
 8008988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898c:	4615      	mov	r5, r2
 800898e:	2900      	cmp	r1, #0
 8008990:	461e      	mov	r6, r3
 8008992:	b096      	sub	sp, #88	@ 0x58
 8008994:	da0c      	bge.n	80089b0 <__swhatbuf_r+0x2c>
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	2100      	movs	r1, #0
 800899a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800899e:	bf14      	ite	ne
 80089a0:	2340      	movne	r3, #64	@ 0x40
 80089a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089a6:	2000      	movs	r0, #0
 80089a8:	6031      	str	r1, [r6, #0]
 80089aa:	602b      	str	r3, [r5, #0]
 80089ac:	b016      	add	sp, #88	@ 0x58
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	466a      	mov	r2, sp
 80089b2:	f000 f849 	bl	8008a48 <_fstat_r>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	dbed      	blt.n	8008996 <__swhatbuf_r+0x12>
 80089ba:	9901      	ldr	r1, [sp, #4]
 80089bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089c4:	4259      	negs	r1, r3
 80089c6:	4159      	adcs	r1, r3
 80089c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089cc:	e7eb      	b.n	80089a6 <__swhatbuf_r+0x22>

080089ce <__smakebuf_r>:
 80089ce:	898b      	ldrh	r3, [r1, #12]
 80089d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089d2:	079d      	lsls	r5, r3, #30
 80089d4:	4606      	mov	r6, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	d507      	bpl.n	80089ea <__smakebuf_r+0x1c>
 80089da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	6123      	str	r3, [r4, #16]
 80089e2:	2301      	movs	r3, #1
 80089e4:	6163      	str	r3, [r4, #20]
 80089e6:	b003      	add	sp, #12
 80089e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ea:	466a      	mov	r2, sp
 80089ec:	ab01      	add	r3, sp, #4
 80089ee:	f7ff ffc9 	bl	8008984 <__swhatbuf_r>
 80089f2:	9f00      	ldr	r7, [sp, #0]
 80089f4:	4605      	mov	r5, r0
 80089f6:	4639      	mov	r1, r7
 80089f8:	4630      	mov	r0, r6
 80089fa:	f7ff fa05 	bl	8007e08 <_malloc_r>
 80089fe:	b948      	cbnz	r0, 8008a14 <__smakebuf_r+0x46>
 8008a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a04:	059a      	lsls	r2, r3, #22
 8008a06:	d4ee      	bmi.n	80089e6 <__smakebuf_r+0x18>
 8008a08:	f023 0303 	bic.w	r3, r3, #3
 8008a0c:	f043 0302 	orr.w	r3, r3, #2
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	e7e2      	b.n	80089da <__smakebuf_r+0xc>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	9b01      	ldr	r3, [sp, #4]
 8008a22:	6020      	str	r0, [r4, #0]
 8008a24:	b15b      	cbz	r3, 8008a3e <__smakebuf_r+0x70>
 8008a26:	4630      	mov	r0, r6
 8008a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a2c:	f000 f81e 	bl	8008a6c <_isatty_r>
 8008a30:	b128      	cbz	r0, 8008a3e <__smakebuf_r+0x70>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	f023 0303 	bic.w	r3, r3, #3
 8008a38:	f043 0301 	orr.w	r3, r3, #1
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	431d      	orrs	r5, r3
 8008a42:	81a5      	strh	r5, [r4, #12]
 8008a44:	e7cf      	b.n	80089e6 <__smakebuf_r+0x18>
	...

08008a48 <_fstat_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4d06      	ldr	r5, [pc, #24]	@ (8008a68 <_fstat_r+0x20>)
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	4611      	mov	r1, r2
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	f7fe fcc6 	bl	80073e6 <_fstat>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	d102      	bne.n	8008a64 <_fstat_r+0x1c>
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	b103      	cbz	r3, 8008a64 <_fstat_r+0x1c>
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	bd38      	pop	{r3, r4, r5, pc}
 8008a66:	bf00      	nop
 8008a68:	200006e8 	.word	0x200006e8

08008a6c <_isatty_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4d05      	ldr	r5, [pc, #20]	@ (8008a88 <_isatty_r+0x1c>)
 8008a72:	4604      	mov	r4, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	602b      	str	r3, [r5, #0]
 8008a78:	f7fe fe18 	bl	80076ac <_isatty>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d102      	bne.n	8008a86 <_isatty_r+0x1a>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	b103      	cbz	r3, 8008a86 <_isatty_r+0x1a>
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	200006e8 	.word	0x200006e8

08008a8c <_malloc_usable_size_r>:
 8008a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a90:	1f18      	subs	r0, r3, #4
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	bfbc      	itt	lt
 8008a96:	580b      	ldrlt	r3, [r1, r0]
 8008a98:	18c0      	addlt	r0, r0, r3
 8008a9a:	4770      	bx	lr

08008a9c <_init>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf00      	nop
 8008aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa2:	bc08      	pop	{r3}
 8008aa4:	469e      	mov	lr, r3
 8008aa6:	4770      	bx	lr

08008aa8 <_fini>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	bf00      	nop
 8008aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aae:	bc08      	pop	{r3}
 8008ab0:	469e      	mov	lr, r3
 8008ab2:	4770      	bx	lr
